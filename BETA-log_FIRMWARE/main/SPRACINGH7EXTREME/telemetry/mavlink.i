# 1 "./src/main/telemetry/mavlink.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "./src/main/telemetry/mavlink.c"
# 26 "./src/main/telemetry/mavlink.c"
# 1 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stdbool.h" 1 3 4
# 27 "./src/main/telemetry/mavlink.c" 2
# 1 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stdint.h" 1 3 4
# 9 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stdint.h" 3 4
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\stdint.h" 1 3 4
# 12 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\stdint.h" 3 4
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h" 1 3 4







# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\features.h" 1 3 4
# 28 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\features.h" 3 4
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\_newlib_version.h" 1 3 4
# 29 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\features.h" 2 3 4
# 9 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h" 2 3 4
# 41 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4

# 41 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 77 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long int __int32_t;

typedef long unsigned int __uint32_t;
# 103 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;
# 134 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 182 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;
# 200 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 214 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h" 3 4
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 13 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\stdint.h" 2 3 4
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_intsup.h" 1 3 4
# 35 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
       
       
       
       
       
       
       
       
# 190 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_intsup.h" 3 4
       
       
       
       
       
       
       
       
# 14 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\stdint.h" 2 3 4
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h" 1 3 4
# 20 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h" 3 4
typedef __int8_t int8_t ;



typedef __uint8_t uint8_t ;







typedef __int16_t int16_t ;



typedef __uint16_t uint16_t ;







typedef __int32_t int32_t ;



typedef __uint32_t uint32_t ;







typedef __int64_t int64_t ;



typedef __uint64_t uint64_t ;






typedef __intmax_t intmax_t;




typedef __uintmax_t uintmax_t;




typedef __intptr_t intptr_t;




typedef __uintptr_t uintptr_t;
# 15 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\stdint.h" 2 3 4






typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;




typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;




typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;




typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
# 51 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\stdint.h" 3 4
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
# 61 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\stdint.h" 3 4
  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
# 71 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\stdint.h" 3 4
  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
# 81 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\stdint.h" 3 4
  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
# 10 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stdint.h" 2 3 4
# 28 "./src/main/telemetry/mavlink.c" 2
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\string.h" 1 3
# 10 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\string.h" 3
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\_ansi.h" 1 3
# 10 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\_ansi.h" 3
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\newlib.h" 1 3
# 11 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\_ansi.h" 2 3
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\config.h" 1 3



# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\ieeefp.h" 1 3
# 5 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\config.h" 2 3
# 12 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\_ansi.h" 2 3
# 11 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\string.h" 2 3
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h" 1 3
# 13 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h" 3
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\_ansi.h" 1 3
# 14 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h" 2 3
# 1 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h" 1 3 4
# 143 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h" 3 4
typedef int ptrdiff_t;
# 209 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 321 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h" 3 4
typedef unsigned int wchar_t;
# 415 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h" 3 4
} max_align_t;
# 15 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h" 2 3
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h" 1 3
# 24 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h" 3
# 1 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h" 1 3 4
# 350 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h" 3 4
typedef unsigned int wint_t;
# 25 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h" 2 3


# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_types.h" 1 3
# 28 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h" 2 3


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 90 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h" 3
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;







typedef long _fpos_t;
# 131 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h" 3
typedef unsigned int __size_t;
# 147 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h" 3
typedef signed int _ssize_t;
# 158 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h" 3
typedef _ssize_t __ssize_t;



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;




typedef void *_iconv_t;






typedef unsigned long __clock_t;






typedef __int_least64_t __time_t;





typedef unsigned long __clockid_t;


typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef int __nl_item;
typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;







typedef __builtin_va_list __va_list;
# 16 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h" 2 3






typedef unsigned long __ULong;
# 34 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h" 3
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h" 1 3
# 33 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h" 3
struct __lock;
typedef struct __lock * _LOCK_T;






extern void __retarget_lock_init(_LOCK_T *lock);

extern void __retarget_lock_init_recursive(_LOCK_T *lock);

extern void __retarget_lock_close(_LOCK_T lock);

extern void __retarget_lock_close_recursive(_LOCK_T lock);

extern void __retarget_lock_acquire(_LOCK_T lock);

extern void __retarget_lock_acquire_recursive(_LOCK_T lock);

extern int __retarget_lock_try_acquire(_LOCK_T lock);

extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);


extern void __retarget_lock_release(_LOCK_T lock);

extern void __retarget_lock_release_recursive(_LOCK_T lock);
# 35 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h" 2 3
typedef _LOCK_T _flock_t;







struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};







struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};
# 98 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h" 3
struct _atexit {
 struct _atexit *_next;
 int _ind;

 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
# 122 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 186 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h" 3
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (*_read) (struct _reent *, void *,
        char *, int);
  int (*_write) (struct _reent *, void *,
         const char *,
         int);
  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);
  int (*_close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;


  struct _reent *_data;



  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 292 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 324 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h" 3
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 613 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];


  int _unspecified_locale_info;
  struct __locale_t *_locale;

  int __sdidinit;

  void (*__cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;



  struct _atexit *_atexit;
  struct _atexit _atexit0;



  void (**(_sig_func))(int);




  struct _glue __sglue;

  __FILE __sf[3];

};
# 819 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h" 3
extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 12 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\string.h" 2 3
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\cdefs.h" 1 3
# 47 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\cdefs.h" 3
# 1 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h" 1 3 4
# 48 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\cdefs.h" 2 3
# 13 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\string.h" 2 3




# 1 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h" 1 3 4
# 18 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\string.h" 2 3


# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_locale.h" 1 3
# 9 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_locale.h" 3
struct __locale_t;
typedef struct __locale_t *locale_t;
# 21 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\string.h" 2 3



# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\strings.h" 1 3
# 44 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\strings.h" 3


int bcmp(const void *, const void *, size_t) __attribute__((__pure__));
void bcopy(const void *, void *, size_t);
void bzero(void *, size_t);


void explicit_bzero(void *, size_t);


int ffs(int) __attribute__((__const__));


int ffsl(long) __attribute__((__const__));
int ffsll(long long) __attribute__((__const__));
int fls(int) __attribute__((__const__));
int flsl(long) __attribute__((__const__));
int flsll(long long) __attribute__((__const__));


char *index(const char *, int) __attribute__((__pure__));
char *rindex(const char *, int) __attribute__((__pure__));

int strcasecmp(const char *, const char *) __attribute__((__pure__));
int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));


int strcasecmp_l (const char *, const char *, locale_t);
int strncasecmp_l (const char *, const char *, size_t, locale_t);


# 25 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\string.h" 2 3




void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void *restrict, const void *restrict, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *restrict, const char *restrict);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *restrict, const char *restrict);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *restrict, const char *restrict, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *restrict, const char *restrict, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *restrict, const char *restrict);

size_t strxfrm (char *restrict, const char *restrict, size_t);


int strcoll_l (const char *, const char *, locale_t);
char *strerror_l (int, locale_t);
size_t strxfrm_l (char *restrict, const char *restrict, size_t, locale_t);


char *strtok_r (char *restrict, const char *restrict, char **restrict);


int timingsafe_bcmp (const void *, const void *, size_t);
int timingsafe_memcmp (const void *, const void *, size_t);


void * memccpy (void *restrict, const void *restrict, int, size_t);


void * mempcpy (void *, const void *, size_t);
void * memmem (const void *, size_t, const void *, size_t);
void * memrchr (const void *, int, size_t);
void * rawmemchr (const void *, int);


char *stpcpy (char *restrict, const char *restrict);
char *stpncpy (char *restrict, const char *restrict, size_t);


char *strcasestr (const char *, const char *);
char *strchrnul (const char *, int);


char *strdup (const char *) __attribute__((__malloc__)) __attribute__((__warn_unused_result__));

char *_strdup_r (struct _reent *, const char *);

char *strndup (const char *, size_t) __attribute__((__malloc__)) __attribute__((__warn_unused_result__));

char *_strndup_r (struct _reent *, const char *, size_t);






char *strerror_r (int, char *, size_t);
# 112 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\string.h" 3
char * _strerror_r (struct _reent *, int, int, int *);


size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);


size_t strnlen (const char *, size_t);


char *strsep (char **, const char *);


char *strnstr(const char *, const char *, size_t) __attribute__((__pure__));



char *strlwr (char *);
char *strupr (char *);



char *strsignal (int __signo);







int strverscmp (const char *, const char *);
# 172 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\string.h" 3
char *__attribute__((__nonnull__ (1))) basename (const char *) __asm__("" "__gnu_basename");


# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\string.h" 1 3
# 176 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\string.h" 2 3


# 29 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/platform.h" 1
# 21 "./src/main/platform.h"
       




       
# 53 "./src/main/platform.h"
# 1 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h" 1
# 128 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
# 1 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h750xx.h" 1
# 49 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h750xx.h"

# 49 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h750xx.h"
typedef enum
{

  NonMaskableInt_IRQn = -14,
  HardFault_IRQn = -13,
  MemoryManagement_IRQn = -12,
  BusFault_IRQn = -11,
  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,

  WWDG_IRQn = 0,
  PVD_AVD_IRQn = 1,
  TAMP_STAMP_IRQn = 2,
  RTC_WKUP_IRQn = 3,
  FLASH_IRQn = 4,
  RCC_IRQn = 5,
  EXTI0_IRQn = 6,
  EXTI1_IRQn = 7,
  EXTI2_IRQn = 8,
  EXTI3_IRQn = 9,
  EXTI4_IRQn = 10,
  DMA1_Stream0_IRQn = 11,
  DMA1_Stream1_IRQn = 12,
  DMA1_Stream2_IRQn = 13,
  DMA1_Stream3_IRQn = 14,
  DMA1_Stream4_IRQn = 15,
  DMA1_Stream5_IRQn = 16,
  DMA1_Stream6_IRQn = 17,
  ADC_IRQn = 18,
  FDCAN1_IT0_IRQn = 19,
  FDCAN2_IT0_IRQn = 20,
  FDCAN1_IT1_IRQn = 21,
  FDCAN2_IT1_IRQn = 22,
  EXTI9_5_IRQn = 23,
  TIM1_BRK_IRQn = 24,
  TIM1_UP_IRQn = 25,
  TIM1_TRG_COM_IRQn = 26,
  TIM1_CC_IRQn = 27,
  TIM2_IRQn = 28,
  TIM3_IRQn = 29,
  TIM4_IRQn = 30,
  I2C1_EV_IRQn = 31,
  I2C1_ER_IRQn = 32,
  I2C2_EV_IRQn = 33,
  I2C2_ER_IRQn = 34,
  SPI1_IRQn = 35,
  SPI2_IRQn = 36,
  USART1_IRQn = 37,
  USART2_IRQn = 38,
  USART3_IRQn = 39,
  EXTI15_10_IRQn = 40,
  RTC_Alarm_IRQn = 41,
  TIM8_BRK_TIM12_IRQn = 43,
  TIM8_UP_TIM13_IRQn = 44,
  TIM8_TRG_COM_TIM14_IRQn = 45,
  TIM8_CC_IRQn = 46,
  DMA1_Stream7_IRQn = 47,
  FMC_IRQn = 48,
  SDMMC1_IRQn = 49,
  TIM5_IRQn = 50,
  SPI3_IRQn = 51,
  UART4_IRQn = 52,
  UART5_IRQn = 53,
  TIM6_DAC_IRQn = 54,
  TIM7_IRQn = 55,
  DMA2_Stream0_IRQn = 56,
  DMA2_Stream1_IRQn = 57,
  DMA2_Stream2_IRQn = 58,
  DMA2_Stream3_IRQn = 59,
  DMA2_Stream4_IRQn = 60,
  ETH_IRQn = 61,
  ETH_WKUP_IRQn = 62,
  FDCAN_CAL_IRQn = 63,
  DMA2_Stream5_IRQn = 68,
  DMA2_Stream6_IRQn = 69,
  DMA2_Stream7_IRQn = 70,
  USART6_IRQn = 71,
  I2C3_EV_IRQn = 72,
  I2C3_ER_IRQn = 73,
  OTG_HS_EP1_OUT_IRQn = 74,
  OTG_HS_EP1_IN_IRQn = 75,
  OTG_HS_WKUP_IRQn = 76,
  OTG_HS_IRQn = 77,
  DCMI_IRQn = 78,
  CRYP_IRQn = 79,
  HASH_RNG_IRQn = 80,
  FPU_IRQn = 81,
  UART7_IRQn = 82,
  UART8_IRQn = 83,
  SPI4_IRQn = 84,
  SPI5_IRQn = 85,
  SPI6_IRQn = 86,
  SAI1_IRQn = 87,
  LTDC_IRQn = 88,
  LTDC_ER_IRQn = 89,
  DMA2D_IRQn = 90,
  SAI2_IRQn = 91,
  QUADSPI_IRQn = 92,
  LPTIM1_IRQn = 93,
  CEC_IRQn = 94,
  I2C4_EV_IRQn = 95,
  I2C4_ER_IRQn = 96,
  SPDIF_RX_IRQn = 97,
  OTG_FS_EP1_OUT_IRQn = 98,
  OTG_FS_EP1_IN_IRQn = 99,
  OTG_FS_WKUP_IRQn = 100,
  OTG_FS_IRQn = 101,
  DMAMUX1_OVR_IRQn = 102,
  HRTIM1_Master_IRQn = 103,
  HRTIM1_TIMA_IRQn = 104,
  HRTIM1_TIMB_IRQn = 105,
  HRTIM1_TIMC_IRQn = 106,
  HRTIM1_TIMD_IRQn = 107,
  HRTIM1_TIME_IRQn = 108,
  HRTIM1_FLT_IRQn = 109,
  DFSDM1_FLT0_IRQn = 110,
  DFSDM1_FLT1_IRQn = 111,
  DFSDM1_FLT2_IRQn = 112,
  DFSDM1_FLT3_IRQn = 113,
  SAI3_IRQn = 114,
  SWPMI1_IRQn = 115,
  TIM15_IRQn = 116,
  TIM16_IRQn = 117,
  TIM17_IRQn = 118,
  MDIOS_WKUP_IRQn = 119,
  MDIOS_IRQn = 120,
  JPEG_IRQn = 121,
  MDMA_IRQn = 122,
  SDMMC2_IRQn = 124,
  HSEM1_IRQn = 125,
  ADC3_IRQn = 127,
  DMAMUX2_OVR_IRQn = 128,
  BDMA_Channel0_IRQn = 129,
  BDMA_Channel1_IRQn = 130,
  BDMA_Channel2_IRQn = 131,
  BDMA_Channel3_IRQn = 132,
  BDMA_Channel4_IRQn = 133,
  BDMA_Channel5_IRQn = 134,
  BDMA_Channel6_IRQn = 135,
  BDMA_Channel7_IRQn = 136,
  COMP_IRQn = 137 ,
  LPTIM2_IRQn = 138,
  LPTIM3_IRQn = 139,
  LPTIM4_IRQn = 140,
  LPTIM5_IRQn = 141,
  LPUART1_IRQn = 142,
  CRS_IRQn = 144,
  ECC_IRQn = 145,
  SAI4_IRQn = 146,
  WAKEUP_PIN_IRQn = 149,
} IRQn_Type;
# 225 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h750xx.h"
# 1 "./lib/main/CMSIS/Core/Include/core_cm7.h" 1
# 63 "./lib/main/CMSIS/Core/Include/core_cm7.h"
# 1 "./lib/main/CMSIS/Core/Include/cmsis_version.h" 1
# 64 "./lib/main/CMSIS/Core/Include/core_cm7.h" 2
# 162 "./lib/main/CMSIS/Core/Include/core_cm7.h"
# 1 "./lib/main/CMSIS/Core/Include/cmsis_compiler.h" 1
# 48 "./lib/main/CMSIS/Core/Include/cmsis_compiler.h"
# 1 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h" 1
# 29 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"
# 71 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed)) T_UINT32 { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_WRITE { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_READ { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_WRITE { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_READ { uint32_t v; };
#pragma GCC diagnostic pop
# 129 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_irq(void)
{
  __asm volatile ("cpsid i" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, control" : "=r" (result) );
  return(result);
}
# 181 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_CONTROL(uint32_t control)
{
  __asm volatile ("MSR control, %0" : : "r" (control) : "memory");
}
# 205 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_IPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, ipsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_APSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, apsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_xPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, xpsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_PSP(void)
{
  register uint32_t result;

  __asm volatile ("MRS %0, psp" : "=r" (result) );
  return(result);
}
# 277 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PSP(uint32_t topOfProcStack)
{
  __asm volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
}
# 301 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_MSP(void)
{
  register uint32_t result;

  __asm volatile ("MRS %0, msp" : "=r" (result) );
  return(result);
}
# 331 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_MSP(uint32_t topOfMainStack)
{
  __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
}
# 382 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  return(result);
}
# 412 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PRIMASK(uint32_t priMask)
{
  __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
}
# 439 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_fault_irq(void)
{
  __asm volatile ("cpsie f" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_fault_irq(void)
{
  __asm volatile ("cpsid f" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, basepri" : "=r" (result) );
  return(result);
}
# 491 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI(uint32_t basePri)
{
  __asm volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
}
# 516 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI_MAX(uint32_t basePri)
{
  __asm volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_FAULTMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, faultmask" : "=r" (result) );
  return(result);
}
# 557 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_FAULTMASK(uint32_t faultMask)
{
  __asm volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
}
# 769 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_FPSCR(void)
{




  return __builtin_arm_get_fpscr();
# 785 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
}







__attribute__((always_inline)) static inline void __set_FPSCR(uint32_t fpscr)
{




  __builtin_arm_set_fpscr(fpscr);






}
# 869 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __ISB(void)
{
  __asm volatile ("isb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DSB(void)
{
  __asm volatile ("dsb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DMB(void)
{
  __asm volatile ("dmb 0xF":::"memory");
}
# 903 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV(uint32_t value)
{

  return __builtin_bswap32(value);






}
# 922 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  return result;
}
# 937 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline int16_t __REVSH(int16_t value)
{

  return (int16_t)__builtin_bswap16(value);






}
# 957 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
}
# 984 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;




   __asm volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
# 1004 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
  return result;
}
# 1027 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint8_t) result);
}
# 1049 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDREXH(volatile uint16_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint16_t) result);
}
# 1071 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __asm volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}
# 1088 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __asm volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 1105 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
{
   uint32_t result;

   __asm volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 1122 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __asm volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
   return(result);
}






__attribute__((always_inline)) static inline void __CLREX(void)
{
  __asm volatile ("clrex" ::: "memory");
}
# 1188 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RRX(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rrx %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 1203 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDRBT(volatile uint8_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint8_t) result);
}
# 1225 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDRHT(volatile uint16_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint16_t) result);
}
# 1247 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDRT(volatile uint32_t *ptr)
{
    uint32_t result;

   __asm volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
   return(result);
}
# 1262 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRBT(uint8_t value, volatile uint8_t *ptr)
{
   __asm volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1274 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRHT(uint16_t value, volatile uint16_t *ptr)
{
   __asm volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 1286 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRT(uint32_t value, volatile uint32_t *ptr)
{
   __asm volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
}
# 1541 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __SADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
# 1861 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUAD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUADX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SMUSD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SEL (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QADD( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QSUB( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
# 2074 "./lib/main/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __asm volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r" (op1), "r" (op2), "r" (op3) );
 return(result);
}





#pragma GCC diagnostic pop
# 49 "./lib/main/CMSIS/Core/Include/cmsis_compiler.h" 2
# 163 "./lib/main/CMSIS/Core/Include/core_cm7.h" 2
# 274 "./lib/main/CMSIS/Core/Include/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t _reserved0:16;
    uint32_t GE:4;
    uint32_t _reserved1:7;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} APSR_Type;
# 313 "./lib/main/CMSIS/Core/Include/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:23;
  } b;
  uint32_t w;
} IPSR_Type;
# 331 "./lib/main/CMSIS/Core/Include/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:1;
    uint32_t ICI_IT_1:6;
    uint32_t GE:4;
    uint32_t _reserved1:4;
    uint32_t T:1;
    uint32_t ICI_IT_2:2;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} xPSR_Type;
# 386 "./lib/main/CMSIS/Core/Include/core_cm7.h"
typedef union
{
  struct
  {
    uint32_t nPRIV:1;
    uint32_t SPSEL:1;
    uint32_t FPCA:1;
    uint32_t _reserved0:29;
  } b;
  uint32_t w;
} CONTROL_Type;
# 421 "./lib/main/CMSIS/Core/Include/core_cm7.h"
typedef struct
{
  volatile uint32_t ISER[8U];
        uint32_t RESERVED0[24U];
  volatile uint32_t ICER[8U];
        uint32_t RSERVED1[24U];
  volatile uint32_t ISPR[8U];
        uint32_t RESERVED2[24U];
  volatile uint32_t ICPR[8U];
        uint32_t RESERVED3[24U];
  volatile uint32_t IABR[8U];
        uint32_t RESERVED4[56U];
  volatile uint8_t IP[240U];
        uint32_t RESERVED5[644U];
  volatile uint32_t STIR;
} NVIC_Type;
# 455 "./lib/main/CMSIS/Core/Include/core_cm7.h"
typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHPR[12U];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t ID_PFR[2U];
  volatile const uint32_t ID_DFR;
  volatile const uint32_t ID_AFR;
  volatile const uint32_t ID_MFR[4U];
  volatile const uint32_t ID_ISAR[5U];
        uint32_t RESERVED0[1U];
  volatile const uint32_t CLIDR;
  volatile const uint32_t CTR;
  volatile const uint32_t CCSIDR;
  volatile uint32_t CSSELR;
  volatile uint32_t CPACR;
        uint32_t RESERVED3[93U];
  volatile uint32_t STIR;
        uint32_t RESERVED4[15U];
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
  volatile const uint32_t MVFR2;
        uint32_t RESERVED5[1U];
  volatile uint32_t ICIALLU;
        uint32_t RESERVED6[1U];
  volatile uint32_t ICIMVAU;
  volatile uint32_t DCIMVAC;
  volatile uint32_t DCISW;
  volatile uint32_t DCCMVAU;
  volatile uint32_t DCCMVAC;
  volatile uint32_t DCCSW;
  volatile uint32_t DCCIMVAC;
  volatile uint32_t DCCISW;
        uint32_t RESERVED7[6U];
  volatile uint32_t ITCMCR;
  volatile uint32_t DTCMCR;
  volatile uint32_t AHBPCR;
  volatile uint32_t CACR;
  volatile uint32_t AHBSCR;
        uint32_t RESERVED8[1U];
  volatile uint32_t ABFSR;
} SCB_Type;
# 921 "./lib/main/CMSIS/Core/Include/core_cm7.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile const uint32_t ICTR;
  volatile uint32_t ACTLR;
} SCnSCB_Type;
# 961 "./lib/main/CMSIS/Core/Include/core_cm7.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;
# 1013 "./lib/main/CMSIS/Core/Include/core_cm7.h"
typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32U];
        uint32_t RESERVED0[864U];
  volatile uint32_t TER;
        uint32_t RESERVED1[15U];
  volatile uint32_t TPR;
        uint32_t RESERVED2[15U];
  volatile uint32_t TCR;
        uint32_t RESERVED3[29U];
  volatile uint32_t IWR;
  volatile const uint32_t IRR;
  volatile uint32_t IMCR;
        uint32_t RESERVED4[43U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
        uint32_t RESERVED5[6U];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;
# 1116 "./lib/main/CMSIS/Core/Include/core_cm7.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t CYCCNT;
  volatile uint32_t CPICNT;
  volatile uint32_t EXCCNT;
  volatile uint32_t SLEEPCNT;
  volatile uint32_t LSUCNT;
  volatile uint32_t FOLDCNT;
  volatile const uint32_t PCSR;
  volatile uint32_t COMP0;
  volatile uint32_t MASK0;
  volatile uint32_t FUNCTION0;
        uint32_t RESERVED0[1U];
  volatile uint32_t COMP1;
  volatile uint32_t MASK1;
  volatile uint32_t FUNCTION1;
        uint32_t RESERVED1[1U];
  volatile uint32_t COMP2;
  volatile uint32_t MASK2;
  volatile uint32_t FUNCTION2;
        uint32_t RESERVED2[1U];
  volatile uint32_t COMP3;
  volatile uint32_t MASK3;
  volatile uint32_t FUNCTION3;
        uint32_t RESERVED3[981U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
} DWT_Type;
# 1266 "./lib/main/CMSIS/Core/Include/core_cm7.h"
typedef struct
{
  volatile uint32_t SSPSR;
  volatile uint32_t CSPSR;
        uint32_t RESERVED0[2U];
  volatile uint32_t ACPR;
        uint32_t RESERVED1[55U];
  volatile uint32_t SPPR;
        uint32_t RESERVED2[131U];
  volatile const uint32_t FFSR;
  volatile uint32_t FFCR;
  volatile const uint32_t FSCR;
        uint32_t RESERVED3[759U];
  volatile const uint32_t TRIGGER;
  volatile const uint32_t FIFO0;
  volatile const uint32_t ITATBCTR2;
        uint32_t RESERVED4[1U];
  volatile const uint32_t ITATBCTR0;
  volatile const uint32_t FIFO1;
  volatile uint32_t ITCTRL;
        uint32_t RESERVED5[39U];
  volatile uint32_t CLAIMSET;
  volatile uint32_t CLAIMCLR;
        uint32_t RESERVED7[8U];
  volatile const uint32_t DEVID;
  volatile const uint32_t DEVTYPE;
} TPI_Type;
# 1425 "./lib/main/CMSIS/Core/Include/core_cm7.h"
typedef struct
{
  volatile const uint32_t TYPE;
  volatile uint32_t CTRL;
  volatile uint32_t RNR;
  volatile uint32_t RBAR;
  volatile uint32_t RASR;
  volatile uint32_t RBAR_A1;
  volatile uint32_t RASR_A1;
  volatile uint32_t RBAR_A2;
  volatile uint32_t RASR_A2;
  volatile uint32_t RBAR_A3;
  volatile uint32_t RASR_A3;
} MPU_Type;
# 1521 "./lib/main/CMSIS/Core/Include/core_cm7.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile uint32_t FPCCR;
  volatile uint32_t FPCAR;
  volatile uint32_t FPDSCR;
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
  volatile const uint32_t MVFR2;
} FPU_Type;
# 1630 "./lib/main/CMSIS/Core/Include/core_cm7.h"
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;
# 1854 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);

  reg_value = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;
  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));
  reg_value = (reg_value |
                ((uint32_t)0x5FAUL << 16U) |
                (PriorityGroupTmp << 8U) );
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = reg_value;
}







static inline uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
}
# 1885 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1902 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1921 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __DSB();
    __ISB();
  }
}
# 1940 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1959 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1974 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1991 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 2013 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - 4)) & (uint32_t)0xFFUL);
  }
  else
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 4)) & (uint32_t)0xFFUL);
  }
}
# 2035 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] >> (8U - 4)));
  }
  else
  {
    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - 4)));
  }
}
# 2060 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4)) ? (uint32_t)(4) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority & (uint32_t)((1UL << (SubPriorityBits )) - 1UL)))
         );
}
# 2087 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4)) ? (uint32_t)(4) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4));

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
  *pSubPriority = (Priority ) & (uint32_t)((1UL << (SubPriorityBits )) - 1UL);
}
# 2110 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  vectors[(int32_t)IRQn + 16] = vector;
}
# 2125 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  return vectors[(int32_t)IRQn + 16];
}






static inline void __NVIC_SystemReset(void)
{
  __DSB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = (uint32_t)((0x5FAUL << 16U) |
                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
                            (1UL << 2U) );
  __DSB();

  for(;;)
  {
    __asm volatile ("nop");
  }
}







# 1 "./lib/main/CMSIS/Core/Include/mpu_armv7.h" 1
# 107 "./lib/main/CMSIS/Core/Include/mpu_armv7.h"
typedef struct {
  uint32_t RBAR;
  uint32_t RASR;
} ARM_MPU_Region_t;




static inline void ARM_MPU_Enable(uint32_t MPU_Control)
{
  __DSB();
  __ISB();
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL = MPU_Control | (1UL );

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR |= (1UL << 16U);

}



static inline void ARM_MPU_Disable(void)
{
  __DSB();
  __ISB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR &= ~(1UL << 16U);

  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL &= ~(1UL );
}




static inline void ARM_MPU_ClrRegion(uint32_t rnr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = 0U;
}





static inline void ARM_MPU_SetRegion(uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void ARM_MPU_SetRegionEx(uint32_t rnr, uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void orderedCpy(volatile uint32_t* dst, const uint32_t* 
# 173 "./lib/main/CMSIS/Core/Include/mpu_armv7.h" 3
                                                                       restrict 
# 173 "./lib/main/CMSIS/Core/Include/mpu_armv7.h"
                                                                                  src, uint32_t len)
{
  uint32_t i;
  for (i = 0U; i < len; ++i)
  {
    dst[i] = src[i];
  }
}





static inline void ARM_MPU_Load(ARM_MPU_Region_t const* table, uint32_t cnt)
{
  const uint32_t rowWordSize = sizeof(ARM_MPU_Region_t)/4U;
  while (cnt > 4U) {
    orderedCpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), 4U*rowWordSize);
    table += 4U;
    cnt -= 4U;
  }
  orderedCpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), cnt*rowWordSize);
}
# 2158 "./lib/main/CMSIS/Core/Include/core_cm7.h" 2
# 2177 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->MVFR0;
  if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x220U)
  {
    return 2U;
  }
  else if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x020U)
  {
    return 1U;
  }
  else
  {
    return 0U;
  }
}
# 2218 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline void SCB_EnableICache (void)
{

    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICIALLU = 0UL;
    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR |= (uint32_t)(1UL << 17U);
    __DSB();
    __ISB();

}






static inline void SCB_DisableICache (void)
{

    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR &= ~(uint32_t)(1UL << 17U);
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICIALLU = 0UL;
    __DSB();
    __ISB();

}






static inline void SCB_InvalidateICache (void)
{

    __DSB();
    __ISB();
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->ICIALLU = 0UL;
    __DSB();
    __ISB();

}






static inline void SCB_EnableDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                      ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);
    __DSB();

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR |= (uint32_t)(1UL << 16U);

    __DSB();
    __ISB();

}






static inline void SCB_DisableDCache (void)
{

    register uint32_t ccsidr;
    register uint32_t sets;
    register uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCR &= ~(uint32_t)(1UL << 16U);
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                       ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}






static inline void SCB_InvalidateDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                      ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}






static inline void SCB_CleanDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

     ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
   __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCSW = (((sets << 5U) & (0x1FFUL << 5U)) |
                      ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}






static inline void SCB_CleanInvalidateDCache (void)
{

    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CSSELR = 0U;
    __DSB();

    ccsidr = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CCSIDR;


    sets = (uint32_t)((((ccsidr) & (0x7FFFUL << 13U) ) >> 13U ));
    do {
      ways = (uint32_t)((((ccsidr) & (0x3FFUL << 3U)) >> 3U));
      do {
        ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCISW = (((sets << 5U) & (0x1FFUL << 5U)) |
                       ((ways << 30U) & (3UL << 30U)) );



      } while (ways-- != 0U);
    } while(sets-- != 0U);

    __DSB();
    __ISB();

}
# 2453 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{

     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t)addr;
     int32_t linesize = 32;

    __DSB();

    while (op_size > 0) {
      ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCIMVAC = op_addr;
      op_addr += (uint32_t)linesize;
      op_size -= linesize;
    }

    __DSB();
    __ISB();

}
# 2480 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{

     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;

    __DSB();

    while (op_size > 0) {
      ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCMVAC = op_addr;
      op_addr += (uint32_t)linesize;
      op_size -= linesize;
    }

    __DSB();
    __ISB();

}
# 2507 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline void SCB_CleanInvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{

     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;

    __DSB();

    while (op_size > 0) {
      ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->DCCIMVAC = op_addr;
      op_addr += (uint32_t)linesize;
      op_size -= linesize;
    }

    __DSB();
    __ISB();

}
# 2553 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);
  }

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = (uint32_t)(ticks - 1UL);
  __NVIC_SetPriority (SysTick_IRQn, (1UL << 4) - 1UL);
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0UL;
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) |
                   (1UL << 1U) |
                   (1UL );
  return (0UL);
}
# 2583 "./lib/main/CMSIS/Core/Include/core_cm7.h"
extern volatile int32_t ITM_RxBuffer;
# 2595 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&
      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL ) != 0UL) )
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
    {
      __asm volatile ("nop");
    }
    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
  }
  return (ch);
}
# 2616 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;

  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
  {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);
  }

  return (ch);
}
# 2636 "./lib/main/CMSIS/Core/Include/core_cm7.h"
static inline int32_t ITM_CheckChar (void)
{

  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
  {
    return (0);
  }
  else
  {
    return (1);
  }
}
# 226 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h750xx.h" 2
# 234 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h750xx.h"
# 1 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h" 1
# 58 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
extern uint32_t SystemCoreClock;
extern uint32_t SystemD2Clock;
extern const uint8_t D1CorePrescTable[16] ;
# 86 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
extern void SystemInit(void);
extern void SystemCoreClockUpdate(void);
# 235 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h750xx.h" 2
# 245 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h750xx.h"
typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t IER;
  volatile uint32_t CR;
  volatile uint32_t CFGR;
  volatile uint32_t CFGR2;
  volatile uint32_t SMPR1;
  volatile uint32_t SMPR2;
  volatile uint32_t PCSEL;
  volatile uint32_t LTR1;
  volatile uint32_t HTR1;
  uint32_t RESERVED1;
  uint32_t RESERVED2;
  volatile uint32_t SQR1;
  volatile uint32_t SQR2;
  volatile uint32_t SQR3;
  volatile uint32_t SQR4;
  volatile uint32_t DR;
  uint32_t RESERVED3;
  uint32_t RESERVED4;
  volatile uint32_t JSQR;
  uint32_t RESERVED5[4];
  volatile uint32_t OFR1;
  volatile uint32_t OFR2;
  volatile uint32_t OFR3;
  volatile uint32_t OFR4;
  uint32_t RESERVED6[4];
  volatile uint32_t JDR1;
  volatile uint32_t JDR2;
  volatile uint32_t JDR3;
  volatile uint32_t JDR4;
  uint32_t RESERVED7[4];
  volatile uint32_t AWD2CR;
  volatile uint32_t AWD3CR;
  uint32_t RESERVED8;
  uint32_t RESERVED9;
  volatile uint32_t LTR2;
  volatile uint32_t HTR2;
  volatile uint32_t LTR3;
  volatile uint32_t HTR3;
  volatile uint32_t DIFSEL;
  volatile uint32_t CALFACT;
  volatile uint32_t CALFACT2;
} ADC_TypeDef;


typedef struct
{
volatile uint32_t CSR;
uint32_t RESERVED;
volatile uint32_t CCR;
volatile uint32_t CDR;
volatile uint32_t CDR2;

} ADC_Common_TypeDef;






typedef struct
{
  volatile uint32_t CSR;
  volatile uint32_t CCR;
} VREFBUF_TypeDef;






typedef struct
{
  volatile uint32_t CREL;
  volatile uint32_t ENDN;
  volatile uint32_t RESERVED1;
  volatile uint32_t DBTP;
  volatile uint32_t TEST;
  volatile uint32_t RWD;
  volatile uint32_t CCCR;
  volatile uint32_t NBTP;
  volatile uint32_t TSCC;
  volatile uint32_t TSCV;
  volatile uint32_t TOCC;
  volatile uint32_t TOCV;
  volatile uint32_t RESERVED2[4];
  volatile uint32_t ECR;
  volatile uint32_t PSR;
  volatile uint32_t TDCR;
  volatile uint32_t RESERVED3;
  volatile uint32_t IR;
  volatile uint32_t IE;
  volatile uint32_t ILS;
  volatile uint32_t ILE;
  volatile uint32_t RESERVED4[8];
  volatile uint32_t GFC;
  volatile uint32_t SIDFC;
  volatile uint32_t XIDFC;
  volatile uint32_t RESERVED5;
  volatile uint32_t XIDAM;
  volatile uint32_t HPMS;
  volatile uint32_t NDAT1;
  volatile uint32_t NDAT2;
  volatile uint32_t RXF0C;
  volatile uint32_t RXF0S;
  volatile uint32_t RXF0A;
  volatile uint32_t RXBC;
  volatile uint32_t RXF1C;
  volatile uint32_t RXF1S;
  volatile uint32_t RXF1A;
  volatile uint32_t RXESC;
  volatile uint32_t TXBC;
  volatile uint32_t TXFQS;
  volatile uint32_t TXESC;
  volatile uint32_t TXBRP;
  volatile uint32_t TXBAR;
  volatile uint32_t TXBCR;
  volatile uint32_t TXBTO;
  volatile uint32_t TXBCF;
  volatile uint32_t TXBTIE;
  volatile uint32_t TXBCIE;
  volatile uint32_t RESERVED6[2];
  volatile uint32_t TXEFC;
  volatile uint32_t TXEFS;
  volatile uint32_t TXEFA;
  volatile uint32_t RESERVED7;
} FDCAN_GlobalTypeDef;





typedef struct
{
  volatile uint32_t TTTMC;
  volatile uint32_t TTRMC;
  volatile uint32_t TTOCF;
  volatile uint32_t TTMLM;
  volatile uint32_t TURCF;
  volatile uint32_t TTOCN;
  volatile uint32_t TTGTP;
  volatile uint32_t TTTMK;
  volatile uint32_t TTIR;
  volatile uint32_t TTIE;
  volatile uint32_t TTILS;
  volatile uint32_t TTOST;
  volatile uint32_t TURNA;
  volatile uint32_t TTLGT;
  volatile uint32_t TTCTC;
  volatile uint32_t TTCPT;
  volatile uint32_t TTCSM;
  volatile uint32_t RESERVED1[111];
  volatile uint32_t TTTS;
} TTCAN_TypeDef;





typedef struct
{
  volatile uint32_t CREL;
  volatile uint32_t CCFG;
  volatile uint32_t CSTAT;
  volatile uint32_t CWD;
  volatile uint32_t IR;
  volatile uint32_t IE;
} FDCAN_ClockCalibrationUnit_TypeDef;






typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CFGR;
  volatile uint32_t TXDR;
  volatile uint32_t RXDR;
  volatile uint32_t ISR;
  volatile uint32_t IER;
}CEC_TypeDef;





typedef struct
{
  volatile uint32_t DR;
  volatile uint32_t IDR;
  volatile uint32_t CR;
  uint32_t RESERVED2;
  volatile uint32_t INIT;
  volatile uint32_t POL;
} CRC_TypeDef;





typedef struct
{
volatile uint32_t CR;
volatile uint32_t CFGR;
volatile uint32_t ISR;
volatile uint32_t ICR;
} CRS_TypeDef;






typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SWTRIGR;
  volatile uint32_t DHR12R1;
  volatile uint32_t DHR12L1;
  volatile uint32_t DHR8R1;
  volatile uint32_t DHR12R2;
  volatile uint32_t DHR12L2;
  volatile uint32_t DHR8R2;
  volatile uint32_t DHR12RD;
  volatile uint32_t DHR12LD;
  volatile uint32_t DHR8RD;
  volatile uint32_t DOR1;
  volatile uint32_t DOR2;
  volatile uint32_t SR;
  volatile uint32_t CCR;
  volatile uint32_t MCR;
  volatile uint32_t SHSR1;
  volatile uint32_t SHSR2;
  volatile uint32_t SHHR;
  volatile uint32_t SHRR;
} DAC_TypeDef;




typedef struct
{
  volatile uint32_t FLTCR1;
  volatile uint32_t FLTCR2;
  volatile uint32_t FLTISR;
  volatile uint32_t FLTICR;
  volatile uint32_t FLTJCHGR;
  volatile uint32_t FLTFCR;
  volatile uint32_t FLTJDATAR;
  volatile uint32_t FLTRDATAR;
  volatile uint32_t FLTAWHTR;
  volatile uint32_t FLTAWLTR;
  volatile uint32_t FLTAWSR;
  volatile uint32_t FLTAWCFR;
  volatile uint32_t FLTEXMAX;
  volatile uint32_t FLTEXMIN;
  volatile uint32_t FLTCNVTIMR;
} DFSDM_Filter_TypeDef;




typedef struct
{
  volatile uint32_t CHCFGR1;
  volatile uint32_t CHCFGR2;
  volatile uint32_t CHAWSCDR;

  volatile uint32_t CHWDATAR;
  volatile uint32_t CHDATINR;
} DFSDM_Channel_TypeDef;




typedef struct
{
  volatile uint32_t IDCODE;
  volatile uint32_t CR;
  uint32_t RESERVED4[11];
  volatile uint32_t APB3FZ1;
  uint32_t RESERVED5;
  volatile uint32_t APB1LFZ1;
  uint32_t RESERVED6;
  volatile uint32_t APB1HFZ1;
  uint32_t RESERVED7;
  volatile uint32_t APB2FZ1;
  uint32_t RESERVED8;
  volatile uint32_t APB4FZ1;
}DBGMCU_TypeDef;




typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SR;
  volatile uint32_t RISR;
  volatile uint32_t IER;
  volatile uint32_t MISR;
  volatile uint32_t ICR;
  volatile uint32_t ESCR;
  volatile uint32_t ESUR;
  volatile uint32_t CWSTRTR;
  volatile uint32_t CWSIZER;
  volatile uint32_t DR;
} DCMI_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t NDTR;
  volatile uint32_t PAR;
  volatile uint32_t M0AR;
  volatile uint32_t M1AR;
  volatile uint32_t FCR;
} DMA_Stream_TypeDef;

typedef struct
{
  volatile uint32_t LISR;
  volatile uint32_t HISR;
  volatile uint32_t LIFCR;
  volatile uint32_t HIFCR;
} DMA_TypeDef;

typedef struct
{
  volatile uint32_t CCR;
  volatile uint32_t CNDTR;
  volatile uint32_t CPAR;
  volatile uint32_t CM0AR;
  volatile uint32_t CM1AR;
} BDMA_Channel_TypeDef;

typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t IFCR;
} BDMA_TypeDef;

typedef struct
{
  volatile uint32_t CCR;
}DMAMUX_Channel_TypeDef;

typedef struct
{
  volatile uint32_t CSR;
  volatile uint32_t CFR;
}DMAMUX_ChannelStatus_TypeDef;

typedef struct
{
  volatile uint32_t RGCR;
}DMAMUX_RequestGen_TypeDef;

typedef struct
{
  volatile uint32_t RGSR;
  volatile uint32_t RGCFR;
}DMAMUX_RequestGenStatus_TypeDef;




typedef struct
{
  volatile uint32_t GISR0;
}MDMA_TypeDef;

typedef struct
{
  volatile uint32_t CISR;
  volatile uint32_t CIFCR;
  volatile uint32_t CESR;
  volatile uint32_t CCR;
  volatile uint32_t CTCR;
  volatile uint32_t CBNDTR;
  volatile uint32_t CSAR;
  volatile uint32_t CDAR;
  volatile uint32_t CBRUR;
  volatile uint32_t CLAR;
  volatile uint32_t CTBR;
  uint32_t RESERVED0;
  volatile uint32_t CMAR;
  volatile uint32_t CMDR;
}MDMA_Channel_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t ISR;
  volatile uint32_t IFCR;
  volatile uint32_t FGMAR;
  volatile uint32_t FGOR;
  volatile uint32_t BGMAR;
  volatile uint32_t BGOR;
  volatile uint32_t FGPFCCR;
  volatile uint32_t FGCOLR;
  volatile uint32_t BGPFCCR;
  volatile uint32_t BGCOLR;
  volatile uint32_t FGCMAR;
  volatile uint32_t BGCMAR;
  volatile uint32_t OPFCCR;
  volatile uint32_t OCOLR;
  volatile uint32_t OMAR;
  volatile uint32_t OOR;
  volatile uint32_t NLR;
  volatile uint32_t LWR;
  volatile uint32_t AMTCR;
  uint32_t RESERVED[236];
  volatile uint32_t FGCLUT[256];
  volatile uint32_t BGCLUT[256];
} DMA2D_TypeDef;





typedef struct
{
  volatile uint32_t MACCR;
  volatile uint32_t MACECR;
  volatile uint32_t MACPFR;
  volatile uint32_t MACWTR;
  volatile uint32_t MACHT0R;
  volatile uint32_t MACHT1R;
  uint32_t RESERVED1[14];
  volatile uint32_t MACVTR;
  uint32_t RESERVED2;
  volatile uint32_t MACVHTR;
  uint32_t RESERVED3;
  volatile uint32_t MACVIR;
  volatile uint32_t MACIVIR;
  uint32_t RESERVED4[2];
  volatile uint32_t MACTFCR;
  uint32_t RESERVED5[7];
  volatile uint32_t MACRFCR;
  uint32_t RESERVED6[7];
  volatile uint32_t MACISR;
  volatile uint32_t MACIER;
  volatile uint32_t MACRXTXSR;
  uint32_t RESERVED7;
  volatile uint32_t MACPCSR;
  volatile uint32_t MACRWKPFR;
  uint32_t RESERVED8[2];
  volatile uint32_t MACLCSR;
  volatile uint32_t MACLTCR;
  volatile uint32_t MACLETR;
  volatile uint32_t MAC1USTCR;
  uint32_t RESERVED9[12];
  volatile uint32_t MACVR;
  volatile uint32_t MACDR;
  uint32_t RESERVED10;
  volatile uint32_t MACHWF0R;
  volatile uint32_t MACHWF1R;
  volatile uint32_t MACHWF2R;
  uint32_t RESERVED11[54];
  volatile uint32_t MACMDIOAR;
  volatile uint32_t MACMDIODR;
  uint32_t RESERVED12[2];
  volatile uint32_t MACARPAR;
  uint32_t RESERVED13[59];
  volatile uint32_t MACA0HR;
  volatile uint32_t MACA0LR;
  volatile uint32_t MACA1HR;
  volatile uint32_t MACA1LR;
  volatile uint32_t MACA2HR;
  volatile uint32_t MACA2LR;
  volatile uint32_t MACA3HR;
  volatile uint32_t MACA3LR;
  uint32_t RESERVED14[248];
  volatile uint32_t MMCCR;
  volatile uint32_t MMCRIR;
  volatile uint32_t MMCTIR;
  volatile uint32_t MMCRIMR;
  volatile uint32_t MMCTIMR;
  uint32_t RESERVED15[14];
  volatile uint32_t MMCTSCGPR;
  volatile uint32_t MMCTMCGPR;
  uint32_t RESERVED16[5];
  volatile uint32_t MMCTPCGR;
  uint32_t RESERVED17[10];
  volatile uint32_t MMCRCRCEPR;
  volatile uint32_t MMCRAEPR;
  uint32_t RESERVED18[10];
  volatile uint32_t MMCRUPGR;
  uint32_t RESERVED19[9];
  volatile uint32_t MMCTLPIMSTR;
  volatile uint32_t MMCTLPITCR;
  volatile uint32_t MMCRLPIMSTR;
  volatile uint32_t MMCRLPITCR;
  uint32_t RESERVED20[65];
  volatile uint32_t MACL3L4C0R;
  volatile uint32_t MACL4A0R;
  uint32_t RESERVED21[2];
  volatile uint32_t MACL3A0R0R;
  volatile uint32_t MACL3A1R0R;
  volatile uint32_t MACL3A2R0R;
  volatile uint32_t MACL3A3R0R;
  uint32_t RESERVED22[4];
  volatile uint32_t MACL3L4C1R;
  volatile uint32_t MACL4A1R;
  uint32_t RESERVED23[2];
  volatile uint32_t MACL3A0R1R;
  volatile uint32_t MACL3A1R1R;
  volatile uint32_t MACL3A2R1R;
  volatile uint32_t MACL3A3R1R;
  uint32_t RESERVED24[108];
  volatile uint32_t MACTSCR;
  volatile uint32_t MACSSIR;
  volatile uint32_t MACSTSR;
  volatile uint32_t MACSTNR;
  volatile uint32_t MACSTSUR;
  volatile uint32_t MACSTNUR;
  volatile uint32_t MACTSAR;
  uint32_t RESERVED25;
  volatile uint32_t MACTSSR;
  uint32_t RESERVED26[3];
  volatile uint32_t MACTTSSNR;
  volatile uint32_t MACTTSSSR;
  uint32_t RESERVED27[2];
  volatile uint32_t MACACR;
  uint32_t RESERVED28;
  volatile uint32_t MACATSNR;
  volatile uint32_t MACATSSR;
  volatile uint32_t MACTSIACR;
  volatile uint32_t MACTSEACR;
  volatile uint32_t MACTSICNR;
  volatile uint32_t MACTSECNR;
  uint32_t RESERVED29[4];
  volatile uint32_t MACPPSCR;
  uint32_t RESERVED30[3];
  volatile uint32_t MACPPSTTSR;
  volatile uint32_t MACPPSTTNR;
  volatile uint32_t MACPPSIR;
  volatile uint32_t MACPPSWR;
  uint32_t RESERVED31[12];
  volatile uint32_t MACPOCR;
  volatile uint32_t MACSPI0R;
  volatile uint32_t MACSPI1R;
  volatile uint32_t MACSPI2R;
  volatile uint32_t MACLMIR;
  uint32_t RESERVED32[11];
  volatile uint32_t MTLOMR;
  uint32_t RESERVED33[7];
  volatile uint32_t MTLISR;
  uint32_t RESERVED34[55];
  volatile uint32_t MTLTQOMR;
  volatile uint32_t MTLTQUR;
  volatile uint32_t MTLTQDR;
  uint32_t RESERVED35[8];
  volatile uint32_t MTLQICSR;
  volatile uint32_t MTLRQOMR;
  volatile uint32_t MTLRQMPOCR;
  volatile uint32_t MTLRQDR;
  uint32_t RESERVED36[177];
  volatile uint32_t DMAMR;
  volatile uint32_t DMASBMR;
  volatile uint32_t DMAISR;
  volatile uint32_t DMADSR;
  uint32_t RESERVED37[60];
  volatile uint32_t DMACCR;
  volatile uint32_t DMACTCR;
  volatile uint32_t DMACRCR;
  uint32_t RESERVED38[2];
  volatile uint32_t DMACTDLAR;
  uint32_t RESERVED39;
  volatile uint32_t DMACRDLAR;
  volatile uint32_t DMACTDTPR;
  uint32_t RESERVED40;
  volatile uint32_t DMACRDTPR;
  volatile uint32_t DMACTDRLR;
  volatile uint32_t DMACRDRLR;
  volatile uint32_t DMACIER;
  volatile uint32_t DMACRIWTR;
volatile uint32_t DMACSFCSR;
  uint32_t RESERVED41;
  volatile uint32_t DMACCATDR;
  uint32_t RESERVED42;
  volatile uint32_t DMACCARDR;
  uint32_t RESERVED43;
  volatile uint32_t DMACCATBR;
  uint32_t RESERVED44;
  volatile uint32_t DMACCARBR;
  volatile uint32_t DMACSR;
uint32_t RESERVED45[2];
volatile uint32_t DMACMFCR;
}ETH_TypeDef;




typedef struct
{
volatile uint32_t RTSR1;
volatile uint32_t FTSR1;
volatile uint32_t SWIER1;
volatile uint32_t D3PMR1;
volatile uint32_t D3PCR1L;
volatile uint32_t D3PCR1H;
uint32_t RESERVED1[2];
volatile uint32_t RTSR2;
volatile uint32_t FTSR2;
volatile uint32_t SWIER2;
volatile uint32_t D3PMR2;
volatile uint32_t D3PCR2L;
volatile uint32_t D3PCR2H;
uint32_t RESERVED2[2];
volatile uint32_t RTSR3;
volatile uint32_t FTSR3;
volatile uint32_t SWIER3;
volatile uint32_t D3PMR3;
volatile uint32_t D3PCR3L;
volatile uint32_t D3PCR3H;
uint32_t RESERVED3[10];
volatile uint32_t IMR1;
volatile uint32_t EMR1;
volatile uint32_t PR1;
uint32_t RESERVED4;
volatile uint32_t IMR2;
volatile uint32_t EMR2;
volatile uint32_t PR2;
uint32_t RESERVED5;
volatile uint32_t IMR3;
volatile uint32_t EMR3;
volatile uint32_t PR3;
}EXTI_TypeDef;

typedef struct
{
volatile uint32_t IMR1;
volatile uint32_t EMR1;
volatile uint32_t PR1;
uint32_t RESERVED1;
volatile uint32_t IMR2;
volatile uint32_t EMR2;
volatile uint32_t PR2;
uint32_t RESERVED2;
volatile uint32_t IMR3;
volatile uint32_t EMR3;
volatile uint32_t PR3;
}EXTI_Core_TypeDef;






typedef struct
{
  volatile uint32_t ACR;
  volatile uint32_t KEYR1;
  volatile uint32_t OPTKEYR;
  volatile uint32_t CR1;
  volatile uint32_t SR1;
  volatile uint32_t CCR1;
  volatile uint32_t OPTCR;
  volatile uint32_t OPTSR_CUR;
  volatile uint32_t OPTSR_PRG;
  volatile uint32_t OPTCCR;
  volatile uint32_t PRAR_CUR1;
  volatile uint32_t PRAR_PRG1;
  volatile uint32_t SCAR_CUR1;
  volatile uint32_t SCAR_PRG1;
  volatile uint32_t WPSN_CUR1;
  volatile uint32_t WPSN_PRG1;
  volatile uint32_t BOOT_CUR;
  volatile uint32_t BOOT_PRG;
  uint32_t RESERVED0[2];
  volatile uint32_t CRCCR1;
  volatile uint32_t CRCSADD1;
  volatile uint32_t CRCEADD1;
  volatile uint32_t CRCDATA;
  volatile uint32_t ECC_FA1;
  uint32_t RESERVED1[40];
  volatile uint32_t KEYR2;
  uint32_t RESERVED2;
  volatile uint32_t CR2;
  volatile uint32_t SR2;
  volatile uint32_t CCR2;
  uint32_t RESERVED3[4];
  volatile uint32_t PRAR_CUR2;
  volatile uint32_t PRAR_PRG2;
  volatile uint32_t SCAR_CUR2;
  volatile uint32_t SCAR_PRG2;
  volatile uint32_t WPSN_CUR2;
  volatile uint32_t WPSN_PRG2;
  uint32_t RESERVED4[4];
  volatile uint32_t CRCCR2;
  volatile uint32_t CRCSADD2;
  volatile uint32_t CRCEADD2;
  volatile uint32_t CRCDATA2;
  volatile uint32_t ECC_FA2;
} FLASH_TypeDef;





typedef struct
{
  volatile uint32_t BTCR[8];
} FMC_Bank1_TypeDef;





typedef struct
{
  volatile uint32_t BWTR[7];
} FMC_Bank1E_TypeDef;





typedef struct
{
  volatile uint32_t PCR2;
  volatile uint32_t SR2;
  volatile uint32_t PMEM2;
  volatile uint32_t PATT2;
  uint32_t RESERVED0;
  volatile uint32_t ECCR2;
} FMC_Bank2_TypeDef;





typedef struct
{
  volatile uint32_t PCR;
  volatile uint32_t SR;
  volatile uint32_t PMEM;
  volatile uint32_t PATT;
  uint32_t RESERVED;
  volatile uint32_t ECCR;
} FMC_Bank3_TypeDef;






typedef struct
{
  volatile uint32_t SDCR[2];
  volatile uint32_t SDTR[2];
  volatile uint32_t SDCMR;
  volatile uint32_t SDRTR;
  volatile uint32_t SDSR;
} FMC_Bank5_6_TypeDef;





typedef struct
{
  volatile uint32_t MODER;
  volatile uint32_t OTYPER;
  volatile uint32_t OSPEEDR;
  volatile uint32_t PUPDR;
  volatile uint32_t IDR;
  volatile uint32_t ODR;
  volatile uint32_t BSRR;
  volatile uint32_t LCKR;
  volatile uint32_t AFR[2];
} GPIO_TypeDef;





typedef struct
{
  volatile uint32_t CSR;
  volatile uint32_t OTR;
  volatile uint32_t HSOTR;
} OPAMP_TypeDef;





typedef struct
{
 uint32_t RESERVED1;
 volatile uint32_t PMCR;
 volatile uint32_t EXTICR[4];
 volatile uint32_t CFGR;
 uint32_t RESERVED2;
 volatile uint32_t CCCSR;
 volatile uint32_t CCVR;
 volatile uint32_t CCCR;
 volatile uint32_t PWRCR;
  uint32_t RESERVED3[61];
  volatile uint32_t PKGR;
  uint32_t RESERVED4[118];
 volatile uint32_t UR0;
 volatile uint32_t UR1;
 volatile uint32_t UR2;
 volatile uint32_t UR3;
 volatile uint32_t UR4;
 volatile uint32_t UR5;
 volatile uint32_t UR6;
 volatile uint32_t UR7;
 volatile uint32_t UR8;
 volatile uint32_t UR9;
 volatile uint32_t UR10;
 volatile uint32_t UR11;
 volatile uint32_t UR12;
 volatile uint32_t UR13;
 volatile uint32_t UR14;
 volatile uint32_t UR15;
 volatile uint32_t UR16;
 volatile uint32_t UR17;

} SYSCFG_TypeDef;





typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t OAR1;
  volatile uint32_t OAR2;
  volatile uint32_t TIMINGR;
  volatile uint32_t TIMEOUTR;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t PECR;
  volatile uint32_t RXDR;
  volatile uint32_t TXDR;
} I2C_TypeDef;





typedef struct
{
  volatile uint32_t KR;
  volatile uint32_t PR;
  volatile uint32_t RLR;
  volatile uint32_t SR;
  volatile uint32_t WINR;
} IWDG_TypeDef;





typedef struct
{
  volatile uint32_t CONFR0;
  volatile uint32_t CONFR1;
  volatile uint32_t CONFR2;
  volatile uint32_t CONFR3;
  volatile uint32_t CONFR4;
  volatile uint32_t CONFR5;
  volatile uint32_t CONFR6;
  volatile uint32_t CONFR7;
  uint32_t Reserved20[4];
  volatile uint32_t CR;
  volatile uint32_t SR;
  volatile uint32_t CFR;
  uint32_t Reserved3c;
  volatile uint32_t DIR;
  volatile uint32_t DOR;
  uint32_t Reserved48[2];
  volatile uint32_t QMEM0[16];
  volatile uint32_t QMEM1[16];
  volatile uint32_t QMEM2[16];
  volatile uint32_t QMEM3[16];
  volatile uint32_t HUFFMIN[16];
  volatile uint32_t HUFFBASE[32];
  volatile uint32_t HUFFSYMB[84];
  volatile uint32_t DHTMEM[103];
  uint32_t Reserved4FC;
  volatile uint32_t HUFFENC_AC0[88];
  volatile uint32_t HUFFENC_AC1[88];
  volatile uint32_t HUFFENC_DC0[8];
  volatile uint32_t HUFFENC_DC1[8];

} JPEG_TypeDef;





typedef struct
{
  uint32_t RESERVED0[2];
  volatile uint32_t SSCR;
  volatile uint32_t BPCR;
  volatile uint32_t AWCR;
  volatile uint32_t TWCR;
  volatile uint32_t GCR;
  uint32_t RESERVED1[2];
  volatile uint32_t SRCR;
  uint32_t RESERVED2[1];
  volatile uint32_t BCCR;
  uint32_t RESERVED3[1];
  volatile uint32_t IER;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t LIPCR;
  volatile uint32_t CPSR;
  volatile uint32_t CDSR;
} LTDC_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t WHPCR;
  volatile uint32_t WVPCR;
  volatile uint32_t CKCR;
  volatile uint32_t PFCR;
  volatile uint32_t CACR;
  volatile uint32_t DCCR;
  volatile uint32_t BFCR;
  uint32_t RESERVED0[2];
  volatile uint32_t CFBAR;
  volatile uint32_t CFBLR;
  volatile uint32_t CFBLNR;
  uint32_t RESERVED1[3];
  volatile uint32_t CLUTWR;

} LTDC_Layer_TypeDef;





typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CSR1;
  volatile uint32_t CR2;
  volatile uint32_t CR3;
  volatile uint32_t CPUCR;
       uint32_t RESERVED0;
  volatile uint32_t D3CR;
       uint32_t RESERVED1;
  volatile uint32_t WKUPCR;
  volatile uint32_t WKUPFR;
  volatile uint32_t WKUPEPR;
} PWR_TypeDef;





typedef struct
{
 volatile uint32_t CR;
 volatile uint32_t HSICFGR;
 volatile uint32_t CRRCR;
 volatile uint32_t CSICFGR;
 volatile uint32_t CFGR;
 uint32_t RESERVED1;
 volatile uint32_t D1CFGR;
 volatile uint32_t D2CFGR;
 volatile uint32_t D3CFGR;
 uint32_t RESERVED2;
 volatile uint32_t PLLCKSELR;
 volatile uint32_t PLLCFGR;
 volatile uint32_t PLL1DIVR;
 volatile uint32_t PLL1FRACR;
 volatile uint32_t PLL2DIVR;
 volatile uint32_t PLL2FRACR;
 volatile uint32_t PLL3DIVR;
 volatile uint32_t PLL3FRACR;
 uint32_t RESERVED3;
 volatile uint32_t D1CCIPR;
 volatile uint32_t D2CCIP1R;
 volatile uint32_t D2CCIP2R;
 volatile uint32_t D3CCIPR;
 uint32_t RESERVED4;
 volatile uint32_t CIER;
 volatile uint32_t CIFR;
 volatile uint32_t CICR;
 uint32_t RESERVED5;
 volatile uint32_t BDCR;
 volatile uint32_t CSR;
 uint32_t RESERVED6;
 volatile uint32_t AHB3RSTR;
 volatile uint32_t AHB1RSTR;
 volatile uint32_t AHB2RSTR;
 volatile uint32_t AHB4RSTR;
 volatile uint32_t APB3RSTR;
 volatile uint32_t APB1LRSTR;
 volatile uint32_t APB1HRSTR;
 volatile uint32_t APB2RSTR;
 volatile uint32_t APB4RSTR;
 volatile uint32_t GCR;
 uint32_t RESERVED8;
 volatile uint32_t D3AMR;
 uint32_t RESERVED11[9];
 volatile uint32_t RSR;
 volatile uint32_t AHB3ENR;
 volatile uint32_t AHB1ENR;
 volatile uint32_t AHB2ENR;
 volatile uint32_t AHB4ENR;
 volatile uint32_t APB3ENR;
 volatile uint32_t APB1LENR;
 volatile uint32_t APB1HENR;
 volatile uint32_t APB2ENR;
 volatile uint32_t APB4ENR;
 uint32_t RESERVED12;
 volatile uint32_t AHB3LPENR;
 volatile uint32_t AHB1LPENR;
 volatile uint32_t AHB2LPENR;
 volatile uint32_t AHB4LPENR;
 volatile uint32_t APB3LPENR;
 volatile uint32_t APB1LLPENR;
 volatile uint32_t APB1HLPENR;
 volatile uint32_t APB2LPENR;
 volatile uint32_t APB4LPENR;
 uint32_t RESERVED13[4];

} RCC_TypeDef;





typedef struct
{
  volatile uint32_t TR;
  volatile uint32_t DR;
  volatile uint32_t CR;
  volatile uint32_t ISR;
  volatile uint32_t PRER;
  volatile uint32_t WUTR;
       uint32_t RESERVED;
  volatile uint32_t ALRMAR;
  volatile uint32_t ALRMBR;
  volatile uint32_t WPR;
  volatile uint32_t SSR;
  volatile uint32_t SHIFTR;
  volatile uint32_t TSTR;
  volatile uint32_t TSDR;
  volatile uint32_t TSSSR;
  volatile uint32_t CALR;
  volatile uint32_t TAMPCR;
  volatile uint32_t ALRMASSR;
  volatile uint32_t ALRMBSSR;
  volatile uint32_t OR;
  volatile uint32_t BKP0R;
  volatile uint32_t BKP1R;
  volatile uint32_t BKP2R;
  volatile uint32_t BKP3R;
  volatile uint32_t BKP4R;
  volatile uint32_t BKP5R;
  volatile uint32_t BKP6R;
  volatile uint32_t BKP7R;
  volatile uint32_t BKP8R;
  volatile uint32_t BKP9R;
  volatile uint32_t BKP10R;
  volatile uint32_t BKP11R;
  volatile uint32_t BKP12R;
  volatile uint32_t BKP13R;
  volatile uint32_t BKP14R;
  volatile uint32_t BKP15R;
  volatile uint32_t BKP16R;
  volatile uint32_t BKP17R;
  volatile uint32_t BKP18R;
  volatile uint32_t BKP19R;
  volatile uint32_t BKP20R;
  volatile uint32_t BKP21R;
  volatile uint32_t BKP22R;
  volatile uint32_t BKP23R;
  volatile uint32_t BKP24R;
  volatile uint32_t BKP25R;
  volatile uint32_t BKP26R;
  volatile uint32_t BKP27R;
  volatile uint32_t BKP28R;
  volatile uint32_t BKP29R;
  volatile uint32_t BKP30R;
  volatile uint32_t BKP31R;
} RTC_TypeDef;





typedef struct
{
  volatile uint32_t GCR;
  uint32_t RESERVED0[16];
  volatile uint32_t PDMCR;
  volatile uint32_t PDMDLY;
} SAI_TypeDef;

typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t FRCR;
  volatile uint32_t SLOTR;
  volatile uint32_t IMR;
  volatile uint32_t SR;
  volatile uint32_t CLRFR;
  volatile uint32_t DR;
} SAI_Block_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t IMR;
  volatile uint32_t SR;
  volatile uint32_t IFCR;
  volatile uint32_t DR;
  volatile uint32_t CSR;
  volatile uint32_t DIR;
  uint32_t RESERVED2;
} SPDIFRX_TypeDef;






typedef struct
{
  volatile uint32_t POWER;
  volatile uint32_t CLKCR;
  volatile uint32_t ARG;
  volatile uint32_t CMD;
  volatile const uint32_t RESPCMD;
  volatile const uint32_t RESP1;
  volatile const uint32_t RESP2;
  volatile const uint32_t RESP3;
  volatile const uint32_t RESP4;
  volatile uint32_t DTIMER;
  volatile uint32_t DLEN;
  volatile uint32_t DCTRL;
  volatile const uint32_t DCOUNT;
  volatile const uint32_t STA;
  volatile uint32_t ICR;
  volatile uint32_t MASK;
  volatile uint32_t ACKTIME;
  uint32_t RESERVED0[3];
  volatile uint32_t IDMACTRL;
  volatile uint32_t IDMABSIZE;
  volatile uint32_t IDMABASE0;
  volatile uint32_t IDMABASE1;
  uint32_t RESERVED1[8];
  volatile uint32_t FIFO;
  uint32_t RESERVED2[222];
  volatile uint32_t IPVR;
} SDMMC_TypeDef;






typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CFGR;
} DLYB_TypeDef;





typedef struct
{
  volatile uint32_t R[32];
  volatile uint32_t RLR[32];
  volatile uint32_t C1IER;
  volatile uint32_t C1ICR;
  volatile uint32_t C1ISR;
  volatile uint32_t C1MISR;
  uint32_t Reserved[12];
  volatile uint32_t CR;
  volatile uint32_t KEYR;

} HSEM_TypeDef;

typedef struct
{
  volatile uint32_t IER;
  volatile uint32_t ICR;
  volatile uint32_t ISR;
  volatile uint32_t MISR;
} HSEM_Common_TypeDef;





typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t CFG1;
  volatile uint32_t CFG2;
  volatile uint32_t IER;
  volatile uint32_t SR;
  volatile uint32_t IFCR;
  uint32_t RESERVED0;
  volatile uint32_t TXDR;
  uint32_t RESERVED1[3];
  volatile uint32_t RXDR;
  uint32_t RESERVED2[3];
  volatile uint32_t CRCPOLY;
  volatile uint32_t TXCRC;
  volatile uint32_t RXCRC;
  volatile uint32_t UDRDR;
  volatile uint32_t I2SCFGR;

} SPI_TypeDef;




typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t DCR;
  volatile uint32_t SR;
  volatile uint32_t FCR;
  volatile uint32_t DLR;
  volatile uint32_t CCR;
  volatile uint32_t AR;
  volatile uint32_t ABR;
  volatile uint32_t DR;
  volatile uint32_t PSMKR;
  volatile uint32_t PSMAR;
  volatile uint32_t PIR;
  volatile uint32_t LPTR;
} QUADSPI_TypeDef;





typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t SMCR;
  volatile uint32_t DIER;
  volatile uint32_t SR;
  volatile uint32_t EGR;
  volatile uint32_t CCMR1;
  volatile uint32_t CCMR2;
  volatile uint32_t CCER;
  volatile uint32_t CNT;
  volatile uint32_t PSC;
  volatile uint32_t ARR;
  volatile uint32_t RCR;
  volatile uint32_t CCR1;
  volatile uint32_t CCR2;
  volatile uint32_t CCR3;
  volatile uint32_t CCR4;
  volatile uint32_t BDTR;
  volatile uint32_t DCR;
  volatile uint32_t DMAR;
  uint32_t RESERVED1;
  volatile uint32_t CCMR3;
  volatile uint32_t CCR5;
  volatile uint32_t CCR6;
  volatile uint32_t AF1;
  volatile uint32_t AF2;
  volatile uint32_t TISEL;
} TIM_TypeDef;




typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t IER;
  volatile uint32_t CFGR;
  volatile uint32_t CR;
  volatile uint32_t CMP;
  volatile uint32_t ARR;
  volatile uint32_t CNT;
  uint32_t RESERVED1;
  volatile uint32_t CFGR2;
} LPTIM_TypeDef;




typedef struct
{
  volatile uint32_t SR;
  volatile uint32_t ICFR;
  volatile uint32_t OR;
} COMPOPT_TypeDef;

typedef struct
{
  volatile uint32_t CFGR;
} COMP_TypeDef;

typedef struct
{
  volatile uint32_t CFGR;
} COMP_Common_TypeDef;




typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t CR3;
  volatile uint32_t BRR;
  volatile uint32_t GTPR;
  volatile uint32_t RTOR;
  volatile uint32_t RQR;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t RDR;
  volatile uint32_t TDR;
  volatile uint32_t PRESC;
} USART_TypeDef;




typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t BRR;
    uint32_t RESERVED1;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t IER;
  volatile uint32_t RFL;
  volatile uint32_t TDR;
  volatile uint32_t RDR;
  volatile uint32_t OR;
} SWPMI_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CFR;
  volatile uint32_t SR;
} WWDG_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SR;
  volatile uint32_t FAR;
  volatile uint32_t FDRL;
  volatile uint32_t FDRH;
  volatile uint32_t FECR;
} RAMECC_MonitorTypeDef;

typedef struct
{
  volatile uint32_t IER;
} RAMECC_TypeDef;
# 1657 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h750xx.h"
typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SR;
  volatile uint32_t DIN;
  volatile uint32_t DOUT;
  volatile uint32_t DMACR;
  volatile uint32_t IMSCR;
  volatile uint32_t RISR;
  volatile uint32_t MISR;
  volatile uint32_t K0LR;
  volatile uint32_t K0RR;
  volatile uint32_t K1LR;
  volatile uint32_t K1RR;
  volatile uint32_t K2LR;
  volatile uint32_t K2RR;
  volatile uint32_t K3LR;
  volatile uint32_t K3RR;
  volatile uint32_t IV0LR;
  volatile uint32_t IV0RR;
  volatile uint32_t IV1LR;
  volatile uint32_t IV1RR;
  volatile uint32_t CSGCMCCM0R;
  volatile uint32_t CSGCMCCM1R;
  volatile uint32_t CSGCMCCM2R;
  volatile uint32_t CSGCMCCM3R;
  volatile uint32_t CSGCMCCM4R;
  volatile uint32_t CSGCMCCM5R;
  volatile uint32_t CSGCMCCM6R;
  volatile uint32_t CSGCMCCM7R;
  volatile uint32_t CSGCM0R;
  volatile uint32_t CSGCM1R;
  volatile uint32_t CSGCM2R;
  volatile uint32_t CSGCM3R;
  volatile uint32_t CSGCM4R;
  volatile uint32_t CSGCM5R;
  volatile uint32_t CSGCM6R;
  volatile uint32_t CSGCM7R;
} CRYP_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t DIN;
  volatile uint32_t STR;
  volatile uint32_t HR[5];
  volatile uint32_t IMR;
  volatile uint32_t SR;
       uint32_t RESERVED[52];
  volatile uint32_t CSR[54];
} HASH_TypeDef;





typedef struct
{
  volatile uint32_t HR[8];
} HASH_DIGEST_TypeDef;






typedef struct
{
  volatile uint32_t MCR;
  volatile uint32_t MISR;
  volatile uint32_t MICR;
  volatile uint32_t MDIER;
  volatile uint32_t MCNTR;
  volatile uint32_t MPER;
  volatile uint32_t MREP;
  volatile uint32_t MCMP1R;
  uint32_t RESERVED0;
  volatile uint32_t MCMP2R;
  volatile uint32_t MCMP3R;
  volatile uint32_t MCMP4R;
  uint32_t RESERVED1[20];
}HRTIM_Master_TypeDef;


typedef struct
{
  volatile uint32_t TIMxCR;
  volatile uint32_t TIMxISR;
  volatile uint32_t TIMxICR;
  volatile uint32_t TIMxDIER;
  volatile uint32_t CNTxR;
  volatile uint32_t PERxR;
  volatile uint32_t REPxR;
  volatile uint32_t CMP1xR;
  volatile uint32_t CMP1CxR;
  volatile uint32_t CMP2xR;
  volatile uint32_t CMP3xR;
  volatile uint32_t CMP4xR;
  volatile uint32_t CPT1xR;
  volatile uint32_t CPT2xR;
  volatile uint32_t DTxR;
  volatile uint32_t SETx1R;
  volatile uint32_t RSTx1R;
  volatile uint32_t SETx2R;
  volatile uint32_t RSTx2R;
  volatile uint32_t EEFxR1;
  volatile uint32_t EEFxR2;
  volatile uint32_t RSTxR;
  volatile uint32_t CHPxR;
  volatile uint32_t CPT1xCR;
  volatile uint32_t CPT2xCR;
  volatile uint32_t OUTxR;
  volatile uint32_t FLTxR;
  uint32_t RESERVED0[5];
}HRTIM_Timerx_TypeDef;


typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t IER;
  volatile uint32_t OENR;
  volatile uint32_t ODISR;
  volatile uint32_t ODSR;
  volatile uint32_t BMCR;
  volatile uint32_t BMTRGR;
  volatile uint32_t BMCMPR;
  volatile uint32_t BMPER;
  volatile uint32_t EECR1;
  volatile uint32_t EECR2;
  volatile uint32_t EECR3;
  volatile uint32_t ADC1R;
  volatile uint32_t ADC2R;
  volatile uint32_t ADC3R;
  volatile uint32_t ADC4R;
  volatile uint32_t RESERVED0;
  volatile uint32_t FLTINR1;
  volatile uint32_t FLTINR2;
  volatile uint32_t BDMUPR;
  volatile uint32_t BDTAUPR;
  volatile uint32_t BDTBUPR;
  volatile uint32_t BDTCUPR;
  volatile uint32_t BDTDUPR;
  volatile uint32_t BDTEUPR;
  volatile uint32_t BDMADR;
}HRTIM_Common_TypeDef;


typedef struct {
  HRTIM_Master_TypeDef sMasterRegs;
  HRTIM_Timerx_TypeDef sTimerxRegs[5];
  uint32_t RESERVED0[32];
  HRTIM_Common_TypeDef sCommonRegs;
}HRTIM_TypeDef;




typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SR;
  volatile uint32_t DR;
} RNG_TypeDef;





typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t WRFR;
  volatile uint32_t CWRFR;
  volatile uint32_t RDFR;
  volatile uint32_t CRDFR;
  volatile uint32_t SR;
  volatile uint32_t CLRFR;
  uint32_t RESERVED[57];
  volatile uint32_t DINR0;
  volatile uint32_t DINR1;
  volatile uint32_t DINR2;
  volatile uint32_t DINR3;
  volatile uint32_t DINR4;
  volatile uint32_t DINR5;
  volatile uint32_t DINR6;
  volatile uint32_t DINR7;
  volatile uint32_t DINR8;
  volatile uint32_t DINR9;
  volatile uint32_t DINR10;
  volatile uint32_t DINR11;
  volatile uint32_t DINR12;
  volatile uint32_t DINR13;
  volatile uint32_t DINR14;
  volatile uint32_t DINR15;
  volatile uint32_t DINR16;
  volatile uint32_t DINR17;
  volatile uint32_t DINR18;
  volatile uint32_t DINR19;
  volatile uint32_t DINR20;
  volatile uint32_t DINR21;
  volatile uint32_t DINR22;
  volatile uint32_t DINR23;
  volatile uint32_t DINR24;
  volatile uint32_t DINR25;
  volatile uint32_t DINR26;
  volatile uint32_t DINR27;
  volatile uint32_t DINR28;
  volatile uint32_t DINR29;
  volatile uint32_t DINR30;
  volatile uint32_t DINR31;
  volatile uint32_t DOUTR0;
  volatile uint32_t DOUTR1;
  volatile uint32_t DOUTR2;
  volatile uint32_t DOUTR3;
  volatile uint32_t DOUTR4;
  volatile uint32_t DOUTR5;
  volatile uint32_t DOUTR6;
  volatile uint32_t DOUTR7;
  volatile uint32_t DOUTR8;
  volatile uint32_t DOUTR9;
  volatile uint32_t DOUTR10;
  volatile uint32_t DOUTR11;
  volatile uint32_t DOUTR12;
  volatile uint32_t DOUTR13;
  volatile uint32_t DOUTR14;
  volatile uint32_t DOUTR15;
  volatile uint32_t DOUTR16;
  volatile uint32_t DOUTR17;
  volatile uint32_t DOUTR18;
  volatile uint32_t DOUTR19;
  volatile uint32_t DOUTR20;
  volatile uint32_t DOUTR21;
  volatile uint32_t DOUTR22;
  volatile uint32_t DOUTR23;
  volatile uint32_t DOUTR24;
  volatile uint32_t DOUTR25;
  volatile uint32_t DOUTR26;
  volatile uint32_t DOUTR27;
  volatile uint32_t DOUTR28;
  volatile uint32_t DOUTR29;
  volatile uint32_t DOUTR30;
  volatile uint32_t DOUTR31;
} MDIOS_TypeDef;





typedef struct
{
 volatile uint32_t GOTGCTL;
  volatile uint32_t GOTGINT;
  volatile uint32_t GAHBCFG;
  volatile uint32_t GUSBCFG;
  volatile uint32_t GRSTCTL;
  volatile uint32_t GINTSTS;
  volatile uint32_t GINTMSK;
  volatile uint32_t GRXSTSR;
  volatile uint32_t GRXSTSP;
  volatile uint32_t GRXFSIZ;
  volatile uint32_t DIEPTXF0_HNPTXFSIZ;
  volatile uint32_t HNPTXSTS;
  uint32_t Reserved30[2];
  volatile uint32_t GCCFG;
  volatile uint32_t CID;
  volatile uint32_t GSNPSID;
  volatile uint32_t GHWCFG1;
  volatile uint32_t GHWCFG2;
  volatile uint32_t GHWCFG3;
  uint32_t Reserved6;
  volatile uint32_t GLPMCFG;
  volatile uint32_t GPWRDN;
  volatile uint32_t GDFIFOCFG;
   volatile uint32_t GADPCTL;
    uint32_t Reserved43[39];
  volatile uint32_t HPTXFSIZ;
  volatile uint32_t DIEPTXF[0x0F];
} USB_OTG_GlobalTypeDef;





typedef struct
{
  volatile uint32_t DCFG;
  volatile uint32_t DCTL;
  volatile uint32_t DSTS;
  uint32_t Reserved0C;
  volatile uint32_t DIEPMSK;
  volatile uint32_t DOEPMSK;
  volatile uint32_t DAINT;
  volatile uint32_t DAINTMSK;
  uint32_t Reserved20;
  uint32_t Reserved9;
  volatile uint32_t DVBUSDIS;
  volatile uint32_t DVBUSPULSE;
  volatile uint32_t DTHRCTL;
  volatile uint32_t DIEPEMPMSK;
  volatile uint32_t DEACHINT;
  volatile uint32_t DEACHMSK;
  uint32_t Reserved40;
  volatile uint32_t DINEP1MSK;
  uint32_t Reserved44[15];
  volatile uint32_t DOUTEP1MSK;
} USB_OTG_DeviceTypeDef;





typedef struct
{
  volatile uint32_t DIEPCTL;
  uint32_t Reserved04;
  volatile uint32_t DIEPINT;
  uint32_t Reserved0C;
  volatile uint32_t DIEPTSIZ;
  volatile uint32_t DIEPDMA;
  volatile uint32_t DTXFSTS;
  uint32_t Reserved18;
} USB_OTG_INEndpointTypeDef;





typedef struct
{
  volatile uint32_t DOEPCTL;
  uint32_t Reserved04;
  volatile uint32_t DOEPINT;
  uint32_t Reserved0C;
  volatile uint32_t DOEPTSIZ;
  volatile uint32_t DOEPDMA;
  uint32_t Reserved18[2];
} USB_OTG_OUTEndpointTypeDef;





typedef struct
{
  volatile uint32_t HCFG;
  volatile uint32_t HFIR;
  volatile uint32_t HFNUM;
  uint32_t Reserved40C;
  volatile uint32_t HPTXSTS;
  volatile uint32_t HAINT;
  volatile uint32_t HAINTMSK;
} USB_OTG_HostTypeDef;




typedef struct
{
  volatile uint32_t HCCHAR;
  volatile uint32_t HCSPLT;
  volatile uint32_t HCINT;
  volatile uint32_t HCINTMSK;
  volatile uint32_t HCTSIZ;
  volatile uint32_t HCDMA;
  uint32_t Reserved[2];
} USB_OTG_HostChannelTypeDef;
# 129 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h" 2
# 174 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
typedef enum
{
  RESET = 0,
  SET = !RESET
} FlagStatus, ITStatus;

typedef enum
{
  DISABLE = 0,
  ENABLE = !DISABLE
} FunctionalState;


typedef enum
{
  SUCCESS = 0,
  ERROR = !SUCCESS
} ErrorStatus;
# 223 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h" 1
# 30 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
# 1 "./src/main/startup/stm32h7xx_hal_conf.h" 1
# 205 "./src/main/startup/stm32h7xx_hal_conf.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc.h" 1
# 29 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h" 1
# 30 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
# 1 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h" 1
# 31 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h" 2
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/Legacy/stm32_hal_legacy.h" 1
# 32 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h" 2
# 1 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h" 1 3 4
# 33 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h" 2
# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\math.h" 1 3






# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\ieeefp.h" 1 3
# 8 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\math.h" 2 3



# 86 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\math.h" 3

# 86 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\math.h" 3
extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);






extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);




extern int finite (double);
extern int finitef (float);
extern int finitel (long double);
extern int isinff (float);
extern int isnanf (float);





extern int isinf (double);




extern int isnan (double);
# 150 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\math.h" 3
    typedef float float_t;
    typedef double double_t;
# 194 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\math.h" 3
extern int __isinff (float x);
extern int __isinfd (double x);
extern int __isnanf (float x);
extern int __isnand (double x);
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
extern int __signbitf (float x);
extern int __signbitd (double x);
# 290 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\math.h" 3
extern double infinity (void);
extern double nan (const char *);
extern double copysign (double, double);
extern double logb (double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern long long int llrint (double);
extern double round (double);
extern long int lround (double);
extern long long int llround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double lgamma (double);
extern double erf (double);
extern double erfc (double);
extern double log2 (double);





extern double hypot (double, double);






extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);




extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern long long int llrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern long long int llroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (const char *);
extern float copysignf (float, float);
extern float logbf (float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float lgammaf (float);
extern float erff (float);
extern float erfcf (float);
extern float log2f (float);
extern float hypotf (float, float);
# 422 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\math.h" 3
extern long double atanl (long double);
extern long double cosl (long double);
extern long double sinl (long double);
extern long double tanl (long double);
extern long double tanhl (long double);
extern long double frexpl (long double, int *);
extern long double modfl (long double, long double *);
extern long double ceill (long double);
extern long double fabsl (long double);
extern long double floorl (long double);
extern long double log1pl (long double);
extern long double expm1l (long double);




extern long double acosl (long double);
extern long double asinl (long double);
extern long double atan2l (long double, long double);
extern long double coshl (long double);
extern long double sinhl (long double);
extern long double expl (long double);
extern long double ldexpl (long double, int);
extern long double logl (long double);
extern long double log10l (long double);
extern long double powl (long double, long double);
extern long double sqrtl (long double);
extern long double fmodl (long double, long double);
extern long double hypotl (long double, long double);


extern long double copysignl (long double, long double);
extern long double nanl (const char *);
extern int ilogbl (long double);
extern long double asinhl (long double);
extern long double cbrtl (long double);
extern long double nextafterl (long double, long double);
extern float nexttowardf (float, long double);
extern double nexttoward (double, long double);
extern long double nexttowardl (long double, long double);
extern long double logbl (long double);
extern long double log2l (long double);
extern long double rintl (long double);
extern long double scalbnl (long double, int);
extern long double exp2l (long double);
extern long double scalblnl (long double, long);
extern long double tgammal (long double);
extern long double nearbyintl (long double);
extern long int lrintl (long double);
extern long long int llrintl (long double);
extern long double roundl (long double);
extern long lroundl (long double);
extern long long int llroundl (long double);
extern long double truncl (long double);
extern long double remquol (long double, long double, int *);
extern long double fdiml (long double, long double);
extern long double fmaxl (long double, long double);
extern long double fminl (long double, long double);
extern long double fmal (long double, long double, long double);

extern long double acoshl (long double);
extern long double atanhl (long double);
extern long double remainderl (long double, long double);
extern long double lgammal (long double);
extern long double erfl (long double);
extern long double erfcl (long double);
# 503 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\math.h" 3
extern double drem (double, double);
extern float dremf (float, float);



extern double gamma_r (double, int *);
extern double lgamma_r (double, int *);
extern float gammaf_r (float, int *);
extern float lgammaf_r (float, int *);



extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);



extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);




extern void sincos (double, double *, double *);
extern void sincosf (float, float *, float *);




extern double exp10 (double);


extern double pow10 (double);


extern float exp10f (float);


extern float pow10f (float);
# 565 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\math.h" 3
extern int *__signgam (void);
# 607 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\math.h" 3
enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_posix
};




extern enum __fdlibm_version __fdlib_version;









# 1 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\fastmath.h" 1 3
# 627 "c:\\dev\\9 2020-q2-update\\arm-none-eabi\\include\\math.h" 2 3
# 34 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h" 2







# 40 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
typedef enum
{
  HAL_OK = 0x00,
  HAL_ERROR = 0x01,
  HAL_BUSY = 0x02,
  HAL_TIMEOUT = 0x03
} HAL_StatusTypeDef;




typedef enum
{
  HAL_UNLOCKED = 0x00,
  HAL_LOCKED = 0x01
} HAL_LockTypeDef;
# 30 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc.h" 2
# 48 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc.h"
typedef struct
{
  uint32_t PLLState;


  uint32_t PLLSource;


  uint32_t PLLM;


  uint32_t PLLN;




  uint32_t PLLP;



  uint32_t PLLQ;


  uint32_t PLLR;

  uint32_t PLLRGE;

  uint32_t PLLVCOSEL;


  uint32_t PLLFRACN;


}RCC_PLLInitTypeDef;




typedef struct
{
  uint32_t OscillatorType;


  uint32_t HSEState;


  uint32_t LSEState;


  uint32_t HSIState;


  uint32_t HSICalibrationValue;



  uint32_t LSIState;


 uint32_t HSI48State;


  uint32_t CSIState;


  uint32_t CSICalibrationValue;



  RCC_PLLInitTypeDef PLL;

}RCC_OscInitTypeDef;




typedef struct
{
  uint32_t ClockType;


  uint32_t SYSCLKSource;


  uint32_t SYSCLKDivider;


  uint32_t AHBCLKDivider;


  uint32_t APB3CLKDivider;


  uint32_t APB1CLKDivider;

  uint32_t APB2CLKDivider;

  uint32_t APB4CLKDivider;

}RCC_ClkInitTypeDef;
# 7957 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc_ex.h" 1
# 47 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc_ex.h"
typedef struct
{

  uint32_t PLL2M;


  uint32_t PLL2N;




  uint32_t PLL2P;



  uint32_t PLL2Q;


  uint32_t PLL2R;

  uint32_t PLL2RGE;

  uint32_t PLL2VCOSEL;


  uint32_t PLL2FRACN;

}RCC_PLL2InitTypeDef;




typedef struct
{

  uint32_t PLL3M;


  uint32_t PLL3N;




  uint32_t PLL3P;



  uint32_t PLL3Q;


  uint32_t PLL3R;

  uint32_t PLL3RGE;

  uint32_t PLL3VCOSEL;


  uint32_t PLL3FRACN;

}RCC_PLL3InitTypeDef;




typedef struct
{
  uint32_t PLL1_P_Frequency;
  uint32_t PLL1_Q_Frequency;
  uint32_t PLL1_R_Frequency;
}PLL1_ClocksTypeDef;




typedef struct
{
  uint32_t PLL2_P_Frequency;
  uint32_t PLL2_Q_Frequency;
  uint32_t PLL2_R_Frequency;
}PLL2_ClocksTypeDef;




typedef struct
{
  uint32_t PLL3_P_Frequency;
  uint32_t PLL3_Q_Frequency;
  uint32_t PLL3_R_Frequency;
}PLL3_ClocksTypeDef;





typedef struct
{
  uint32_t PeriphClockSelection;


  RCC_PLL2InitTypeDef PLL2;


  RCC_PLL3InitTypeDef PLL3;


  uint32_t FmcClockSelection;



  uint32_t QspiClockSelection;
# 172 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc_ex.h"
  uint32_t SdmmcClockSelection;


  uint32_t CkperClockSelection;


  uint32_t Sai1ClockSelection;



  uint32_t Sai23ClockSelection;
# 196 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc_ex.h"
  uint32_t Spi123ClockSelection;


  uint32_t Spi45ClockSelection;


  uint32_t SpdifrxClockSelection;


  uint32_t Dfsdm1ClockSelection;
# 214 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc_ex.h"
  uint32_t FdcanClockSelection;



  uint32_t Swpmi1ClockSelection;


  uint32_t Usart234578ClockSelection;


  uint32_t Usart16ClockSelection;


   uint32_t RngClockSelection;






   uint32_t I2c123ClockSelection;



  uint32_t UsbClockSelection;


  uint32_t CecClockSelection;


  uint32_t Lptim1ClockSelection;


  uint32_t Lpuart1ClockSelection;


  uint32_t I2c4ClockSelection;


  uint32_t Lptim2ClockSelection;


  uint32_t Lptim345ClockSelection;


  uint32_t AdcClockSelection;


  uint32_t Sai4AClockSelection;


  uint32_t Sai4BClockSelection;



  uint32_t Spi6ClockSelection;


  uint32_t RTCClockSelection;



  uint32_t Hrtim1ClockSelection;



  uint32_t TIMPresSelection;

}RCC_PeriphCLKInitTypeDef;
# 295 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc_ex.h"
typedef struct
{
  uint32_t Prescaler;


  uint32_t Source;


  uint32_t Polarity;


  uint32_t ReloadValue;



  uint32_t ErrorLimitValue;


  uint32_t HSI48CalibrationValue;


}RCC_CRSInitTypeDef;




typedef struct
{
  uint32_t ReloadValue;


  uint32_t HSI48CalibrationValue;


  uint32_t FreqErrorCapture;



  uint32_t FreqErrorDirection;




}RCC_CRSSynchroInfoTypeDef;
# 3892 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc_ex.h"
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit);
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef *PeriphClkInit);
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk);
uint32_t HAL_RCCEx_GetD1PCLK1Freq(void);
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void);
uint32_t HAL_RCCEx_GetD1SysClockFreq(void);
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks);
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks);
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks);







void HAL_RCCEx_WakeUpStopCLKConfig(uint32_t WakeUpClk);
void HAL_RCCEx_KerWakeUpStopCLKConfig(uint32_t WakeUpClk);
void HAL_RCCEx_EnableLSECSS(void);
void HAL_RCCEx_DisableLSECSS(void);
void HAL_RCCEx_EnableLSECSS_IT(void);
void HAL_RCCEx_LSECSS_IRQHandler(void);
void HAL_RCCEx_LSECSS_Callback(void);




void HAL_RCCEx_WWDGxSysResetConfig(uint32_t RCC_WWDGx);
# 3930 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc_ex.h"
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit);
void HAL_RCCEx_CRSSoftwareSynchronizationGenerate(void);
void HAL_RCCEx_CRSGetSynchronizationInfo(RCC_CRSSynchroInfoTypeDef *pSynchroInfo);
uint32_t HAL_RCCEx_CRSWaitSynchronization(uint32_t Timeout);
void HAL_RCCEx_CRS_IRQHandler(void);
void HAL_RCCEx_CRS_SyncOkCallback(void);
void HAL_RCCEx_CRS_SyncWarnCallback(void);
void HAL_RCCEx_CRS_ExpectedSyncCallback(void);
void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error);
# 7958 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc.h" 2
# 7968 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc.h"
HAL_StatusTypeDef HAL_RCC_DeInit(void);
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct);
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t FLatency);
# 7980 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc.h"
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv);
void HAL_RCC_EnableCSS(void);
void HAL_RCC_DisableCSS(void);
uint32_t HAL_RCC_GetSysClockFreq(void);
uint32_t HAL_RCC_GetHCLKFreq(void);
uint32_t HAL_RCC_GetPCLK1Freq(void);
uint32_t HAL_RCC_GetPCLK2Freq(void);
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct);
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct, uint32_t *pFLatency);

void HAL_RCC_NMI_IRQHandler(void);

void HAL_RCC_CSSCallback(void);
# 206 "./src/main/startup/stm32h7xx_hal_conf.h" 2



# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h" 1
# 47 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
typedef struct
{
  uint32_t Pin;


  uint32_t Mode;


  uint32_t Pull;


  uint32_t Speed;


  uint32_t Alternate;

} GPIO_InitTypeDef;




typedef enum
{
  GPIO_PIN_RESET = 0U,
  GPIO_PIN_SET
} GPIO_PinState;
# 248 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio_ex.h" 1
# 249 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h" 2
# 259 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init);
void HAL_GPIO_DeInit(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin);
# 269 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_gpio.h"
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState);
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
# 210 "./src/main/startup/stm32h7xx_hal_conf.h" 2



# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h" 1
# 49 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
typedef struct
{
  uint32_t Request;


  uint32_t Direction;



  uint32_t PeriphInc;


  uint32_t MemInc;


  uint32_t PeriphDataAlignment;


  uint32_t MemDataAlignment;


  uint32_t Mode;




  uint32_t Priority;


  uint32_t FIFOMode;




  uint32_t FIFOThreshold;


  uint32_t MemBurst;





  uint32_t PeriphBurst;




}DMA_InitTypeDef;




typedef enum
{
  HAL_DMA_STATE_RESET = 0x00U,
  HAL_DMA_STATE_READY = 0x01U,
  HAL_DMA_STATE_BUSY = 0x02U,
  HAL_DMA_STATE_ERROR = 0x03U,
  HAL_DMA_STATE_ABORT = 0x04U,
}HAL_DMA_StateTypeDef;




typedef enum
{
  HAL_DMA_FULL_TRANSFER = 0x00U,
  HAL_DMA_HALF_TRANSFER = 0x01U,
}HAL_DMA_LevelCompleteTypeDef;




typedef enum
{
  HAL_DMA_XFER_CPLT_CB_ID = 0x00U,
  HAL_DMA_XFER_HALFCPLT_CB_ID = 0x01U,
  HAL_DMA_XFER_M1CPLT_CB_ID = 0x02U,
  HAL_DMA_XFER_M1HALFCPLT_CB_ID = 0x03U,
  HAL_DMA_XFER_ERROR_CB_ID = 0x04U,
  HAL_DMA_XFER_ABORT_CB_ID = 0x05U,
  HAL_DMA_XFER_ALL_CB_ID = 0x06U
}HAL_DMA_CallbackIDTypeDef;




typedef struct __DMA_HandleTypeDef
{
  void *Instance;

  DMA_InitTypeDef Init;

  HAL_LockTypeDef Lock;

  volatile HAL_DMA_StateTypeDef State;

  void *Parent;

  void (* XferCpltCallback)( struct __DMA_HandleTypeDef * hdma);

  void (* XferHalfCpltCallback)( struct __DMA_HandleTypeDef * hdma);

  void (* XferM1CpltCallback)( struct __DMA_HandleTypeDef * hdma);

  void (* XferM1HalfCpltCallback)( struct __DMA_HandleTypeDef * hdma);

  void (* XferErrorCallback)( struct __DMA_HandleTypeDef * hdma);

  void (* XferAbortCallback)( struct __DMA_HandleTypeDef * hdma);

 volatile uint32_t ErrorCode;

 uint32_t StreamBaseAddress;

 uint32_t StreamIndex;

 DMAMUX_Channel_TypeDef *DMAmuxChannel;

 DMAMUX_ChannelStatus_TypeDef *DMAmuxChannelStatus;

 uint32_t DMAmuxChannelStatusMask;


 DMAMUX_RequestGen_TypeDef *DMAmuxRequestGen;

 DMAMUX_RequestGenStatus_TypeDef *DMAmuxRequestGenStatus;

 uint32_t DMAmuxRequestGenStatusMask;

}DMA_HandleTypeDef;
# 1175 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma_ex.h" 1
# 48 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma_ex.h"
typedef enum
{
  MEMORY0 = 0x00U,
  MEMORY1 = 0x01U,

}HAL_DMA_MemoryTypeDef;




typedef struct
{
  uint32_t SyncSignalID;


  uint32_t SyncPolarity;


  FunctionalState SyncEnable;



  FunctionalState EventEnable;


  uint32_t RequestNumber;


}HAL_DMA_MuxSyncConfigTypeDef;





typedef struct
{
 uint32_t SignalID;


  uint32_t Polarity;


  uint32_t RequestNumber;


}HAL_DMA_MuxRequestGeneratorConfigTypeDef;
# 238 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma_ex.h"
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength);
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength);
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory);
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig);
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxRequestGenerator (DMA_HandleTypeDef *hdma, HAL_DMA_MuxRequestGeneratorConfigTypeDef *pRequestGeneratorConfig);
HAL_StatusTypeDef HAL_DMAEx_EnableMuxRequestGenerator (DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_DMAEx_DisableMuxRequestGenerator (DMA_HandleTypeDef *hdma);

void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma);
# 1176 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h" 2
# 1188 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma);
# 1198 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
HAL_StatusTypeDef HAL_DMA_Start (DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout);
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma);
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma));
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID);
# 1215 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma);
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma);
# 214 "./src/main/startup/stm32h7xx_hal_conf.h" 2
# 237 "./src/main/startup/stm32h7xx_hal_conf.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_cortex.h" 1
# 48 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_cortex.h"
typedef struct
{
  uint8_t Enable;

  uint8_t Number;

  uint32_t BaseAddress;
  uint8_t Size;

  uint8_t SubRegionDisable;

  uint8_t TypeExtField;

  uint8_t AccessPermission;

  uint8_t DisableExec;

  uint8_t IsShareable;

  uint8_t IsCacheable;

  uint8_t IsBufferable;

}MPU_Region_InitTypeDef;
# 294 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_cortex.h"
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup);
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority);
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn);
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn);
void HAL_NVIC_SystemReset(void);
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb);
# 309 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_cortex.h"
void HAL_MPU_Enable(uint32_t MPU_Control);
void HAL_MPU_Disable(void);
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init);

uint32_t HAL_NVIC_GetPriorityGrouping(void);
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority);
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn);
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn);
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn);
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn);
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource);
void HAL_SYSTICK_IRQHandler(void);
void HAL_SYSTICK_Callback(void);
uint32_t HAL_GetCurrentCPUID(void);
# 238 "./src/main/startup/stm32h7xx_hal_conf.h" 2



# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h" 1
# 32 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h" 1
# 443 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
typedef struct
{
  uint32_t CommonClock;







  uint32_t Multimode;




  uint32_t MultiDMATransfer;




  uint32_t MultiTwoSamplingDelay;




} LL_ADC_CommonInitTypeDef;
# 490 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
typedef struct
{
  uint32_t Resolution;




  uint32_t LeftBitShift;


  uint32_t LowPowerMode;




} LL_ADC_InitTypeDef;
# 526 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
typedef struct
{
  uint32_t TriggerSource;







  uint32_t SequencerLength;




  uint32_t SequencerDiscont;






  uint32_t ContinuousMode;





  uint32_t DataTransferMode;




  uint32_t Overrun;





} LL_ADC_REG_InitTypeDef;
# 586 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
typedef struct
{
  uint32_t TriggerSource;







  uint32_t SequencerLength;




  uint32_t SequencerDiscont;






  uint32_t TrigAuto;





} LL_ADC_INJ_InitTypeDef;
# 2586 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
  uint32_t data_reg_addr;

  if (Register == (0x00000000UL))
  {

    data_reg_addr = (uint32_t) & (ADCx->DR);
  }
  else
  {

    data_reg_addr = (uint32_t) & ((((((ADCx) == ((ADC_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x2000UL))) || ((ADCx) == ((ADC_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x2100UL)))) ? ( (((ADC_Common_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x2300UL))) ) : ( (((ADC_Common_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x6300UL))) ) ))->CDR);
  }

  return data_reg_addr;
}
# 2646 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
  (((ADCxy_COMMON->CCR)) = ((((((ADCxy_COMMON->CCR))) & (~((0x3UL << (16U)) | (0xFUL << (18U))))) | (CommonClock))));
}
# 2674 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(((ADCxy_COMMON->CCR) & ((0x3UL << (16U)) | (0xFUL << (18U)))));
}
# 2714 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
  (((ADCxy_COMMON->CCR)) = ((((((ADCxy_COMMON->CCR))) & (~((0x1UL << (22U)) | (0x1UL << (23U)) | (0x1UL << (24U))))) | (PathInternal))));
}
# 2736 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(((ADCxy_COMMON->CCR) & ((0x1UL << (22U)) | (0x1UL << (23U)) | (0x1UL << (24U)))));
}
# 2783 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetCalibrationOffsetFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff, uint32_t CalibrationFactor)
{





  (((ADCx->CALFACT)) = ((((((ADCx->CALFACT))) & (~(SingleDiff & ((0x7FFUL << (16U)) | (0x7FFUL << (0U)))))) | (CalibrationFactor << (((SingleDiff & (0x00010000UL)) >> ((16UL) - 4UL)) & ~(SingleDiff & (0x7FFUL << (0U))))))))

                                                                                                                                                                      ;

}
# 2814 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetCalibrationOffsetFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{







  return (uint32_t)(((ADCx->CALFACT) & ((SingleDiff & ((0x7FFUL << (16U)) | (0x7FFUL << (0U)))))) >> ((SingleDiff & (0x00010000UL)) >> ((16UL) - 4UL)));

}
# 2849 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetCalibrationLinearFactor(ADC_TypeDef *ADCx, uint32_t LinearityWord, uint32_t CalibrationFactor)
{
# 2863 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
  uint32_t timeout_cpu_cycles = (524400UL);
  (((ADCx->CALFACT2)) = ((((((ADCx->CALFACT2))) & (~((0x3FFFFFFFUL << (0U))))) | (CalibrationFactor))));
  (((ADCx->CR)) = ((((((ADCx->CR))) & (~((0x1UL << (16U))))) | (LinearityWord))));
  while ((((ADCx->CR) & (LinearityWord)) == 0UL) && (timeout_cpu_cycles > 0UL))
  {
    timeout_cpu_cycles--;
  }

}
# 2889 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetCalibrationLinearFactor(ADC_TypeDef *ADCx, uint32_t LinearityWord)
{
  uint32_t timeout_cpu_cycles = (524400UL);
  ((ADCx->CR) &= ~(LinearityWord));
  while ((((ADCx->CR) & (LinearityWord)) != 0UL) && (timeout_cpu_cycles > 0UL))
  {
    timeout_cpu_cycles--;
  }



  return (uint32_t)(((ADCx->CALFACT2) & ((0x3FFFFFFFUL << (0U)))));

}
# 2921 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
# 2951 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
  if ((((DBGMCU_TypeDef *) (0x5C001000UL))->IDCODE & 0x30000000UL) == 0x10000000UL)
  {
    (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x7UL << (2U))))) | (Resolution))));
  }
  else
  {
    if (((0x4UL << (2U)) ) == Resolution)
    {
      (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x7UL << (2U))))) | (Resolution | 0x0000000CUL))));
    }
    else
    {
      (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x7UL << (2U))))) | (Resolution))));
    }
  }


}
# 2984 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
# 3008 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
  if ((((DBGMCU_TypeDef *) (0x5C001000UL))->IDCODE & 0x30000000UL) == 0x10000000UL)
  {
    return (uint32_t)(((ADCx->CFGR) & ((0x7UL << (2U)))));
  }
  else
  {
    if ((uint32_t)(((ADCx->CFGR) & ((0x7UL << (2U))))) == 0x0000001CUL)
    {
      return (((0x4UL << (2U)) ));
    }
    else
    {
      return (uint32_t)(((ADCx->CFGR) & ((0x7UL << (2U)))));
    }
  }


}
# 3075 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (14U))))) | (LowPowerMode))));
}
# 3123 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetLowPowerMode(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (14U)))));
}
# 3159 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetChannelPreSelection(ADC_TypeDef *ADCx, uint32_t Channel)
{
# 3169 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
    ADCx->PCSEL |= (1UL << (((((Channel) & ((0xFFFFFUL << (0U)))) == 0UL) ? ( ((Channel) & ((0x1FUL << (26U)))) >> (26UL) ) : ( (uint32_t)((uint8_t)__builtin_clz(__RBIT((Channel)))) ) ) & 0x1FUL));

}
# 3246 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
  volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));
# 3258 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
  {
    (((*preg)) = ((((((*preg))) & (~((0x1FUL << (26U)) | (0x3FFFFFFUL << (0U))))) | ((Channel & ((0x1FUL << (26U)))) | OffsetLevel))))

                                                                    ;
  }
}
# 3328 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));

  return (uint32_t) ((*preg) & ((0x1FUL << (26U))));
}
# 3354 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));

  return (uint32_t) ((*preg) & ((0x3FFFFFFUL << (0U))));
}
# 3377 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
  (((ADCx->CFGR2)) = ((((((ADCx->CFGR2))) & (~(((0x1UL << (11U)) | (0x1UL << (12U)) | (0x1UL << (13U)) | (0x1UL << (14U)))))) | (RigthShift << (Offsety & 0x1FUL)))));
}
# 3396 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety)
{
  return (uint32_t)((((ADCx->CFGR2) & (((0x1UL << (11U)) << (Offsety & 0x1FUL))))) >> (Offsety & 0x1FUL));
}
# 3419 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{







  {
    volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));
    (((*preg)) = ((((((*preg))) & (~((0x1UL << (31U))))) | (OffsetSignedSaturation))));
  }
}
# 3451 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety)
{
# 3461 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
  {
    const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));
    return (uint32_t) ((*preg) & ((0x1UL << (31U))));
  }
}
# 3724 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x3UL << (10U)) | (0x1FUL << (5U))))) | (TriggerSource))));
}
# 3768 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
{
  volatile uint32_t TriggerSource = ((ADCx->CFGR) & ((0x1FUL << (5U)) | (0x3UL << (10U))));



  uint32_t ShiftExten = ((TriggerSource & (0x3UL << (10U))) >> ((10UL) - 2UL));



  return ((TriggerSource
           & (((((0x00000000UL) & (0x1FUL << (5U))) << (4U * 0UL)) | (((0x1FUL << (5U))) << (4U * 1UL)) | (((0x1FUL << (5U))) << (4U * 2UL)) | (((0x1FUL << (5U))) << (4U * 3UL)) ) >> ShiftExten) & (0x1FUL << (5U)))
          | ((((((0x00000000UL) & (0x3UL << (10U))) << (4U * 0UL)) | ((((0x1UL << (10U)))) << (4U * 1UL)) | ((((0x1UL << (10U)))) << (4U * 2UL)) | ((((0x1UL << (10U)))) << (4U * 3UL)) ) >> ShiftExten) & (0x3UL << (10U)))
         );
}
# 3795 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CFGR) & ((0x3UL << (10U)))) == ((0x00000000UL) & (0x3UL << (10U)))) ? 1UL : 0UL);
}
# 3815 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x3UL << (10U))))) | (ExternalTriggerEdge))));
}
# 3830 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetTriggerEdge(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x3UL << (10U)))));
}
# 3921 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
  (((ADCx->SQR1)) = ((((((ADCx->SQR1))) & (~((0xFUL << (0U))))) | (SequencerNbRanks))));
}
# 3975 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetSequencerLength(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->SQR1) & ((0xFUL << (0U)))));
}
# 4007 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (16U)) | (0x7UL << (17U))))) | (SeqDiscont))));
}
# 4030 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (16U)) | (0x7UL << (17U)))));
}
# 4122 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{




  volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->SQR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  (((*preg)) = ((((((*preg))) & (~(((0x1FUL << (0U))) << (Rank & (((0x1FUL << (0U)))))))) | (((Channel & ((0x1FUL << (26U)))) >> (26UL)) << (Rank & (((0x1FUL << (0U)))))))))

                                                                                                                                   ;
}
# 4224 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->SQR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  return (uint32_t)((((*preg) & (((0x1FUL << (0U))) << (Rank & (((0x1FUL << (0U)))))))

                     >> (Rank & (((0x1FUL << (0U)))))) << (26UL)
                   );
}
# 4253 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (13U))))) | (Continuous))));
}
# 4270 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (13U)))));
}
# 4286 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x3UL << (0U))))) | (DataTransferMode))));
}
# 4414 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetDataTransferMode(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x3UL << (0U)))));
}
# 4440 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (12U))))) | (Overrun))));
}
# 4454 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_GetOverrun(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (12U)))));
}
# 4511 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_INJ_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
{
  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((0x1FUL << (2U)) | (0x3UL << (7U))))) | (TriggerSource))));
}
# 4555 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_GetTriggerSource(ADC_TypeDef *ADCx)
{
  volatile uint32_t TriggerSource = ((ADCx->JSQR) & ((0x1FUL << (2U)) | (0x3UL << (7U))));



  uint32_t ShiftJexten = ((TriggerSource & (0x3UL << (7U))) >> (( 6UL) - 2UL));



  return ((TriggerSource
           & (((((0x00000000UL) & (0x1FUL << (2U))) << (4U * 0UL)) | (((0x1FUL << (2U))) << (4U * 1UL)) | (((0x1FUL << (2U))) << (4U * 2UL)) | (((0x1FUL << (2U))) << (4U * 3UL)) ) >> ShiftJexten) & (0x1FUL << (2U)))
          | ((((((0x00000000UL) & (0x3UL << (7U))) << (4U * 0UL)) | ((((0x1UL << (7U)))) << (4U * 1UL)) | ((((0x1UL << (7U)))) << (4U * 2UL)) | ((((0x1UL << (7U)))) << (4U * 3UL)) ) >> ShiftJexten) & (0x3UL << (7U)))
         );
}
# 4582 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((((ADCx->JSQR) & ((0x3UL << (7U)))) == ((0x00000000UL) & (0x3UL << (7U)))) ? 1UL : 0UL);
}
# 4602 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_INJ_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((0x3UL << (7U))))) | (ExternalTriggerEdge))));
}
# 4617 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_GetTriggerEdge(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->JSQR) & ((0x3UL << (7U)))));
}
# 4643 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((0x3UL << (0U))))) | (SequencerNbRanks))));
}
# 4664 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_GetSequencerLength(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->JSQR) & ((0x3UL << (0U)))));
}
# 4682 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_INJ_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (20U))))) | (SeqDiscont))));
}
# 4697 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_GetSequencerDiscont(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (20U)))));
}
# 4760 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_INJ_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{




  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((((0x1FUL << (26U))) >> (26UL)) << (Rank & (((0x1FUL << (0U)))))))) | (((Channel & ((0x1FUL << (26U)))) >> (26UL)) << (Rank & (((0x1FUL << (0U)))))))))

                                                                                                                                   ;
}
# 4832 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
{
  return (uint32_t)((((ADCx->JSQR) & ((((0x1FUL << (26U))) >> (26UL)) << (Rank & (((0x1FUL << (0U)))))))

                    >> (Rank & (((0x1FUL << (0U)))))) << (26UL)
                   );
}
# 4870 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_INJ_SetTrigAuto(ADC_TypeDef *ADCx, uint32_t TrigAuto)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (25U))))) | (TrigAuto))));
}
# 4884 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_GetTrigAuto(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (25U)))));
}
# 4930 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_INJ_SetQueueMode(ADC_TypeDef *ADCx, uint32_t QueueMode)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (21U)) | (0x1UL << (31U))))) | (QueueMode))));
}
# 4945 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_GetQueueMode(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (21U)) | (0x1UL << (31U)))));
}
# 5146 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_INJ_ConfigQueueContext(ADC_TypeDef *ADCx,
                                                   uint32_t TriggerSource,
                                                   uint32_t ExternalTriggerEdge,
                                                   uint32_t SequencerNbRanks,
                                                   uint32_t Rank1_Channel,
                                                   uint32_t Rank2_Channel,
                                                   uint32_t Rank3_Channel,
                                                   uint32_t Rank4_Channel)
{






  uint32_t is_trigger_not_sw = (uint32_t)((TriggerSource != (0x00000000UL)) ? 1UL : 0UL);
  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((0x1FUL << (2U)) | (0x3UL << (7U)) | (0x1FUL << (27U)) | (0x1FUL << (21U)) | (0x1FUL << (15U)) | (0x1FUL << (9U)) | (0x3UL << (0U))))) | ((TriggerSource & (0x1FUL << (2U))) | (ExternalTriggerEdge * (is_trigger_not_sw)) | (((Rank4_Channel & ((0x1FUL << (26U)))) >> (26UL)) << (((0x00000300UL) | ((27U))) & (((0x1FUL << (0U)))))) | (((Rank3_Channel & ((0x1FUL << (26U)))) >> (26UL)) << (((0x00000200UL) | ((21U))) & (((0x1FUL << (0U)))))) | (((Rank2_Channel & ((0x1FUL << (26U)))) >> (26UL)) << (((0x00000100UL) | ((15U))) & (((0x1FUL << (0U)))))) | (((Rank1_Channel & ((0x1FUL << (26U)))) >> (26UL)) << (((0x00000000UL) | ((9U))) & (((0x1FUL << (0U)))))) | SequencerNbRanks))))
# 5177 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
             ;
}
# 5276 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{




  volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->SMPR1)) + ((((Channel & ((0x00000000UL) | (0x02000000UL))) >> (25UL))) << 2UL))));

  (((*preg)) = ((((((*preg))) & (~((0x7UL << (0U)) << ((Channel & (0x01F00000UL)) >> (20UL))))) | (SamplingTime << ((Channel & (0x01F00000UL)) >> (20UL))))))

                                                                                                               ;
}
# 5361 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->SMPR1)) + ((((Channel & ((0x00000000UL) | (0x02000000UL))) >> (25UL))) << 2UL))));

  return (uint32_t)(((*preg) & ((0x7UL << (0U)) << ((Channel & (0x01F00000UL)) >> (20UL))))

                    >> ((Channel & (0x01F00000UL)) >> (20UL))
                   );
}
# 5422 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
# 5444 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
  (((ADCx->DIFSEL)) = ((((((ADCx->DIFSEL))) & (~(Channel & (((0xFFFFFUL << (0U))))))) | ((Channel & (((0xFFFFFUL << (0U))))) & ((0xFFFFFUL << (0U)) >> (SingleDiff & ((0x010UL << (0U)) | (0x008UL << (0U)))))))))

                                                                                                                               ;

}
# 5493 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel)
{



  return (uint32_t)(((ADCx->DIFSEL) & ((Channel & (((0xFFFFFUL << (0U))))))));

}
# 5641 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{




  volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->CFGR)) + ((((AWDy & ((0x00000000UL) | (0x00100000UL) | (0x00200000UL))) >> (20UL)) + ((AWDy & ((0x00001UL << (0U)))) * (0x00000024UL))) << 2UL))))
                                                                                                                                  ;

  (((*preg)) = ((((((*preg))) & (~((AWDy & (((0x1FUL << (26U)) | (0x1UL << (24U)) | (0x1UL << (23U)) | (0x1UL << (22U))) | ((0xFFFFFUL << (0U)))))))) | (AWDChannelGroup & AWDy))))

                                    ;
}
# 5780 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->CFGR)) + ((((AWDy & ((0x00000000UL) | (0x00100000UL) | (0x00200000UL))) >> (20UL)) + ((AWDy & ((0x00001UL << (0U)))) * (0x00000024UL))) << 2UL))))
                                                                                                                                        ;

  uint32_t AnalogWDMonitChannels = (((*preg) & (AWDy)) & AWDy & (((0x1FUL << (26U)) | (0x1UL << (24U)) | (0x1UL << (23U)) | (0x1UL << (22U))) | ((0xFFFFFUL << (0U)))));





  if (AnalogWDMonitChannels != 0UL)
  {
    if (AWDy == (((0x1FUL << (26U)) | (0x1UL << (24U)) | (0x1UL << (23U)) | (0x1UL << (22U))) | (0x00000000UL)))
    {
      if ((AnalogWDMonitChannels & (0x1UL << (22U))) == 0UL)
      {

        AnalogWDMonitChannels = ((AnalogWDMonitChannels
                                  | (((0xFFFFFUL << (0U))))
                                 )
                                 & (~((0x1FUL << (26U))))
                                );
      }
      else
      {

        AnalogWDMonitChannels = (AnalogWDMonitChannels
                                 | ((0x00001UL << (0U)) << (AnalogWDMonitChannels >> (26U)))
                                );
      }
    }
    else
    {
      if ((AnalogWDMonitChannels & ((0xFFFFFUL << (0U)))) == ((0xFFFFFUL << (0U))))
      {

        AnalogWDMonitChannels = (((0xFFFFFUL << (0U)))
                                 | (((0x1UL << (24U)) | (0x1UL << (23U))))
                                );
      }
      else
      {


        AnalogWDMonitChannels = (AnalogWDMonitChannels
                                 | ((0x1UL << (24U)) | (0x1UL << (23U)) | (0x1UL << (22U)))
                                 | (((((AnalogWDMonitChannels) & ((0xFFFFFUL << (0U)))) == 0UL) ? ( ((AnalogWDMonitChannels) & ((0x1FUL << (26U)))) >> (26UL) ) : ( (uint32_t)((uint8_t)__builtin_clz(__RBIT((AnalogWDMonitChannels)))) ) ) << (26U))
                                );
      }
    }
  }

  return AnalogWDMonitChannels;
}
# 5889 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdsHighLow, uint32_t AWDThresholdValue)
{
# 5924 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
  volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->LTR1)) + (((((AWDy & (((0x00000000UL)) | ((0x00100000UL)) | ((0x00200000UL)))) >> ((20UL))) * 2UL) + ((AWDy & ((0x00001UL << (0U)))) * (0x00000022UL)) + (AWDThresholdsHighLow)) << 2UL))))

                                                                               ;

  (((*preg)) = ((((((*preg))) & (~((0x3FFFFFFUL << (0U))))) | (AWDThresholdValue))));

}
# 5955 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdsHighLow)
{







   const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->LTR1)) + (((((AWDy & (((0x00000000UL)) | ((0x00100000UL)) | ((0x00200000UL)))) >> ((20UL))) * 2UL) + ((AWDy & ((0x00001UL << (0U)))) * (0x00000022UL)) + (AWDThresholdsHighLow)) << 2UL))))

                                                                                            ;

  return (uint32_t)(((*preg) & ((0x3FFFFFFUL << (0U)))));

}
# 6149 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
  (((ADCx->CFGR2)) = ((((((ADCx->CFGR2))) & (~((0x1UL << (0U)) | (0x1UL << (1U)) | (0x1UL << (10U))))) | (OvsScope))));
}
# 6174 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetOverSamplingScope(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR2) & ((0x1UL << (0U)) | (0x1UL << (1U)) | (0x1UL << (10U)))));
}
# 6201 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetOverSamplingDiscont(ADC_TypeDef *ADCx, uint32_t OverSamplingDiscont)
{
  (((ADCx->CFGR2)) = ((((((ADCx->CFGR2))) & (~((0x1UL << (9U))))) | (OverSamplingDiscont))));
}
# 6220 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetOverSamplingDiscont(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR2) & ((0x1UL << (9U)))));
}
# 6254 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_t Shift)
{
  (((ADCx->CFGR2)) = ((((((ADCx->CFGR2))) & (~(((0xFUL << (5U)) | (0x3FFUL << (16U)))))) | ((Shift | (((Ratio - 1UL) << (16U))))))));
}
# 6266 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetOverSamplingRatio(ADC_TypeDef *ADCx)
{
  return (((uint32_t)(((ADCx->CFGR2) & ((0x3FFUL << (16U))))) + (1UL << (16U))) >> (16U));
}
# 6290 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetOverSamplingShift(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR2) & ((0xFUL << (5U)))));
}
# 6318 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetBoostMode(ADC_TypeDef *ADCx, uint32_t BoostMode)
{






  if ((((DBGMCU_TypeDef *) (0x5C001000UL))->IDCODE & 0x30000000UL) == 0x10000000UL)
  {
    (((ADCx->CR)) = ((((((ADCx->CR))) & (~((0x1UL << (8U))))) | ((BoostMode >> 2UL)))));
  }
  else
  {
    (((ADCx->CR)) = ((((((ADCx->CR))) & (~((0x3UL << (8U))))) | ((BoostMode & (0x3UL << (8U)))))));
  }

}
# 6348 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetBoostMode(ADC_TypeDef *ADCx)
{
  if ((((DBGMCU_TypeDef *) (0x5C001000UL))->IDCODE & 0x30000000UL) == 0x10000000UL)
  {
    return (uint32_t)((ADCx->CR) & ((0x1UL << (8U))));
  }
  else
  {
    return ((((ADCx->CR) & ((0x3UL << (8U)))) == ((0x3UL << (8U)))) ? 1UL : 0UL);
  }
}
# 6386 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetMultimode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Multimode)
{
  (((ADCxy_COMMON->CCR)) = ((((((ADCxy_COMMON->CCR))) & (~((0x1FUL << (0U))))) | (Multimode))));
}
# 6410 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(((ADCxy_COMMON->CCR) & ((0x1FUL << (0U)))));
}
# 6458 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t MultiDMATransfer)
{
  (((ADCxy_COMMON->CCR)) = ((((((ADCxy_COMMON->CCR))) & (~((0x3UL << (14U))))) | (MultiDMATransfer))));
}
# 6501 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(((ADCxy_COMMON->CCR) & ((0x3UL << (14U)))));
}
# 6546 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_SetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t MultiTwoSamplingDelay)
{
  (((ADCxy_COMMON->CCR)) = ((((((ADCxy_COMMON->CCR))) & (~((0xFUL << (8U))))) | (MultiTwoSamplingDelay))));
}
# 6579 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_GetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(((ADCxy_COMMON->CCR) & ((0xFUL << (8U)))));
}
# 6604 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_EnableDeepPowerDown(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (29U))))))

                            ;
}
# 6627 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{



  ((ADCx->CR) &= ~(((0x1UL << (29U)) | ((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U))))));
}







static inline uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (29U)))) == ((0x1UL << (29U)))) ? 1UL : 0UL);
}
# 6660 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (28U))))))

                             ;
}
# 6679 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
  ((ADCx->CR) &= ~(((0x1UL << (28U)) | ((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U))))));
}







static inline uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (28U)))) == ((0x1UL << (28U)))) ? 1UL : 0UL);
}
# 6711 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_Enable(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (0U))))))

                         ;
}
# 6731 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_Disable(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (1U))))))

                          ;
}
# 6750 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
# 6799 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t CalibrationMode, uint32_t SingleDiff)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~((0x1UL << (16U)) | (0x1UL << (30U)) | ((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (31U)) | (CalibrationMode & ((0x1UL << (16U)))) | (SingleDiff & ((0x1UL << (30U))))))))

                                                                                                                     ;
}







static inline uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (31U)))) == ((0x1UL << (31U)))) ? 1UL : 0UL);
}
# 6846 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (2U))))))

                            ;
}
# 6866 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (4U))))))

                          ;
}







static inline uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
# 6907 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->DR) & ((0xFFFFFFFFUL << (0U)))));
}
# 6922 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint16_t LL_ADC_REG_ReadConversionData16(ADC_TypeDef *ADCx)
{
  return (uint16_t)(((ADCx->DR) & ((0xFFFFFFFFUL << (0U)))));
}
# 6937 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint16_t LL_ADC_REG_ReadConversionData14(ADC_TypeDef *ADCx)
{
  return (uint16_t)(((ADCx->DR) & ((0xFFFFFFFFUL << (0U)))));
}
# 6952 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
  return (uint16_t)(((ADCx->DR) & ((0xFFFFFFFFUL << (0U)))));
}
# 6967 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint16_t LL_ADC_REG_ReadConversionData10(ADC_TypeDef *ADCx)
{
  return (uint16_t)(((ADCx->DR) & ((0xFFFFFFFFUL << (0U)))));
}
# 6982 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
{
  return (uint8_t)(((ADCx->DR) & ((0xFFFFFFFFUL << (0U)))));
}
# 7007 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_REG_ReadMultiConversionData32(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t ConversionData)
{
  return (uint32_t)(((ADCxy_COMMON->CDR) & (ConversionData))

                    >> (((uint8_t)__builtin_clz(__RBIT(ConversionData))) & 0x1FUL)
                   );
}
# 7041 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_INJ_StartConversion(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (3U))))))

                             ;
}
# 7061 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{



  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (5U))))))

                           ;
}







static inline uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_INJ_IsStopConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
# 7110 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_INJ_ReadConversionData32(ADC_TypeDef *ADCx, uint32_t Rank)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  return (uint32_t)(((*preg) & ((0xFFFFFFFFUL << (0U))))

                   );
}
# 7137 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint16_t LL_ADC_INJ_ReadConversionData16(ADC_TypeDef *ADCx, uint32_t Rank)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  return (uint16_t)(((*preg) & ((0xFFFFFFFFUL << (0U))))

                   );
}
# 7164 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint16_t LL_ADC_INJ_ReadConversionData14(ADC_TypeDef *ADCx, uint32_t Rank)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  return (uint16_t)(((*preg) & ((0xFFFFFFFFUL << (0U))))

                   );
}
# 7191 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint16_t LL_ADC_INJ_ReadConversionData12(ADC_TypeDef *ADCx, uint32_t Rank)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  return (uint16_t)(((*preg) & ((0xFFFFFFFFUL << (0U))))

                   );
}
# 7218 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint16_t LL_ADC_INJ_ReadConversionData10(ADC_TypeDef *ADCx, uint32_t Rank)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  return (uint16_t)(((*preg) & ((0xFFFFFFFFUL << (0U))))

                   );
}
# 7245 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint8_t LL_ADC_INJ_ReadConversionData8(ADC_TypeDef *ADCx, uint32_t Rank)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));

  return (uint8_t)(((*preg) & ((0xFFFFFFFFUL << (0U))))

                  );
}
# 7271 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_OVR(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_EOSMP(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_JEOC(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_JEOS(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_JQOVF(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_AWD1(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_AWD2(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_ADC_IsActiveFlag_AWD3(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
# 7395 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (0U))));
}







static inline void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (2U))));
}







static inline void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (3U))));
}







static inline void LL_ADC_ClearFlag_OVR(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (4U))));
}







static inline void LL_ADC_ClearFlag_EOSMP(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (1U))));
}







static inline void LL_ADC_ClearFlag_JEOC(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (5U))));
}







static inline void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (6U))));
}







static inline void LL_ADC_ClearFlag_JQOVF(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (10U))));
}







static inline void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (7U))));
}







static inline void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (8U))));
}







static inline void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (9U))));
}
# 7517 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_MST_ADRDY(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
# 7529 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_SLV_ADRDY(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
# 7541 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_MST_EOC(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (18U)))) == ((0x1UL << (18U)))) ? 1UL : 0UL);
}
# 7553 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_SLV_EOC(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (18U)))) == ((0x1UL << (18U)))) ? 1UL : 0UL);
}
# 7565 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_MST_EOS(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
# 7577 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_SLV_EOS(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (19U)))) == ((0x1UL << (19U)))) ? 1UL : 0UL);
}
# 7589 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_MST_OVR(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
# 7601 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_SLV_OVR(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (20U)))) == ((0x1UL << (20U)))) ? 1UL : 0UL);
}
# 7613 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_MST_EOSMP(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
# 7625 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_SLV_EOSMP(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (17U)))) == ((0x1UL << (17U)))) ? 1UL : 0UL);
}
# 7637 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_MST_JEOC(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
# 7649 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_SLV_JEOC(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (21U)))) == ((0x1UL << (21U)))) ? 1UL : 0UL);
}
# 7661 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_MST_JEOS(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
# 7673 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_SLV_JEOS(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (22U)))) == ((0x1UL << (22U)))) ? 1UL : 0UL);
}
# 7685 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_MST_JQOVF(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
# 7697 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_SLV_JQOVF(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (26U)))) == ((0x1UL << (26U)))) ? 1UL : 0UL);
}
# 7709 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_MST_AWD1(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
# 7721 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_SLV_AWD1(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (23U)))) == ((0x1UL << (23U)))) ? 1UL : 0UL);
}
# 7733 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_MST_AWD2(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
# 7745 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_SLV_AWD2(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (24U)))) == ((0x1UL << (24U)))) ? 1UL : 0UL);
}
# 7757 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_MST_AWD3(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
# 7769 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsActiveFlag_SLV_AWD3(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return ((((ADCxy_COMMON->CSR) & ((0x1UL << (25U)))) == ((0x1UL << (25U)))) ? 1UL : 0UL);
}
# 7788 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline void LL_ADC_EnableIT_ADRDY(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (0U))));
}







static inline void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (2U))));
}







static inline void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (3U))));
}







static inline void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (4U))));
}







static inline void LL_ADC_EnableIT_EOSMP(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (1U))));
}







static inline void LL_ADC_EnableIT_JEOC(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (5U))));
}







static inline void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (6U))));
}







static inline void LL_ADC_EnableIT_JQOVF(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (10U))));
}







static inline void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (7U))));
}







static inline void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (8U))));
}







static inline void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (9U))));
}







static inline void LL_ADC_DisableIT_ADRDY(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (0U))));
}







static inline void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (2U))));
}







static inline void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (3U))));
}







static inline void LL_ADC_DisableIT_OVR(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (4U))));
}







static inline void LL_ADC_DisableIT_EOSMP(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (1U))));
}







static inline void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (5U))));
}







static inline void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (6U))));
}







static inline void LL_ADC_DisableIT_JQOVF(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (10U))));
}







static inline void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (7U))));
}







static inline void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (8U))));
}







static inline void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (9U))));
}
# 8031 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_ADRDY(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
# 8043 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_EOC(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
# 8055 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_EOS(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
# 8067 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_OVR(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
# 8079 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_EOSMP(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
# 8091 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_JEOC(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
# 8103 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_JEOS(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
# 8115 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_JQOVF(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
# 8127 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_AWD1(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
# 8139 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_AWD2(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
# 8151 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
static inline uint32_t LL_ADC_IsEnabledIT_AWD3(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
# 8166 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
ErrorStatus LL_ADC_CommonDeInit(ADC_Common_TypeDef *ADCxy_COMMON);
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct);
void LL_ADC_CommonStructInit(LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct);



ErrorStatus LL_ADC_DeInit(ADC_TypeDef *ADCx);


ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct);
void LL_ADC_StructInit(LL_ADC_InitTypeDef *ADC_InitStruct);


ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct);
void LL_ADC_REG_StructInit(LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct);


ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct);
void LL_ADC_INJ_StructInit(LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct);
# 33 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h" 2
# 50 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
typedef struct
{
  uint32_t Ratio;






  uint32_t RightBitShift;


  uint32_t TriggeredMode;


  uint32_t OversamplingStopReset;







} ADC_OversamplingTypeDef;
# 91 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
typedef struct
{
  uint32_t ClockPrescaler;
# 104 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
  uint32_t Resolution;
# 114 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
  uint32_t ScanConvMode;







  uint32_t EOCSelection;


  FunctionalState LowPowerAutoWait;
# 137 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
  FunctionalState ContinuousConvMode;



  uint32_t NbrOfConversion;





  FunctionalState DiscontinuousConvMode;





  uint32_t NbrOfDiscConversion;



  uint32_t ExternalTrigConv;




  uint32_t ExternalTrigConvEdge;



  uint32_t ConversionDataManagement;
# 187 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
  uint32_t Overrun;
# 198 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
  uint32_t LeftBitShift;

  FunctionalState OversamplingMode;



  ADC_OversamplingTypeDef Oversampling;


} ADC_InitTypeDef;
# 220 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
typedef struct
{
  uint32_t Channel;



  uint32_t Rank;




  uint32_t SamplingTime;
# 242 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
  uint32_t SingleDiff;
# 254 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
  uint32_t OffsetNumber;



  uint32_t Offset;






  FunctionalState OffsetRightShift;
# 282 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
  FunctionalState OffsetSignedSaturation;



} ADC_ChannelConfTypeDef;







typedef struct
{
  uint32_t WatchdogNumber;




  uint32_t WatchdogMode;




  uint32_t Channel;




  FunctionalState ITMode;


  uint32_t HighThreshold;
# 324 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
  uint32_t LowThreshold;
# 340 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
} ADC_AnalogWDGConfTypeDef;





typedef struct
{
  uint32_t ContextQueue;



  uint32_t ChannelCount;
} ADC_InjectionConfigTypeDef;
# 409 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
typedef struct

{
  ADC_TypeDef *Instance;
  ADC_InitTypeDef Init;
  DMA_HandleTypeDef *DMA_Handle;
  HAL_LockTypeDef Lock;
  volatile uint32_t State;
  volatile uint32_t ErrorCode;
  ADC_InjectionConfigTypeDef InjectionConfig ;
# 432 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
} ADC_HandleTypeDef;
# 1917 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc_ex.h" 1
# 47 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc_ex.h"
typedef struct
{
  uint32_t Ratio;






  uint32_t RightBitShift;

} ADC_InjOversamplingTypeDef;
# 76 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc_ex.h"
typedef struct
{
  uint32_t InjectedChannel;



  uint32_t InjectedRank;




  uint32_t InjectedSamplingTime;
# 98 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc_ex.h"
  uint32_t InjectedSingleDiff;
# 110 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc_ex.h"
  uint32_t InjectedOffsetNumber;



  uint32_t InjectedOffset;






  uint32_t InjectedOffsetRightShift;
# 138 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc_ex.h"
  FunctionalState InjectedOffsetSignedSaturation;



  uint32_t InjectedNbrOfConversion;





  FunctionalState InjectedDiscontinuousConvMode;
# 158 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc_ex.h"
  FunctionalState AutoInjectedConv;
# 167 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc_ex.h"
  FunctionalState QueueInjectedContext;
# 178 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc_ex.h"
  uint32_t ExternalTrigInjecConv;





  uint32_t ExternalTrigInjecConvEdge;





  FunctionalState InjecOversamplingMode;



  ADC_InjOversamplingTypeDef InjecOversampling;


} ADC_InjectionConfTypeDef;






typedef struct
{
  uint32_t Mode;


  uint32_t DualModeData;


  uint32_t TwoSamplingDelay;







} ADC_MultiModeTypeDef;
# 1273 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc_ex.h"
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff);
uint32_t HAL_ADCEx_Calibration_GetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff);
HAL_StatusTypeDef HAL_ADCEx_LinearCalibration_GetValue(ADC_HandleTypeDef *hadc, uint32_t *LinearCalib_Buffer);
HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff, uint32_t CalibrationFactor);
HAL_StatusTypeDef HAL_ADCEx_LinearCalibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t *LinearCalib_Buffer);
HAL_StatusTypeDef HAL_ADCEx_LinearCalibration_FactorLoad(ADC_HandleTypeDef *hadc);



HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout);


HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef *hadc);


HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length);
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc);
uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef *hadc);


uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank);


void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc);
void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc);
void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc);
void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc);
void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc);


HAL_StatusTypeDef HAL_ADCEx_RegularStop(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_RegularStop_IT(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_RegularStop_DMA(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_RegularMultiModeStop_DMA(ADC_HandleTypeDef *hadc);
# 1319 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc_ex.h"
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected);
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode);
HAL_StatusTypeDef HAL_ADCEx_EnableInjectedQueue(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_DisableVoltageRegulator(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADCEx_EnterADCDeepPowerDownMode(ADC_HandleTypeDef *hadc);
# 1918 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h" 2
# 1929 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc);
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc);
void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc);
# 1951 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout);
HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef *hadc, uint32_t EventType, uint32_t Timeout);


HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc);


HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length);
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc);


uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc);


void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc);
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc);
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc);
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc);
void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc);
# 1982 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig);
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig);
# 1993 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc);
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc);
# 2008 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup);
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc);
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc);
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
void ADC_DMAError(DMA_HandleTypeDef *hdma);
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc);
# 242 "./src/main/startup/stm32h7xx_hal_conf.h" 2
# 265 "./src/main/startup/stm32h7xx_hal_conf.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dac.h" 1
# 50 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dac.h"
typedef enum
{
  HAL_DAC_STATE_RESET = 0x00U,
  HAL_DAC_STATE_READY = 0x01U,
  HAL_DAC_STATE_BUSY = 0x02U,
  HAL_DAC_STATE_TIMEOUT = 0x03U,
  HAL_DAC_STATE_ERROR = 0x04U

} HAL_DAC_StateTypeDef;







typedef struct

{
  DAC_TypeDef *Instance;

  volatile HAL_DAC_StateTypeDef State;

  HAL_LockTypeDef Lock;

  DMA_HandleTypeDef *DMA_Handle1;

  DMA_HandleTypeDef *DMA_Handle2;

  volatile uint32_t ErrorCode;
# 95 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dac.h"
} DAC_HandleTypeDef;




typedef struct
{
  uint32_t DAC_SampleTime ;



  uint32_t DAC_HoldTime ;



  uint32_t DAC_RefreshTime ;


} DAC_SampleAndHoldConfTypeDef;




typedef struct
{
  uint32_t DAC_SampleAndHold;


  uint32_t DAC_Trigger;


  uint32_t DAC_OutputBuffer;


  uint32_t DAC_ConnectOnChipPeripheral ;


  uint32_t DAC_UserTrimming;



  uint32_t DAC_TrimmingValue;



  DAC_SampleAndHoldConfTypeDef DAC_SampleAndHoldConfig;

} DAC_ChannelConfTypeDef;
# 444 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dac.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dac_ex.h" 1
# 204 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dac_ex.h"
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude);
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude);

HAL_StatusTypeDef HAL_DACEx_DualStart(DAC_HandleTypeDef *hdac);
HAL_StatusTypeDef HAL_DACEx_DualStop(DAC_HandleTypeDef *hdac);
HAL_StatusTypeDef HAL_DACEx_DualStart_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                          uint32_t Alignment);
HAL_StatusTypeDef HAL_DACEx_DualStop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel);
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2);
uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef *hdac);

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac);
void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac);
void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac);
void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac);
# 230 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dac_ex.h"
HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel);
HAL_StatusTypeDef HAL_DACEx_SetUserTrimming(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel,
                                            uint32_t NewTrimmingValue);
uint32_t HAL_DACEx_GetTrimOffset(DAC_HandleTypeDef *hdac, uint32_t Channel);
# 249 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dac_ex.h"
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma);
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma);
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma);
# 445 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dac.h" 2
# 456 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dac.h"
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac);
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac);
void HAL_DAC_MspInit(DAC_HandleTypeDef *hdac);
void HAL_DAC_MspDeInit(DAC_HandleTypeDef *hdac);
# 469 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dac.h"
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel);
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel);
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment);
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel);
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac);
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data);

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac);
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac);
void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac);
void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac);
# 497 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dac.h"
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel);
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel);
# 507 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dac.h"
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac);
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac);
# 521 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dac.h"
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma);
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma);
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma);
# 266 "./src/main/startup/stm32h7xx_hal_conf.h" 2



# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h" 1
# 47 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
typedef enum
{
  FLASH_PROC_NONE = 0U,
  FLASH_PROC_SECTERASE_BANK1,
  FLASH_PROC_MASSERASE_BANK1,
  FLASH_PROC_PROGRAM_BANK1,
  FLASH_PROC_SECTERASE_BANK2,
  FLASH_PROC_MASSERASE_BANK2,
  FLASH_PROC_PROGRAM_BANK2,
  FLASH_PROC_ALLBANK_MASSERASE
} FLASH_ProcedureTypeDef;





typedef struct
{
  volatile FLASH_ProcedureTypeDef ProcedureOnGoing;

  volatile uint32_t NbSectorsToErase;

  volatile uint32_t VoltageForErase;

  volatile uint32_t Sector;

  volatile uint32_t Address;

  HAL_LockTypeDef Lock;

  volatile uint32_t ErrorCode;

}FLASH_ProcessTypeDef;
# 709 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash_ex.h" 1
# 47 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash_ex.h"
typedef struct
{
  uint32_t TypeErase;


  uint32_t Banks;


  uint32_t Sector;


  uint32_t NbSectors;


  uint32_t VoltageRange;


} FLASH_EraseInitTypeDef;





typedef struct
{
  uint32_t OptionType;


  uint32_t WRPState;


  uint32_t WRPSector;


  uint32_t RDPLevel;


  uint32_t BORLevel;


  uint32_t USERType;


  uint32_t USERConfig;


  uint32_t Banks;


  uint32_t PCROPConfig;



  uint32_t PCROPStartAddr;


  uint32_t PCROPEndAddr;


  uint32_t BootConfig;


  uint32_t BootAddr0;


  uint32_t BootAddr1;
# 126 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash_ex.h"
  uint32_t SecureAreaConfig;



  uint32_t SecureAreaStartAddr;


  uint32_t SecureAreaEndAddr;
# 151 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash_ex.h"
} FLASH_OBProgramInitTypeDef;




typedef struct
{
  uint32_t TypeCRC;


  uint32_t BurstSize;


  uint32_t Bank;


  uint32_t Sector;


  uint32_t NbSectors;


  uint32_t CRCStartAddr;


  uint32_t CRCEndAddr;


} FLASH_CRCInitTypeDef;
# 814 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash_ex.h"
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError);
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit);
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit);
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit);

HAL_StatusTypeDef HAL_FLASHEx_Unlock_Bank1(void);
HAL_StatusTypeDef HAL_FLASHEx_Lock_Bank1(void);





HAL_StatusTypeDef HAL_FLASHEx_ComputeCRC(FLASH_CRCInitTypeDef *pCRCInit, uint32_t *CRC_Result);
# 987 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash_ex.h"
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange);
# 710 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h" 2
# 719 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress);
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress);

void HAL_FLASH_IRQHandler(void);

void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue);
void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue);
# 734 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
HAL_StatusTypeDef HAL_FLASH_Unlock(void);
HAL_StatusTypeDef HAL_FLASH_Lock(void);
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void);
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void);

HAL_StatusTypeDef HAL_FLASH_OB_Launch(void);
# 748 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
uint32_t HAL_FLASH_GetError(void);
# 761 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
extern FLASH_ProcessTypeDef pFlash;
# 843 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank);
HAL_StatusTypeDef FLASH_OB_WaitForLastOperation(uint32_t Timeout);
HAL_StatusTypeDef FLASH_CRC_WaitForLastOperation(uint32_t Timeout, uint32_t Bank);
# 270 "./src/main/startup/stm32h7xx_hal_conf.h" 2
# 293 "./src/main/startup/stm32h7xx_hal_conf.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c.h" 1
# 48 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c.h"
typedef struct
{
  uint32_t Timing;



  uint32_t OwnAddress1;


  uint32_t AddressingMode;


  uint32_t DualAddressMode;


  uint32_t OwnAddress2;


  uint32_t OwnAddress2Masks;


  uint32_t GeneralCallMode;


  uint32_t NoStretchMode;


} I2C_InitTypeDef;
# 108 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c.h"
typedef enum
{
  HAL_I2C_STATE_RESET = 0x00U,
  HAL_I2C_STATE_READY = 0x20U,
  HAL_I2C_STATE_BUSY = 0x24U,
  HAL_I2C_STATE_BUSY_TX = 0x21U,
  HAL_I2C_STATE_BUSY_RX = 0x22U,
  HAL_I2C_STATE_LISTEN = 0x28U,
  HAL_I2C_STATE_BUSY_TX_LISTEN = 0x29U,

  HAL_I2C_STATE_BUSY_RX_LISTEN = 0x2AU,

  HAL_I2C_STATE_ABORT = 0x60U,
  HAL_I2C_STATE_TIMEOUT = 0xA0U,
  HAL_I2C_STATE_ERROR = 0xE0U

} HAL_I2C_StateTypeDef;
# 148 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c.h"
typedef enum
{
  HAL_I2C_MODE_NONE = 0x00U,
  HAL_I2C_MODE_MASTER = 0x10U,
  HAL_I2C_MODE_SLAVE = 0x20U,
  HAL_I2C_MODE_MEM = 0x40U

} HAL_I2C_ModeTypeDef;
# 186 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c.h"
typedef struct __I2C_HandleTypeDef
{
  I2C_TypeDef *Instance;

  I2C_InitTypeDef Init;

  uint8_t *pBuffPtr;

  uint16_t XferSize;

  volatile uint16_t XferCount;

  volatile uint32_t XferOptions;


  volatile uint32_t PreviousState;

  HAL_StatusTypeDef(*XferISR)(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources);

  DMA_HandleTypeDef *hdmatx;

  DMA_HandleTypeDef *hdmarx;

  HAL_LockTypeDef Lock;

  volatile HAL_I2C_StateTypeDef State;

  volatile HAL_I2C_ModeTypeDef Mode;

  volatile uint32_t ErrorCode;

  volatile uint32_t AddrEventCount;
# 236 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c.h"
} I2C_HandleTypeDef;
# 568 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c_ex.h" 1
# 93 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c_ex.h"
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter);
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter);
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c);
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c);
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus);
void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus);
# 569 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c.h" 2
# 579 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c.h"
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c);
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c);
# 601 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c.h"
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout);


HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);

HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c);
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c);
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress);


HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size);

HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions);
# 645 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c.h"
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c);
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode);
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c);
# 665 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_i2c.h"
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c);
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c);
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c);
# 294 "./src/main/startup/stm32h7xx_hal_conf.h" 2
# 313 "./src/main/startup/stm32h7xx_hal_conf.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_mdma.h" 1
# 49 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_mdma.h"
typedef struct
{

  uint32_t Request;


  uint32_t TransferTriggerMode;



  uint32_t Priority;


  uint32_t Endianness;


  uint32_t SourceInc;


  uint32_t DestinationInc;


  uint32_t SourceDataSize;


  uint32_t DestDataSize;



  uint32_t DataAlignment;


  uint32_t BufferTransferLength;


  uint32_t SourceBurst;







  uint32_t DestBurst;







  int32_t SourceBlockAddressOffset;






  int32_t DestBlockAddressOffset;





}MDMA_InitTypeDef;
# 122 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_mdma.h"
typedef struct
{
  volatile uint32_t CTCR;
  volatile uint32_t CBNDTR;
  volatile uint32_t CSAR;
  volatile uint32_t CDAR;
  volatile uint32_t CBRUR;
  volatile uint32_t CLAR;
  volatile uint32_t CTBR;
  volatile uint32_t Reserved;
  volatile uint32_t CMAR;
  volatile uint32_t CMDR;

}MDMA_LinkNodeTypeDef;





typedef struct
{
  MDMA_InitTypeDef Init;
  uint32_t SrcAddress;
  uint32_t DstAddress;
  uint32_t BlockDataLength;
  uint32_t BlockCount;

  uint32_t PostRequestMaskAddress;


  uint32_t PostRequestMaskData;



}MDMA_LinkNodeConfTypeDef;





typedef enum
{
  HAL_MDMA_STATE_RESET = 0x00U,
  HAL_MDMA_STATE_READY = 0x01U,
  HAL_MDMA_STATE_BUSY = 0x02U,
  HAL_MDMA_STATE_ERROR = 0x03U,
  HAL_MDMA_STATE_ABORT = 0x04U,

}HAL_MDMA_StateTypeDef;




typedef enum
{
  HAL_MDMA_FULL_TRANSFER = 0x00U,
  HAL_MDMA_BUFFER_TRANSFER = 0x01U,
  HAL_MDMA_BLOCK_TRANSFER = 0x02U,
  HAL_MDMA_REPEAT_BLOCK_TRANSFER = 0x03U

}HAL_MDMA_LevelCompleteTypeDef;




typedef enum
{
  HAL_MDMA_XFER_CPLT_CB_ID = 0x00U,
  HAL_MDMA_XFER_BUFFERCPLT_CB_ID = 0x01U,
  HAL_MDMA_XFER_BLOCKCPLT_CB_ID = 0x02U,
  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID = 0x03U,
  HAL_MDMA_XFER_ERROR_CB_ID = 0x04U,
  HAL_MDMA_XFER_ABORT_CB_ID = 0x05U,
  HAL_MDMA_XFER_ALL_CB_ID = 0x06U

}HAL_MDMA_CallbackIDTypeDef;





typedef struct __MDMA_HandleTypeDef
{
  MDMA_Channel_TypeDef *Instance;

  MDMA_InitTypeDef Init;

  HAL_LockTypeDef Lock;

  volatile HAL_MDMA_StateTypeDef State;

  void *Parent;

  void (* XferCpltCallback)( struct __MDMA_HandleTypeDef * hmdma);

  void (* XferBufferCpltCallback)( struct __MDMA_HandleTypeDef * hmdma);

  void (* XferBlockCpltCallback)( struct __MDMA_HandleTypeDef * hmdma);

  void (* XferRepeatBlockCpltCallback)( struct __MDMA_HandleTypeDef * hmdma);

  void (* XferErrorCallback)( struct __MDMA_HandleTypeDef * hmdma);

  void (* XferAbortCallback)( struct __MDMA_HandleTypeDef * hmdma);


  MDMA_LinkNodeTypeDef *FirstLinkedListNodeAddress;





  MDMA_LinkNodeTypeDef *LastLinkedListNodeAddress;



  uint32_t LinkedListNodeCounter;

  volatile uint32_t ErrorCode;

} MDMA_HandleTypeDef;
# 641 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_mdma.h"
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma);
HAL_StatusTypeDef HAL_MDMA_DeInit (MDMA_HandleTypeDef *hmdma);
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData);

HAL_StatusTypeDef HAL_MDMA_RegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID, void (* pCallback)(MDMA_HandleTypeDef *_hmdma));
HAL_StatusTypeDef HAL_MDMA_UnRegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID);
# 658 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_mdma.h"
HAL_StatusTypeDef HAL_MDMA_LinkedList_CreateNode(MDMA_LinkNodeTypeDef *pNode, MDMA_LinkNodeConfTypeDef *pNodeConfig);
HAL_StatusTypeDef HAL_MDMA_LinkedList_AddNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNewNode, MDMA_LinkNodeTypeDef *pPrevNode);
HAL_StatusTypeDef HAL_MDMA_LinkedList_RemoveNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNode);
HAL_StatusTypeDef HAL_MDMA_LinkedList_EnableCircularMode(MDMA_HandleTypeDef *hmdma);
HAL_StatusTypeDef HAL_MDMA_LinkedList_DisableCircularMode(MDMA_HandleTypeDef *hmdma);
# 674 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_mdma.h"
HAL_StatusTypeDef HAL_MDMA_Start (MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount);
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount);
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma);
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma);
HAL_StatusTypeDef HAL_MDMA_PollForTransfer(MDMA_HandleTypeDef *hmdma, HAL_MDMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout);
HAL_StatusTypeDef HAL_MDMA_GenerateSWRequest(MDMA_HandleTypeDef *hmdma);
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma);
# 691 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_mdma.h"
HAL_MDMA_StateTypeDef HAL_MDMA_GetState(MDMA_HandleTypeDef *hmdma);
uint32_t HAL_MDMA_GetError(MDMA_HandleTypeDef *hmdma);
# 314 "./src/main/startup/stm32h7xx_hal_conf.h" 2
# 333 "./src/main/startup/stm32h7xx_hal_conf.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr.h" 1
# 48 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr.h"
typedef struct
{
  uint32_t PVDLevel;




  uint32_t Mode;



}PWR_PVDTypeDef;
# 673 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr_ex.h" 1
# 46 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr_ex.h"
typedef struct
{
  uint32_t AVDLevel;




  uint32_t Mode;



}PWREx_AVDTypeDef;




typedef struct
{
  uint32_t WakeUpPin;




  uint32_t PinPolarity;




  uint32_t PinPull;



}PWREx_WakeupPinTypeDef;
# 510 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr_ex.h"
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource);
uint32_t HAL_PWREx_GetSupplyConfig (void);
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling (uint32_t VoltageScaling);
uint32_t HAL_PWREx_GetVoltageRange (void);
HAL_StatusTypeDef HAL_PWREx_ControlStopModeVoltageScaling (uint32_t VoltageScaling);
uint32_t HAL_PWREx_GetStopModeVoltageRange (void);
# 527 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr_ex.h"
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain);
void HAL_PWREx_EnterSTANDBYMode (uint32_t Domain);
void HAL_PWREx_ConfigD3Domain (uint32_t D3State);

void HAL_PWREx_ClearPendingEvent (void);
# 540 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr_ex.h"
void HAL_PWREx_EnableFlashPowerDown (void);
void HAL_PWREx_DisableFlashPowerDown (void);






void HAL_PWREx_EnableWakeUpPin (PWREx_WakeupPinTypeDef *sPinParams);
void HAL_PWREx_DisableWakeUpPin (uint32_t WakeUpPin);
uint32_t HAL_PWREx_GetWakeupFlag (uint32_t WakeUpFlag);
HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag (uint32_t WakeUpFlag);

void HAL_PWREx_WAKEUP_PIN_IRQHandler (void);
void HAL_PWREx_WKUP1_Callback (void);
void HAL_PWREx_WKUP2_Callback (void);

void HAL_PWREx_WKUP3_Callback (void);

void HAL_PWREx_WKUP4_Callback (void);

void HAL_PWREx_WKUP5_Callback (void);

void HAL_PWREx_WKUP6_Callback (void);
# 572 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr_ex.h"
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void);
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void);

HAL_StatusTypeDef HAL_PWREx_EnableUSBReg (void);
HAL_StatusTypeDef HAL_PWREx_DisableUSBReg (void);
void HAL_PWREx_EnableUSBVoltageDetector (void);
void HAL_PWREx_DisableUSBVoltageDetector (void);

void HAL_PWREx_EnableBatteryCharging (uint32_t ResistorValue);
void HAL_PWREx_DisableBatteryCharging (void);
# 595 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr_ex.h"
void HAL_PWREx_EnableMonitoring (void);
void HAL_PWREx_DisableMonitoring (void);
uint32_t HAL_PWREx_GetTemperatureLevel (void);
uint32_t HAL_PWREx_GetVBATLevel (void);




void HAL_PWREx_ConfigAVD (PWREx_AVDTypeDef *sConfigAVD);
void HAL_PWREx_EnableAVD (void);
void HAL_PWREx_DisableAVD (void);

void HAL_PWREx_PVD_AVD_IRQHandler (void);
void HAL_PWREx_AVDCallback (void);
# 674 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr.h" 2
# 684 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr.h"
void HAL_PWR_DeInit (void);
void HAL_PWR_EnableBkUpAccess (void);
void HAL_PWR_DisableBkUpAccess (void);
# 696 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr.h"
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD);
void HAL_PWR_EnablePVD (void);
void HAL_PWR_DisablePVD (void);


void HAL_PWR_EnableWakeUpPin (uint32_t WakeUpPinPolarity);
void HAL_PWR_DisableWakeUpPin (uint32_t WakeUpPinx);


void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry);
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry);
void HAL_PWR_EnterSTANDBYMode (void);


void HAL_PWR_PVD_IRQHandler (void);
void HAL_PWR_PVDCallback (void);


void HAL_PWR_EnableSleepOnExit (void);
void HAL_PWR_DisableSleepOnExit (void);
void HAL_PWR_EnableSEVOnPend (void);
void HAL_PWR_DisableSEVOnPend (void);
# 334 "./src/main/startup/stm32h7xx_hal_conf.h" 2



# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_qspi.h" 1
# 49 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_qspi.h"
typedef struct
{
  uint32_t ClockPrescaler;

  uint32_t FifoThreshold;

  uint32_t SampleShifting;


  uint32_t FlashSize;




  uint32_t ChipSelectHighTime;


  uint32_t ClockMode;

  uint32_t FlashID;

  uint32_t DualFlash;

}QSPI_InitTypeDef;




typedef enum
{
  HAL_QSPI_STATE_RESET = 0x00U,
  HAL_QSPI_STATE_READY = 0x01U,
  HAL_QSPI_STATE_BUSY = 0x02U,
  HAL_QSPI_STATE_BUSY_INDIRECT_TX = 0x12U,
  HAL_QSPI_STATE_BUSY_INDIRECT_RX = 0x22U,
  HAL_QSPI_STATE_BUSY_AUTO_POLLING = 0x42U,
  HAL_QSPI_STATE_BUSY_MEM_MAPPED = 0x82U,
  HAL_QSPI_STATE_ABORT = 0x08U,
  HAL_QSPI_STATE_ERROR = 0x04U
}HAL_QSPI_StateTypeDef;







typedef struct

{
  QUADSPI_TypeDef *Instance;
  QSPI_InitTypeDef Init;
  uint8_t *pTxBuffPtr;
  volatile uint32_t TxXferSize;
  volatile uint32_t TxXferCount;
  uint8_t *pRxBuffPtr;
  volatile uint32_t RxXferSize;
  volatile uint32_t RxXferCount;
  MDMA_HandleTypeDef *hmdma;
  volatile HAL_LockTypeDef Lock;
  volatile HAL_QSPI_StateTypeDef State;
  volatile uint32_t ErrorCode;
  uint32_t Timeout;
# 125 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_qspi.h"
}QSPI_HandleTypeDef;




typedef struct
{
  uint32_t Instruction;

  uint32_t Address;

  uint32_t AlternateBytes;

  uint32_t AddressSize;

  uint32_t AlternateBytesSize;

  uint32_t DummyCycles;

  uint32_t InstructionMode;

  uint32_t AddressMode;

  uint32_t AlternateByteMode;

  uint32_t DataMode;

  uint32_t NbData;


  uint32_t DdrMode;

  uint32_t DdrHoldHalfCycle;


  uint32_t SIOOMode;

}QSPI_CommandTypeDef;




typedef struct
{
  uint32_t Match;

  uint32_t Mask;

  uint32_t Interval;

  uint32_t StatusBytesSize;

  uint32_t MatchMode;

  uint32_t AutomaticStop;

}QSPI_AutoPollingTypeDef;




typedef struct
{
  uint32_t TimeOutPeriod;

  uint32_t TimeOutActivation;

}QSPI_MemoryMappedTypeDef;
# 560 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_qspi.h"
HAL_StatusTypeDef HAL_QSPI_Init (QSPI_HandleTypeDef *hqspi);
HAL_StatusTypeDef HAL_QSPI_DeInit (QSPI_HandleTypeDef *hqspi);
void HAL_QSPI_MspInit (QSPI_HandleTypeDef *hqspi);
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi);
# 573 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_qspi.h"
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi);


HAL_StatusTypeDef HAL_QSPI_Command (QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout);
HAL_StatusTypeDef HAL_QSPI_Transmit (QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout);
HAL_StatusTypeDef HAL_QSPI_Receive (QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout);
HAL_StatusTypeDef HAL_QSPI_Command_IT (QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd);
HAL_StatusTypeDef HAL_QSPI_Transmit_IT (QSPI_HandleTypeDef *hqspi, uint8_t *pData);
HAL_StatusTypeDef HAL_QSPI_Receive_IT (QSPI_HandleTypeDef *hqspi, uint8_t *pData);
HAL_StatusTypeDef HAL_QSPI_Transmit_DMA (QSPI_HandleTypeDef *hqspi, uint8_t *pData);
HAL_StatusTypeDef HAL_QSPI_Receive_DMA (QSPI_HandleTypeDef *hqspi, uint8_t *pData);


HAL_StatusTypeDef HAL_QSPI_AutoPolling (QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout);
HAL_StatusTypeDef HAL_QSPI_AutoPolling_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg);


HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg);


void HAL_QSPI_ErrorCallback (QSPI_HandleTypeDef *hqspi);
void HAL_QSPI_AbortCpltCallback (QSPI_HandleTypeDef *hqspi);
void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi);


void HAL_QSPI_CmdCpltCallback (QSPI_HandleTypeDef *hqspi);
void HAL_QSPI_RxCpltCallback (QSPI_HandleTypeDef *hqspi);
void HAL_QSPI_TxCpltCallback (QSPI_HandleTypeDef *hqspi);


void HAL_QSPI_StatusMatchCallback (QSPI_HandleTypeDef *hqspi);


void HAL_QSPI_TimeOutCallback (QSPI_HandleTypeDef *hqspi);
# 621 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_qspi.h"
HAL_QSPI_StateTypeDef HAL_QSPI_GetState (QSPI_HandleTypeDef *hqspi);
uint32_t HAL_QSPI_GetError (QSPI_HandleTypeDef *hqspi);
HAL_StatusTypeDef HAL_QSPI_Abort (QSPI_HandleTypeDef *hqspi);
HAL_StatusTypeDef HAL_QSPI_Abort_IT (QSPI_HandleTypeDef *hqspi);
void HAL_QSPI_SetTimeout (QSPI_HandleTypeDef *hqspi, uint32_t Timeout);
HAL_StatusTypeDef HAL_QSPI_SetFifoThreshold(QSPI_HandleTypeDef *hqspi, uint32_t Threshold);
uint32_t HAL_QSPI_GetFifoThreshold(QSPI_HandleTypeDef *hqspi);
HAL_StatusTypeDef HAL_QSPI_SetFlashID (QSPI_HandleTypeDef *hqspi, uint32_t FlashID);
# 338 "./src/main/startup/stm32h7xx_hal_conf.h" 2







# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h" 1
# 47 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h"
typedef enum
{
  HAL_RTC_STATE_RESET = 0x00U,
  HAL_RTC_STATE_READY = 0x01U,
  HAL_RTC_STATE_BUSY = 0x02U,
  HAL_RTC_STATE_TIMEOUT = 0x03U,
  HAL_RTC_STATE_ERROR = 0x04U

} HAL_RTCStateTypeDef;




typedef struct
{
  uint32_t HourFormat;


  uint32_t AsynchPrediv;


  uint32_t SynchPrediv;


  uint32_t OutPut;


  uint32_t OutPutRemap;


  uint32_t OutPutPolarity;


  uint32_t OutPutType;





} RTC_InitTypeDef;




typedef struct
{
  uint8_t Hours;



  uint8_t Minutes;


  uint8_t Seconds;


  uint8_t TimeFormat;


  uint32_t SubSeconds;



  uint32_t SecondFraction;





  uint32_t DayLightSaving;


  uint32_t StoreOperation;


} RTC_TimeTypeDef;




typedef struct
{
  uint8_t WeekDay;


  uint8_t Month;


  uint8_t Date;


  uint8_t Year;


} RTC_DateTypeDef;




typedef struct
{
  RTC_TimeTypeDef AlarmTime;

  uint32_t AlarmMask;


  uint32_t AlarmSubSecondMask;


  uint32_t AlarmDateWeekDaySel;


  uint8_t AlarmDateWeekDay;



  uint32_t Alarm;

} RTC_AlarmTypeDef;







typedef struct

{
  RTC_TypeDef *Instance;

  RTC_InitTypeDef Init;

  HAL_LockTypeDef Lock;

  volatile HAL_RTCStateTypeDef State;
# 233 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h"
} RTC_HandleTypeDef;
# 998 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc_ex.h" 1
# 48 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc_ex.h"
typedef struct
{
  uint32_t Tamper;


  uint32_t Interrupt;


  uint32_t Trigger;


  uint32_t NoErase;


  uint32_t MaskFlag;


  uint32_t Filter;


  uint32_t SamplingFrequency;


  uint32_t PrechargeDuration;


  uint32_t TamperPullUp;


  uint32_t TimeStampOnTamperDetection;

} RTC_TamperTypeDef;
# 1777 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc_ex.h"
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin);
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp_IT(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin);
HAL_StatusTypeDef HAL_RTCEx_DeactivateTimeStamp(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_SetInternalTimeStamp(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_DeactivateInternalTimeStamp(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_GetTimeStamp(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTimeStamp, RTC_DateTypeDef *sTimeStampDate, uint32_t Format);
void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc);
void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_PollForTimeStampEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout);
# 1799 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc_ex.h"
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper);
HAL_StatusTypeDef HAL_RTCEx_SetTamper_IT(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper);
HAL_StatusTypeDef HAL_RTCEx_DeactivateTamper(RTC_HandleTypeDef *hrtc, uint32_t Tamper);

HAL_StatusTypeDef HAL_RTCEx_PollForTamper1Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout);


HAL_StatusTypeDef HAL_RTCEx_PollForTamper2Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout);


HAL_StatusTypeDef HAL_RTCEx_PollForTamper3Event(RTC_HandleTypeDef *hrtc, uint32_t Timeout);


void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc);


void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc);


void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc);







void HAL_RTCEx_InternalTamper1EventCallback(RTC_HandleTypeDef *hrtc);
void HAL_RTCEx_InternalTamper2EventCallback(RTC_HandleTypeDef *hrtc);
void HAL_RTCEx_InternalTamper3EventCallback(RTC_HandleTypeDef *hrtc);
void HAL_RTCEx_InternalTamper4EventCallback(RTC_HandleTypeDef *hrtc);
void HAL_RTCEx_InternalTamper5EventCallback(RTC_HandleTypeDef *hrtc);
void HAL_RTCEx_InternalTamper6EventCallback(RTC_HandleTypeDef *hrtc);
void HAL_RTCEx_InternalTamper8EventCallback(RTC_HandleTypeDef *hrtc);
# 1856 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc_ex.h"
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock);
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock);
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc);
uint32_t HAL_RTCEx_GetWakeUpTimer(RTC_HandleTypeDef *hrtc);
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc);
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_PollForWakeUpTimerEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout);
# 1876 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc_ex.h"
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data);
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister);
# 1891 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc_ex.h"
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef *hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue);
HAL_StatusTypeDef HAL_RTCEx_SetSynchroShift(RTC_HandleTypeDef *hrtc, uint32_t ShiftAdd1S, uint32_t ShiftSubFS);
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput);
HAL_StatusTypeDef HAL_RTCEx_DeactivateCalibrationOutPut(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_DeactivateRefClock(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef *hrtc);
# 1913 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc_ex.h"
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTCEx_PollForAlarmBEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout);
# 999 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h" 2
# 1009 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h"
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc);

void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc);
void HAL_RTC_MspDeInit(RTC_HandleTypeDef *hrtc);
# 1028 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h"
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format);
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format);
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format);
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format);
# 1040 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h"
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format);
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format);
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm);
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format);
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc);
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout);
# 1055 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h"
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc);
# 1064 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h"
HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef *hrtc);
# 1219 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h"
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc);
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc);
uint8_t RTC_ByteToBcd2(uint8_t Value);
uint8_t RTC_Bcd2ToByte(uint8_t Value);
# 346 "./src/main/startup/stm32h7xx_hal_conf.h" 2







# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h" 1
# 29 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_sdmmc.h" 1
# 47 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_sdmmc.h"
typedef struct
{
  uint32_t ClockEdge;


  uint32_t ClockPowerSave;



  uint32_t BusWide;


  uint32_t HardwareFlowControl;


  uint32_t ClockDiv;






}SDMMC_InitTypeDef;





typedef struct
{
  uint32_t Argument;




  uint32_t CmdIndex;


  uint32_t Response;


  uint32_t WaitForInterrupt;



  uint32_t CPSM;


}SDMMC_CmdInitTypeDef;





typedef struct
{
  uint32_t DataTimeOut;

  uint32_t DataLength;

  uint32_t DataBlockSize;


  uint32_t TransferDir;



  uint32_t TransferMode;


  uint32_t DPSM;


}SDMMC_DataInitTypeDef;
# 1007 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_sdmmc.h"
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init);
# 1016 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_sdmmc.h"
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx);
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData);
# 1026 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_sdmmc.h"
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx);
HAL_StatusTypeDef SDMMC_PowerState_Cycle(SDMMC_TypeDef *SDMMCx);
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx);


HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command);
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response);


HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data);
uint32_t SDMMC_GetDataCounter(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_GetFIFOCount(SDMMC_TypeDef *SDMMCx);


HAL_StatusTypeDef SDMMC_SetSDMMCReadWaitMode(SDMMC_TypeDef *SDMMCx, uint32_t SDMMC_ReadWaitMode);


uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize);
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd);
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd);
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd);
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd);
uint32_t SDMMC_CmdEraseStartAdd(SDMMC_TypeDef *SDMMCx, uint32_t StartAdd);
uint32_t SDMMC_CmdSDEraseStartAdd(SDMMC_TypeDef *SDMMCx, uint32_t StartAdd);
uint32_t SDMMC_CmdEraseEndAdd(SDMMC_TypeDef *SDMMCx, uint32_t EndAdd);
uint32_t SDMMC_CmdSDEraseEndAdd(SDMMC_TypeDef *SDMMCx, uint32_t EndAdd);
uint32_t SDMMC_CmdErase(SDMMC_TypeDef *SDMMCx, uint32_t EraseType);
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr);
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument);
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument);
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth);
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument);
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA);
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument);
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx);
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument);
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument);
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument);
# 30 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h" 2

# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_delayblock.h" 1
# 66 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_delayblock.h"
HAL_StatusTypeDef DelayBlock_Enable(DLYB_TypeDef *DLYBx);
HAL_StatusTypeDef DelayBlock_Disable(DLYB_TypeDef *DLYBx);
HAL_StatusTypeDef DelayBlock_Configure(DLYB_TypeDef *DLYBx, uint32_t PhaseSel, uint32_t Units);
# 32 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h" 2
# 51 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h"
typedef enum
{
  HAL_SD_STATE_RESET = ((uint32_t)0x00000000U),
  HAL_SD_STATE_READY = ((uint32_t)0x00000001U),
  HAL_SD_STATE_TIMEOUT = ((uint32_t)0x00000002U),
  HAL_SD_STATE_BUSY = ((uint32_t)0x00000003U),
  HAL_SD_STATE_PROGRAMMING = ((uint32_t)0x00000004U),
  HAL_SD_STATE_RECEIVING = ((uint32_t)0x00000005U),
  HAL_SD_STATE_TRANSFER = ((uint32_t)0x00000006U),
  HAL_SD_STATE_ERROR = ((uint32_t)0x0000000FU)
}HAL_SD_StateTypeDef;







typedef uint32_t HAL_SD_CardStateTypeDef;
# 93 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h"
typedef struct
{
  uint32_t CardType;

  uint32_t CardVersion;

  uint32_t Class;

  uint32_t RelCardAdd;

  uint32_t BlockNbr;

  uint32_t BlockSize;

  uint32_t LogBlockNbr;

  uint32_t LogBlockSize;

  uint32_t CardSpeed;

}HAL_SD_CardInfoTypeDef;







typedef struct

{
  SDMMC_TypeDef *Instance;

  SDMMC_InitTypeDef Init;

  HAL_LockTypeDef Lock;

  uint8_t *pTxBuffPtr;

  uint32_t TxXferSize;

  uint8_t *pRxBuffPtr;

  uint32_t RxXferSize;

  volatile uint32_t Context;

  volatile HAL_SD_StateTypeDef State;

  volatile uint32_t ErrorCode;

  HAL_SD_CardInfoTypeDef SdCard;

  uint32_t CSD[4];

  uint32_t CID[4];
# 166 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h"
}SD_HandleTypeDef;
# 175 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h"
typedef struct
{
  volatile uint8_t CSDStruct;
  volatile uint8_t SysSpecVersion;
  volatile uint8_t Reserved1;
  volatile uint8_t TAAC;
  volatile uint8_t NSAC;
  volatile uint8_t MaxBusClkFrec;
  volatile uint16_t CardComdClasses;
  volatile uint8_t RdBlockLen;
  volatile uint8_t PartBlockRead;
  volatile uint8_t WrBlockMisalign;
  volatile uint8_t RdBlockMisalign;
  volatile uint8_t DSRImpl;
  volatile uint8_t Reserved2;
  volatile uint32_t DeviceSize;
  volatile uint8_t MaxRdCurrentVDDMin;
  volatile uint8_t MaxRdCurrentVDDMax;
  volatile uint8_t MaxWrCurrentVDDMin;
  volatile uint8_t MaxWrCurrentVDDMax;
  volatile uint8_t DeviceSizeMul;
  volatile uint8_t EraseGrSize;
  volatile uint8_t EraseGrMul;
  volatile uint8_t WrProtectGrSize;
  volatile uint8_t WrProtectGrEnable;
  volatile uint8_t ManDeflECC;
  volatile uint8_t WrSpeedFact;
  volatile uint8_t MaxWrBlockLen;
  volatile uint8_t WriteBlockPaPartial;
  volatile uint8_t Reserved3;
  volatile uint8_t ContentProtectAppli;
  volatile uint8_t FileFormatGroup;
  volatile uint8_t CopyFlag;
  volatile uint8_t PermWrProtect;
  volatile uint8_t TempWrProtect;
  volatile uint8_t FileFormat;
  volatile uint8_t ECC;
  volatile uint8_t CSD_CRC;
  volatile uint8_t Reserved4;
}HAL_SD_CardCSDTypeDef;







typedef struct
{
  volatile uint8_t ManufacturerID;
  volatile uint16_t OEM_AppliID;
  volatile uint32_t ProdName1;
  volatile uint8_t ProdName2;
  volatile uint8_t ProdRev;
  volatile uint32_t ProdSN;
  volatile uint8_t Reserved1;
  volatile uint16_t ManufactDate;
  volatile uint8_t CID_CRC;
  volatile uint8_t Reserved2;

}HAL_SD_CardCIDTypeDef;







typedef struct
{
  volatile uint8_t DataBusWidth;
  volatile uint8_t SecuredMode;
  volatile uint16_t CardType;
  volatile uint32_t ProtectedAreaSize;
  volatile uint8_t SpeedClass;
  volatile uint8_t PerformanceMove;
  volatile uint8_t AllocationUnitSize;
  volatile uint16_t EraseSize;
  volatile uint8_t EraseTimeout;
  volatile uint8_t EraseOffset;
  volatile uint8_t UhsSpeedGrade;
  volatile uint8_t UhsAllocationUnitSize;
  volatile uint8_t VideoSpeedClass;
}HAL_SD_CardStatusTypeDef;
# 613 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd_ex.h" 1
# 48 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd_ex.h"
typedef enum
{
  SD_DMA_BUFFER0 = 0x00U,
  SD_DMA_BUFFER1 = 0x01U,

}HAL_SDEx_DMABuffer_MemoryTypeDef;
# 73 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd_ex.h"
HAL_StatusTypeDef HAL_SDEx_ConfigDMAMultiBuffer(SD_HandleTypeDef *hsd, uint32_t * pDataBuffer0, uint32_t * pDataBuffer1, uint32_t BufferSize);
HAL_StatusTypeDef HAL_SDEx_ReadBlocksDMAMultiBuffer(SD_HandleTypeDef *hsd, uint32_t BlockAdd, uint32_t NumberOfBlocks);
HAL_StatusTypeDef HAL_SDEx_WriteBlocksDMAMultiBuffer(SD_HandleTypeDef *hsd, uint32_t BlockAdd, uint32_t NumberOfBlocks);
HAL_StatusTypeDef HAL_SDEx_ChangeDMABuffer(SD_HandleTypeDef *hsd, HAL_SDEx_DMABuffer_MemoryTypeDef Buffer, uint32_t *pDataBuffer);

void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd);
void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd);
void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd);
void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd);
# 614 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h" 2
# 623 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h"
HAL_StatusTypeDef HAL_SD_Init (SD_HandleTypeDef *hsd);
HAL_StatusTypeDef HAL_SD_InitCard (SD_HandleTypeDef *hsd);
HAL_StatusTypeDef HAL_SD_DeInit (SD_HandleTypeDef *hsd);
void HAL_SD_MspInit (SD_HandleTypeDef *hsd);
void HAL_SD_MspDeInit(SD_HandleTypeDef *hsd);
# 636 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h"
HAL_StatusTypeDef HAL_SD_ReadBlocks (SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout);
HAL_StatusTypeDef HAL_SD_WriteBlocks (SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout);
HAL_StatusTypeDef HAL_SD_Erase (SD_HandleTypeDef *hsd, uint32_t BlockStartAdd, uint32_t BlockEndAdd);

HAL_StatusTypeDef HAL_SD_ReadBlocks_IT (SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks);
HAL_StatusTypeDef HAL_SD_WriteBlocks_IT (SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks);

HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA (SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks);
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks);

void HAL_SD_IRQHandler (SD_HandleTypeDef *hsd);


void HAL_SD_TxCpltCallback (SD_HandleTypeDef *hsd);
void HAL_SD_RxCpltCallback (SD_HandleTypeDef *hsd);
void HAL_SD_ErrorCallback (SD_HandleTypeDef *hsd);
void HAL_SD_AbortCallback (SD_HandleTypeDef *hsd);
# 677 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h"
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode);
HAL_StatusTypeDef HAL_SD_ConfigSpeedBusOperation(SD_HandleTypeDef *hsd, uint32_t SpeedMode);







HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd);
HAL_StatusTypeDef HAL_SD_GetCardCID (SD_HandleTypeDef *hsd, HAL_SD_CardCIDTypeDef *pCID);
HAL_StatusTypeDef HAL_SD_GetCardCSD (SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD);
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus);
HAL_StatusTypeDef HAL_SD_GetCardInfo (SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo);







HAL_SD_StateTypeDef HAL_SD_GetState(SD_HandleTypeDef *hsd);
uint32_t HAL_SD_GetError(SD_HandleTypeDef *hsd);







HAL_StatusTypeDef HAL_SD_Abort (SD_HandleTypeDef *hsd);
HAL_StatusTypeDef HAL_SD_Abort_IT(SD_HandleTypeDef *hsd);
# 354 "./src/main/startup/stm32h7xx_hal_conf.h" 2







# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_spi.h" 1
# 47 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_spi.h"
typedef struct
{
  uint32_t Mode;


  uint32_t Direction;


  uint32_t DataSize;


  uint32_t CLKPolarity;


  uint32_t CLKPhase;


  uint32_t NSS;



  uint32_t BaudRatePrescaler;





  uint32_t FirstBit;


  uint32_t TIMode;


  uint32_t CRCCalculation;


  uint32_t CRCPolynomial;


  uint32_t CRCLength;


  uint32_t NSSPMode;





  uint32_t NSSPolarity;



  uint32_t FifoThreshold;


  uint32_t TxCRCInitializationPattern;


  uint32_t RxCRCInitializationPattern;


  uint32_t MasterSSIdleness;



  uint32_t MasterInterDataIdleness;



  uint32_t MasterReceiverAutoSusp;



  uint32_t MasterKeepIOState;


  uint32_t IOSwap;


} SPI_InitTypeDef;




typedef enum
{
  HAL_SPI_STATE_RESET = 0x00UL,
  HAL_SPI_STATE_READY = 0x01UL,
  HAL_SPI_STATE_BUSY = 0x02UL,
  HAL_SPI_STATE_BUSY_TX = 0x03UL,
  HAL_SPI_STATE_BUSY_RX = 0x04UL,
  HAL_SPI_STATE_BUSY_TX_RX = 0x05UL,
  HAL_SPI_STATE_ERROR = 0x06UL,
  HAL_SPI_STATE_ABORT = 0x07UL
} HAL_SPI_StateTypeDef;
# 165 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_spi.h"
typedef struct __SPI_HandleTypeDef
{
  SPI_TypeDef *Instance;

  SPI_InitTypeDef Init;

  uint8_t *pTxBuffPtr;

  uint16_t TxXferSize;

  volatile uint16_t TxXferCount;

  uint8_t *pRxBuffPtr;

  uint16_t RxXferSize;

  volatile uint16_t RxXferCount;

  uint32_t CRCSize;

  void (*RxISR)(struct __SPI_HandleTypeDef *hspi);

  void (*TxISR)(struct __SPI_HandleTypeDef *hspi);

  DMA_HandleTypeDef *hdmatx;

  DMA_HandleTypeDef *hdmarx;

  HAL_LockTypeDef Lock;

  volatile HAL_SPI_StateTypeDef State;

  volatile uint32_t ErrorCode;
# 218 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_spi.h"
} SPI_HandleTypeDef;
# 826 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_spi.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_spi_ex.h" 1
# 52 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_spi_ex.h"
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi);
HAL_StatusTypeDef HAL_SPIEx_EnableLockConfiguration(SPI_HandleTypeDef *hspi);
HAL_StatusTypeDef HAL_SPIEx_ConfigureUnderrun(SPI_HandleTypeDef *hspi, uint32_t UnderrunDetection, uint32_t UnderrunBehaviour);
# 827 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_spi.h" 2
# 838 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_spi.h"
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi);
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi);
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi);
void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi);
# 856 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_spi.h"
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout);
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);

HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size);







HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi);
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi);
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi);


HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi);
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi);

void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi);
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi);
void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi);
# 900 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_spi.h"
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi);
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi);
# 362 "./src/main/startup/stm32h7xx_hal_conf.h" 2
# 373 "./src/main/startup/stm32h7xx_hal_conf.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h" 1
# 47 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
typedef struct
{
  uint32_t Prescaler;


  uint32_t CounterMode;


  uint32_t Period;



  uint32_t ClockDivision;


  uint32_t RepetitionCounter;
# 71 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
  uint32_t AutoReloadPreload;

} TIM_Base_InitTypeDef;




typedef struct
{
  uint32_t OCMode;


  uint32_t Pulse;


  uint32_t OCPolarity;


  uint32_t OCNPolarity;



  uint32_t OCFastMode;




  uint32_t OCIdleState;



  uint32_t OCNIdleState;


} TIM_OC_InitTypeDef;




typedef struct
{
  uint32_t OCMode;


  uint32_t Pulse;


  uint32_t OCPolarity;


  uint32_t OCNPolarity;



  uint32_t OCIdleState;



  uint32_t OCNIdleState;



  uint32_t ICPolarity;


  uint32_t ICSelection;


  uint32_t ICFilter;

} TIM_OnePulse_InitTypeDef;




typedef struct
{
  uint32_t ICPolarity;


  uint32_t ICSelection;


  uint32_t ICPrescaler;


  uint32_t ICFilter;

} TIM_IC_InitTypeDef;




typedef struct
{
  uint32_t EncoderMode;


  uint32_t IC1Polarity;


  uint32_t IC1Selection;


  uint32_t IC1Prescaler;


  uint32_t IC1Filter;


  uint32_t IC2Polarity;


  uint32_t IC2Selection;


  uint32_t IC2Prescaler;


  uint32_t IC2Filter;

} TIM_Encoder_InitTypeDef;




typedef struct
{
  uint32_t ClockSource;

  uint32_t ClockPolarity;

  uint32_t ClockPrescaler;

  uint32_t ClockFilter;

} TIM_ClockConfigTypeDef;




typedef struct
{
  uint32_t ClearInputState;

  uint32_t ClearInputSource;

  uint32_t ClearInputPolarity;

  uint32_t ClearInputPrescaler;

  uint32_t ClearInputFilter;

} TIM_ClearInputConfigTypeDef;






typedef struct
{
  uint32_t MasterOutputTrigger;

  uint32_t MasterOutputTrigger2;

  uint32_t MasterSlaveMode;






} TIM_MasterConfigTypeDef;




typedef struct
{
  uint32_t SlaveMode;

  uint32_t InputTrigger;

  uint32_t TriggerPolarity;

  uint32_t TriggerPrescaler;

  uint32_t TriggerFilter;


} TIM_SlaveConfigTypeDef;






typedef struct
{
  uint32_t OffStateRunMode;

  uint32_t OffStateIDLEMode;

  uint32_t LockLevel;

  uint32_t DeadTime;

  uint32_t BreakState;

  uint32_t BreakPolarity;

  uint32_t BreakFilter;

  uint32_t Break2State;

  uint32_t Break2Polarity;

  uint32_t Break2Filter;

  uint32_t AutomaticOutput;

} TIM_BreakDeadTimeConfigTypeDef;




typedef enum
{
  HAL_TIM_STATE_RESET = 0x00U,
  HAL_TIM_STATE_READY = 0x01U,
  HAL_TIM_STATE_BUSY = 0x02U,
  HAL_TIM_STATE_TIMEOUT = 0x03U,
  HAL_TIM_STATE_ERROR = 0x04U
} HAL_TIM_StateTypeDef;




typedef enum
{
  HAL_TIM_CHANNEL_STATE_RESET = 0x00U,
  HAL_TIM_CHANNEL_STATE_READY = 0x01U,
  HAL_TIM_CHANNEL_STATE_BUSY = 0x02U,
} HAL_TIM_ChannelStateTypeDef;




typedef enum
{
  HAL_DMA_BURST_STATE_RESET = 0x00U,
  HAL_DMA_BURST_STATE_READY = 0x01U,
  HAL_DMA_BURST_STATE_BUSY = 0x02U,
} HAL_TIM_DMABurstStateTypeDef;




typedef enum
{
  HAL_TIM_ACTIVE_CHANNEL_1 = 0x01U,
  HAL_TIM_ACTIVE_CHANNEL_2 = 0x02U,
  HAL_TIM_ACTIVE_CHANNEL_3 = 0x04U,
  HAL_TIM_ACTIVE_CHANNEL_4 = 0x08U,
  HAL_TIM_ACTIVE_CHANNEL_5 = 0x10U,
  HAL_TIM_ACTIVE_CHANNEL_6 = 0x20U,
  HAL_TIM_ACTIVE_CHANNEL_CLEARED = 0x00U
} HAL_TIM_ActiveChannel;







typedef struct

{
  TIM_TypeDef *Instance;
  TIM_Base_InitTypeDef Init;
  HAL_TIM_ActiveChannel Channel;
  DMA_HandleTypeDef *hdma[7];

  HAL_LockTypeDef Lock;
  volatile HAL_TIM_StateTypeDef State;
  volatile HAL_TIM_ChannelStateTypeDef ChannelState[6];
  volatile HAL_TIM_ChannelStateTypeDef ChannelNState[4];
  volatile HAL_TIM_DMABurstStateTypeDef DMABurstState;
# 391 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
} TIM_HandleTypeDef;
# 2108 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim_ex.h" 1
# 48 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim_ex.h"
typedef struct
{
  uint32_t IC1Polarity;


  uint32_t IC1Prescaler;


  uint32_t IC1Filter;


  uint32_t Commutation_Delay;

} TIM_HallSensor_InitTypeDef;





typedef struct
{
  uint32_t Source;

  uint32_t Enable;

  uint32_t Polarity;


}
TIMEx_BreakInputConfigTypeDef;
# 375 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig);
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim);

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim);


HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim);
# 400 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);


HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);


HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 420 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);


HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 439 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel);


HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
# 454 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim_ex.h"
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent(TIM_HandleTypeDef *htim, uint32_t InputTrigger,
                                              uint32_t CommutationSource);
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t InputTrigger,
                                                 uint32_t CommutationSource);
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_DMA(TIM_HandleTypeDef *htim, uint32_t InputTrigger,
                                                  uint32_t CommutationSource);
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig);
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig);

HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim, uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig);

HAL_StatusTypeDef HAL_TIMEx_GroupChannel5(TIM_HandleTypeDef *htim, uint32_t Channels);
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap);
HAL_StatusTypeDef HAL_TIMEx_TISelection(TIM_HandleTypeDef *htim, uint32_t TISelection, uint32_t Channel);
# 480 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim_ex.h"
void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim);
void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim);
void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim);
void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim);
# 493 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim_ex.h"
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_ChannelStateTypeDef HAL_TIMEx_GetChannelNState(TIM_HandleTypeDef *htim, uint32_t ChannelN);
# 508 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim_ex.h"
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma);
void TIMEx_DMACommutationHalfCplt(DMA_HandleTypeDef *hdma);
# 2109 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h" 2
# 2120 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim);
# 2142 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 2164 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 2186 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim);
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 2208 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode);
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel);

HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel);
# 2227 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, TIM_Encoder_InitTypeDef *sConfig);
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim);
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim);
void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim);

HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel);

HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1,
                                            uint32_t *pData2, uint16_t Length);
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel);
# 2250 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim);
# 2260 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef *sConfig, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef *sConfig, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OnePulse_InitTypeDef *sConfig,
                                                 uint32_t OutputChannel, uint32_t InputChannel);
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim, TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel);
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig);
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection);
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig);
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro_IT(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig);
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                              uint32_t BurstRequestSrc, uint32_t *BurstBuffer, uint32_t BurstLength);
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiWriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                                   uint32_t BurstRequestSrc, uint32_t *BurstBuffer, uint32_t BurstLength,
                                                   uint32_t DataLength);
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc);
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                             uint32_t BurstRequestSrc, uint32_t *BurstBuffer, uint32_t BurstLength);
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                                  uint32_t BurstRequestSrc, uint32_t *BurstBuffer, uint32_t BurstLength,
                                                  uint32_t DataLength);
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc);
HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource);
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel);
# 2294 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim);
void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim);
# 2321 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim);
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim);


HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim);
HAL_TIM_ChannelStateTypeDef HAL_TIM_GetChannelState(TIM_HandleTypeDef *htim, uint32_t Channel);
HAL_TIM_DMABurstStateTypeDef HAL_TIM_DMABurstState(TIM_HandleTypeDef *htim);
# 2345 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_tim.h"
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure);
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection, uint32_t TIM_ICFilter);
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config);
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter);

void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma);
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma);
void TIM_DMAError(DMA_HandleTypeDef *hdma);
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma);
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma);
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState);
# 374 "./src/main/startup/stm32h7xx_hal_conf.h" 2



# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h" 1
# 47 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
typedef struct
{
  uint32_t BaudRate;
# 65 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
  uint32_t WordLength;


  uint32_t StopBits;


  uint32_t Parity;






  uint32_t Mode;


  uint32_t HwFlowCtl;



  uint32_t OverSampling;


  uint32_t OneBitSampling;



  uint32_t ClockPrescaler;


} UART_InitTypeDef;




typedef struct
{
  uint32_t AdvFeatureInit;



  uint32_t TxPinLevelInvert;


  uint32_t RxPinLevelInvert;


  uint32_t DataInvert;



  uint32_t Swap;


  uint32_t OverrunDisable;


  uint32_t DMADisableonRxError;


  uint32_t AutoBaudRateEnable;


  uint32_t AutoBaudRateMode;



  uint32_t MSBFirst;

} UART_AdvFeatureInitTypeDef;
# 175 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
typedef uint32_t HAL_UART_StateTypeDef;




typedef enum
{
  UART_CLOCKSOURCE_D2PCLK1 = 0x00U,
  UART_CLOCKSOURCE_D2PCLK2 = 0x01U,
  UART_CLOCKSOURCE_D3PCLK1 = 0x02U,
  UART_CLOCKSOURCE_PLL2 = 0x04U,
  UART_CLOCKSOURCE_PLL3 = 0x08U,
  UART_CLOCKSOURCE_HSI = 0x10U,
  UART_CLOCKSOURCE_CSI = 0x20U,
  UART_CLOCKSOURCE_LSE = 0x40U,
  UART_CLOCKSOURCE_UNDEFINED = 0x80U
} UART_ClockSourceTypeDef;




typedef struct __UART_HandleTypeDef
{
  USART_TypeDef *Instance;

  UART_InitTypeDef Init;

  UART_AdvFeatureInitTypeDef AdvancedInit;

  uint8_t *pTxBuffPtr;

  uint16_t TxXferSize;

  volatile uint16_t TxXferCount;

  uint8_t *pRxBuffPtr;

  uint16_t RxXferSize;

  volatile uint16_t RxXferCount;

  uint16_t Mask;

  uint32_t FifoMode;


  uint16_t NbRxDataToProcess;

  uint16_t NbTxDataToProcess;

  void (*RxISR)(struct __UART_HandleTypeDef *huart);

  void (*TxISR)(struct __UART_HandleTypeDef *huart);

  DMA_HandleTypeDef *hdmatx;

  DMA_HandleTypeDef *hdmarx;

  HAL_LockTypeDef Lock;

  volatile HAL_UART_StateTypeDef gState;



  volatile HAL_UART_StateTypeDef RxState;


  volatile uint32_t ErrorCode;
# 261 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
} UART_HandleTypeDef;
# 1515 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart_ex.h" 1
# 47 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart_ex.h"
typedef struct
{
  uint32_t WakeUpEvent;




  uint16_t AddressLength;


  uint8_t Address;
} UART_WakeUpTypeDef;
# 141 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart_ex.h"
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime);
# 152 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart_ex.h"
void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart);

void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart);
void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart);
# 166 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart_ex.h"
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection);
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UARTEx_DisableStopMode(UART_HandleTypeDef *huart);

HAL_StatusTypeDef HAL_MultiProcessorEx_AddressLength_Set(UART_HandleTypeDef *huart, uint32_t AddressLength);

HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold);
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold);
# 1516 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h" 2




extern const uint16_t UARTPrescTable[12];
# 1533 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength);
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod);
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart);
void HAL_UART_MspInit(UART_HandleTypeDef *huart);
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart);
# 1557 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart);

HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart);

void HAL_UART_IRQHandler(UART_HandleTypeDef *huart);
void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart);
void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart);
# 1593 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue);
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_UART_DisableReceiverTimeout(UART_HandleTypeDef *huart);

HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart);
void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart);
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart);
# 1613 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart);
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart);
# 1631 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart);
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart);
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout);
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart);
# 378 "./src/main/startup/stm32h7xx_hal_conf.h" 2



# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_usart.h" 1
# 47 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_usart.h"
typedef struct
{
  uint32_t BaudRate;







  uint32_t WordLength;


  uint32_t StopBits;


  uint32_t Parity;






  uint32_t Mode;


  uint32_t CLKPolarity;


  uint32_t CLKPhase;


  uint32_t CLKLastBit;



  uint32_t ClockPrescaler;

} USART_InitTypeDef;




typedef enum
{
  HAL_USART_STATE_RESET = 0x00U,
  HAL_USART_STATE_READY = 0x01U,
  HAL_USART_STATE_BUSY = 0x02U,
  HAL_USART_STATE_BUSY_TX = 0x12U,
  HAL_USART_STATE_BUSY_RX = 0x22U,
  HAL_USART_STATE_BUSY_TX_RX = 0x32U,
  HAL_USART_STATE_TIMEOUT = 0x03U,
  HAL_USART_STATE_ERROR = 0x04U
} HAL_USART_StateTypeDef;




typedef enum
{
  USART_CLOCKSOURCE_D2PCLK1 = 0x00U,
  USART_CLOCKSOURCE_D2PCLK2 = 0x01U,
  USART_CLOCKSOURCE_PLL2 = 0x02U,
  USART_CLOCKSOURCE_PLL3 = 0x04U,
  USART_CLOCKSOURCE_HSI = 0x08U,
  USART_CLOCKSOURCE_CSI = 0x10U,
  USART_CLOCKSOURCE_LSE = 0x20U,
  USART_CLOCKSOURCE_UNDEFINED = 0x40U
} USART_ClockSourceTypeDef;




typedef struct __USART_HandleTypeDef
{
  USART_TypeDef *Instance;

  USART_InitTypeDef Init;

  uint8_t *pTxBuffPtr;

  uint16_t TxXferSize;

  volatile uint16_t TxXferCount;

  uint8_t *pRxBuffPtr;

  uint16_t RxXferSize;

  volatile uint16_t RxXferCount;

  uint16_t Mask;

  uint16_t NbRxDataToProcess;

  uint16_t NbTxDataToProcess;

  uint32_t SlaveMode;


  uint32_t FifoMode;


  void (*RxISR)(struct __USART_HandleTypeDef *husart);

  void (*TxISR)(struct __USART_HandleTypeDef *husart);

  DMA_HandleTypeDef *hdmatx;

  DMA_HandleTypeDef *hdmarx;

  HAL_LockTypeDef Lock;

  volatile HAL_USART_StateTypeDef State;

  volatile uint32_t ErrorCode;
# 179 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_usart.h"
} USART_HandleTypeDef;
# 1086 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_usart.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_usart_ex.h" 1
# 242 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_usart_ex.h"
void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart);
void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart);
# 254 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_usart_ex.h"
HAL_StatusTypeDef HAL_USARTEx_EnableSlaveMode(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USARTEx_DisableSlaveMode(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USARTEx_ConfigNSS(USART_HandleTypeDef *husart, uint32_t NSSConfig);
HAL_StatusTypeDef HAL_USARTEx_EnableFifoMode(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold);
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold);
# 1087 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_usart.h" 2
# 1098 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_usart.h"
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USART_DeInit(USART_HandleTypeDef *husart);
void HAL_USART_MspInit(USART_HandleTypeDef *husart);
void HAL_USART_MspDeInit(USART_HandleTypeDef *husart);
# 1119 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_usart.h"
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_USART_TransmitReceive(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData,
                                            uint16_t Size, uint32_t Timeout);
HAL_StatusTypeDef HAL_USART_Transmit_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size);
HAL_StatusTypeDef HAL_USART_Receive_IT(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size);
HAL_StatusTypeDef HAL_USART_TransmitReceive_IT(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData,
                                               uint16_t Size);
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size);
HAL_StatusTypeDef HAL_USART_Receive_DMA(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size);
HAL_StatusTypeDef HAL_USART_TransmitReceive_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint8_t *pRxData,
                                                uint16_t Size);
HAL_StatusTypeDef HAL_USART_DMAPause(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USART_DMAResume(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USART_DMAStop(USART_HandleTypeDef *husart);

HAL_StatusTypeDef HAL_USART_Abort(USART_HandleTypeDef *husart);
HAL_StatusTypeDef HAL_USART_Abort_IT(USART_HandleTypeDef *husart);

void HAL_USART_IRQHandler(USART_HandleTypeDef *husart);
void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_RxHalfCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart);
void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart);
void HAL_USART_AbortCpltCallback(USART_HandleTypeDef *husart);
# 1156 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_usart.h"
HAL_USART_StateTypeDef HAL_USART_GetState(USART_HandleTypeDef *husart);
uint32_t HAL_USART_GetError(USART_HandleTypeDef *husart);
# 382 "./src/main/startup/stm32h7xx_hal_conf.h" 2
# 401 "./src/main/startup/stm32h7xx_hal_conf.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pcd.h" 1
# 29 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pcd.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_usb.h" 1
# 47 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_usb.h"
typedef enum
{
  USB_DEVICE_MODE = 0,
  USB_HOST_MODE = 1,
  USB_DRD_MODE = 2
} USB_OTG_ModeTypeDef;




typedef enum
{
  URB_IDLE = 0,
  URB_DONE,
  URB_NOTREADY,
  URB_NYET,
  URB_ERROR,
  URB_STALL
} USB_OTG_URBStateTypeDef;




typedef enum
{
  HC_IDLE = 0,
  HC_XFRC,
  HC_HALTED,
  HC_NAK,
  HC_NYET,
  HC_STALL,
  HC_XACTERR,
  HC_BBLERR,
  HC_DATATGLERR
} USB_OTG_HCStateTypeDef;




typedef struct
{
  uint32_t dev_endpoints;



  uint32_t Host_channels;



  uint32_t speed;


  uint32_t dma_enable;

  uint32_t ep0_mps;

  uint32_t phy_itface;


  uint32_t Sof_enable;

  uint32_t low_power_enable;

  uint32_t lpm_enable;

  uint32_t battery_charging_enable;

  uint32_t vbus_sensing_enable;

  uint32_t use_dedicated_ep1;

  uint32_t use_external_vbus;
} USB_OTG_CfgTypeDef;

typedef struct
{
  uint8_t num;


  uint8_t is_in;


  uint8_t is_stall;


  uint8_t type;


  uint8_t data_pid_start;


  uint8_t even_odd_frame;


  uint16_t tx_fifo_num;


  uint32_t maxpacket;


  uint8_t *xfer_buff;

  uint32_t dma_addr;

  uint32_t xfer_len;

  uint32_t xfer_count;
} USB_OTG_EPTypeDef;

typedef struct
{
  uint8_t dev_addr;


  uint8_t ch_num;


  uint8_t ep_num;


  uint8_t ep_is_in;


  uint8_t speed;


  uint8_t do_ping;

  uint8_t process_ping;

  uint8_t ep_type;


  uint16_t max_packet;


  uint8_t data_pid;


  uint8_t *xfer_buff;

  uint32_t xfer_len;

  uint32_t xfer_count;

  uint8_t toggle_in;


  uint8_t toggle_out;


  uint32_t dma_addr;

  uint32_t ErrCnt;

  USB_OTG_URBStateTypeDef urb_state;


  USB_OTG_HCStateTypeDef state;

} USB_OTG_HCTypeDef;
# 430 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_usb.h"
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg);
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg);
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx, uint32_t hclk, uint8_t speed);
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode);
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed);
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num);
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep);
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep);
HAL_StatusTypeDef USB_ActivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep);
HAL_StatusTypeDef USB_DeactivateDedicatedEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep);
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma);
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma);
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma);
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len);
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep);
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep);
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address);
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_StopDevice(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup);
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx);
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx);
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx);
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx);
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum);
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx);
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum);
void USB_ClearInterrupts(USB_OTG_GlobalTypeDef *USBx, uint32_t interrupt);

HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg);
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq);
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state);
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx);
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps);
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma);
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num);
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num);
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_OTG_GlobalTypeDef *USBx);
HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_OTG_GlobalTypeDef *USBx);
# 30 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pcd.h" 2
# 49 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pcd.h"
typedef enum
{
  HAL_PCD_STATE_RESET = 0x00,
  HAL_PCD_STATE_READY = 0x01,
  HAL_PCD_STATE_ERROR = 0x02,
  HAL_PCD_STATE_BUSY = 0x03,
  HAL_PCD_STATE_TIMEOUT = 0x04
} PCD_StateTypeDef;


typedef enum
{
  LPM_L0 = 0x00,
  LPM_L1 = 0x01,
  LPM_L2 = 0x02,
  LPM_L3 = 0x03,
} PCD_LPM_StateTypeDef;

typedef enum
{
  PCD_LPM_L0_ACTIVE = 0x00,
  PCD_LPM_L1_ACTIVE = 0x01,
} PCD_LPM_MsgTypeDef;

typedef enum
{
  PCD_BCD_ERROR = 0xFF,
  PCD_BCD_CONTACT_DETECTION = 0xFE,
  PCD_BCD_STD_DOWNSTREAM_PORT = 0xFD,
  PCD_BCD_CHARGING_DOWNSTREAM_PORT = 0xFC,
  PCD_BCD_DEDICATED_CHARGING_PORT = 0xFB,
  PCD_BCD_DISCOVERY_COMPLETED = 0x00,

} PCD_BCD_MsgTypeDef;


typedef USB_OTG_GlobalTypeDef PCD_TypeDef;
typedef USB_OTG_CfgTypeDef PCD_InitTypeDef;
typedef USB_OTG_EPTypeDef PCD_EPTypeDef;
# 96 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pcd.h"
typedef struct

{
  PCD_TypeDef *Instance;
  PCD_InitTypeDef Init;
  volatile uint8_t USB_Address;
  PCD_EPTypeDef IN_ep[16];
  PCD_EPTypeDef OUT_ep[16];
  HAL_LockTypeDef Lock;
  volatile PCD_StateTypeDef State;
  volatile uint32_t ErrorCode;
  uint32_t Setup[12];
  PCD_LPM_StateTypeDef LPM_State;
  uint32_t BESL;


  uint32_t lpm_active;


  uint32_t battery_charging_active;

  void *pData;
# 138 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pcd.h"
} PCD_HandleTypeDef;






# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pcd_ex.h" 1
# 51 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pcd_ex.h"
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size);
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size);



HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCDEx_DeActivateLPM(PCD_HandleTypeDef *hpcd);


HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCDEx_DeActivateBCD(PCD_HandleTypeDef *hpcd);
void HAL_PCDEx_BCD_VBUSDetect(PCD_HandleTypeDef *hpcd);

void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg);
void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg);
# 146 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pcd.h" 2
# 229 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pcd.h"
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd);
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd);
void HAL_PCD_MspDeInit(PCD_HandleTypeDef *hpcd);
# 304 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pcd.h"
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd);
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd);

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd);
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd);

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum);
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum);
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum);
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum);
# 328 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pcd.h"
HAL_StatusTypeDef HAL_PCD_DevConnect(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_DevDisconnect(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address);
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type);
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len);
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len);
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr);
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd);
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd);
# 349 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pcd.h"
PCD_StateTypeDef HAL_PCD_GetState(PCD_HandleTypeDef *hpcd);
# 402 "./src/main/startup/stm32h7xx_hal_conf.h" 2
# 31 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h" 2
# 44 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
typedef enum
{
  HAL_TICK_FREQ_10HZ = 100U,
  HAL_TICK_FREQ_100HZ = 10U,
  HAL_TICK_FREQ_1KHZ = 1U,
  HAL_TICK_FREQ_DEFAULT = HAL_TICK_FREQ_1KHZ
} HAL_TickFreqTypeDef;
# 1022 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
extern volatile uint32_t uwTick;
extern uint32_t uwTickPrio;
extern HAL_TickFreqTypeDef uwTickFreq;







HAL_StatusTypeDef HAL_Init(void);
HAL_StatusTypeDef HAL_DeInit(void);
void HAL_MspInit(void);
void HAL_MspDeInit(void);
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority);


void HAL_IncTick(void);
void HAL_Delay(uint32_t Delay);
uint32_t HAL_GetTick(void);
uint32_t HAL_GetTickPrio(void);
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq);
HAL_TickFreqTypeDef HAL_GetTickFreq(void);
void HAL_SuspendTick(void);
void HAL_ResumeTick(void);
uint32_t HAL_GetHalVersion(void);
uint32_t HAL_GetREVID(void);
uint32_t HAL_GetDEVID(void);
uint32_t HAL_GetUIDw0(void);
uint32_t HAL_GetUIDw1(void);
uint32_t HAL_GetUIDw2(void);

void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface);

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState );

void HAL_SYSCFG_EnableBOOST(void);
void HAL_SYSCFG_DisableBOOST(void);



void HAL_SYSCFG_CM7BootAddConfig(uint32_t BootRegister, uint32_t BootAddress);
# 1073 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
void HAL_EnableCompensationCell(void);
void HAL_DisableCompensationCell(void);
void HAL_SYSCFG_EnableIOSpeedOptimize(void);
void HAL_SYSCFG_DisableIOSpeedOptimize(void);
void HAL_SYSCFG_CompensationCodeSelect(uint32_t SYSCFG_CompCode);
void HAL_SYSCFG_CompensationCodeConfig(uint32_t SYSCFG_PMOSCode, uint32_t SYSCFG_NMOSCode);



void HAL_DBGMCU_EnableDBGSleepMode(void);
void HAL_DBGMCU_DisableDBGSleepMode(void);
void HAL_DBGMCU_EnableDBGStopMode(void);
void HAL_DBGMCU_DisableDBGStopMode(void);
void HAL_DBGMCU_EnableDBGStandbyMode(void);
void HAL_DBGMCU_DisableDBGStandbyMode(void);
# 1096 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
void HAL_EnableDomain3DBGStopMode(void);
void HAL_DisableDomain3DBGStopMode(void);
void HAL_EnableDomain3DBGStandbyMode(void);
void HAL_DisableDomain3DBGStandbyMode(void);
void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge );
void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line);



void HAL_EXTI_D1_ClearFlag(uint32_t EXTI_Line);
void HAL_EXTI_D1_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode, uint32_t EXTI_LineCmd);



void HAL_EXTI_D3_EventInputConfig(uint32_t EXTI_Line, uint32_t EXTI_LineCmd , uint32_t EXTI_ClearSrc);
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig);
uint32_t HAL_GetFMCMemorySwappingConfig(void);
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling);
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode);
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue);
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void);
void HAL_SYSCFG_DisableVREFBUF(void);
# 224 "./lib/main/STM32H7/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h" 2
# 54 "./src/main/platform.h" 2

# 1 "./src/main/startup/system_stm32h7xx.h" 1
# 56 "./src/main/platform.h" 2

# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h" 1
# 54 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
typedef struct
{
  uint32_t TransferDirection;




  uint32_t Mode;




  uint32_t DataWidth;




  uint32_t ClockPolarity;




  uint32_t ClockPhase;




  uint32_t NSS;




  uint32_t BaudRate;





  uint32_t BitOrder;




  uint32_t CRCCalculation;




  uint32_t CRCPoly;




} LL_SPI_InitTypeDef;
# 518 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) |= ((0x1UL << (0U))));
}
# 530 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) &= ~((0x1UL << (0U))));
}







static inline uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CR1) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
# 553 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_EnableIOSwap(SPI_TypeDef *SPIx)
{
  ((SPIx->CFG2) |= ((0x1UL << (15U))));
}
# 565 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_DisableIOSwap(SPI_TypeDef *SPIx)
{
  ((SPIx->CFG2) &= ~((0x1UL << (15U))));
}







static inline uint32_t LL_SPI_IsEnabledIOSwap(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CFG2) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
# 588 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_EnableGPIOControl(SPI_TypeDef *SPIx)
{
  ((SPIx->CFG2) |= ((0x1UL << (31U))));
}
# 600 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_DisableGPIOControl(SPI_TypeDef *SPIx)
{
  ((SPIx->CFG2) &= ~((0x1UL << (31U))));
}







static inline uint32_t LL_SPI_IsEnabledGPIOControl(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CFG2) & ((0x1UL << (31U)))) == ((0x1UL << (31U)))) ? 1UL : 0UL);
}
# 626 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetMode(SPI_TypeDef *SPIx, uint32_t Mode)
{
  (((SPIx->CFG2)) = ((((((SPIx->CFG2))) & (~((0x1UL << (22U))))) | (Mode))));
}
# 639 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetMode(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG2) & ((0x1UL << (22U)))));
}
# 667 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetMasterSSIdleness(SPI_TypeDef *SPIx, uint32_t MasterSSIdleness)
{
  (((SPIx->CFG2)) = ((((((SPIx->CFG2))) & (~((0xFUL << (0U))))) | (MasterSSIdleness))));
}
# 694 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetMasterSSIdleness(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG2) & ((0xFUL << (0U)))));
}
# 722 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetInterDataIdleness(SPI_TypeDef *SPIx, uint32_t MasterInterDataIdleness)
{
  (((SPIx->CFG2)) = ((((((SPIx->CFG2))) & (~((0xFUL << (4U))))) | (MasterInterDataIdleness))));
}
# 749 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetInterDataIdleness(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG2) & ((0xFUL << (4U)))));
}
# 762 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetTransferSize(SPI_TypeDef *SPIx, uint32_t Count)
{
  (((SPIx->CR2)) = ((((((SPIx->CR2))) & (~((0xFFFFUL << (0U))))) | (Count))));
}
# 774 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetTransferSize(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR2) & ((0xFFFFUL << (0U)))));
}
# 787 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetReloadSize(SPI_TypeDef *SPIx, uint32_t Count)
{
  (((SPIx->CR2)) = ((((((SPIx->CR2))) & (~((0xFFFFUL << (16U))))) | (Count << (16U)))));
}
# 799 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetReloadSize(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR2) & ((0xFFFFUL << (16U)))) >> (16U));
}
# 812 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_EnableIOLock(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) |= ((0x1UL << (16U))));
}







static inline uint32_t LL_SPI_IsEnabledIOLock(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CR1) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
# 837 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetTxCRCInitPattern(SPI_TypeDef *SPIx, uint32_t TXCRCInitAll)
{
  (((SPIx->CR1)) = ((((((SPIx->CR1))) & (~((0x1UL << (14U))))) | (TXCRCInitAll))));
}
# 850 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetTxCRCInitPattern(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR1) & ((0x1UL << (15U)))));
}
# 864 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetRxCRCInitPattern(SPI_TypeDef *SPIx, uint32_t RXCRCInitAll)
{
  (((SPIx->CR1)) = ((((((SPIx->CR1))) & (~((0x1UL << (14U))))) | (RXCRCInitAll))));
}
# 877 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetRxCRCInitPattern(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR1) & ((0x1UL << (14U)))));
}
# 892 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetInternalSSLevel(SPI_TypeDef *SPIx, uint32_t SSLevel)
{
  (((SPIx->CR1)) = ((((((SPIx->CR1))) & (~((0x1UL << (12U))))) | (SSLevel))));
}
# 905 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetInternalSSLevel(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR1) & ((0x1UL << (12U)))));
}







static inline void LL_SPI_EnableFullSizeCRC(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) |= ((0x1UL << (13U))));
}







static inline void LL_SPI_DisableFullSizeCRC(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) &= ~((0x1UL << (13U))));
}







static inline uint32_t LL_SPI_IsEnabledFullSizeCRC(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CR1) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}







static inline void LL_SPI_SuspendMasterTransfer(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) |= ((0x1UL << (10U))));
}







static inline void LL_SPI_StartMasterTransfer(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) |= ((0x1UL << (9U))));
}







static inline uint32_t LL_SPI_IsActiveMasterTransfer(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CR1) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}







static inline void LL_SPI_EnableMasterRxAutoSuspend(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) |= ((0x1UL << (8U))));
}







static inline void LL_SPI_DisableMasterRxAutoSuspend(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) &= ~((0x1UL << (8U))));
}







static inline uint32_t LL_SPI_IsEnabledMasterRxAutoSuspend(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CR1) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
# 1020 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetUDRConfiguration(SPI_TypeDef *SPIx, uint32_t UDRConfig)
{
  (((SPIx->CFG1)) = ((((((SPIx->CFG1))) & (~((0x3UL << (9U))))) | (UDRConfig))));
}
# 1034 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetUDRConfiguration(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG1) & ((0x3UL << (9U)))));
}
# 1050 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetUDRDetection(SPI_TypeDef *SPIx, uint32_t UDRDetection)
{
  (((SPIx->CFG1)) = ((((((SPIx->CFG1))) & (~((0x3UL << (11U))))) | (UDRDetection))));
}
# 1064 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetUDRDetection(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG1) & ((0x3UL << (11U)))));
}
# 1079 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  (((SPIx->CFG2)) = ((((((SPIx->CFG2))) & (~((0x7UL << (19U))))) | (Standard))));
}
# 1092 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetStandard(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG2) & ((0x7UL << (19U)))));
}
# 1108 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetClockPhase(SPI_TypeDef *SPIx, uint32_t ClockPhase)
{
  (((SPIx->CFG2)) = ((((((SPIx->CFG2))) & (~((0x1UL << (24U))))) | (ClockPhase))));
}
# 1121 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetClockPhase(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG2) & ((0x1UL << (24U)))));
}
# 1137 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  (((SPIx->CFG2)) = ((((((SPIx->CFG2))) & (~((0x1UL << (25U))))) | (ClockPolarity))));
}
# 1150 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetClockPolarity(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG2) & ((0x1UL << (25U)))));
}
# 1166 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetNSSPolarity(SPI_TypeDef *SPIx, uint32_t NSSPolarity)
{
  (((SPIx->CFG2)) = ((((((SPIx->CFG2))) & (~((0x1UL << (28U))))) | (NSSPolarity))));
}
# 1179 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetNSSPolarity(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG2) & ((0x1UL << (28U)))));
}
# 1201 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t Baudrate)
{
  (((SPIx->CFG1)) = ((((((SPIx->CFG1))) & (~((0x7UL << (28U))))) | (Baudrate))));
}
# 1220 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetBaudRatePrescaler(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG1) & ((0x7UL << (28U)))));
}
# 1236 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetTransferBitOrder(SPI_TypeDef *SPIx, uint32_t BitOrder)
{
  (((SPIx->CFG2)) = ((((((SPIx->CFG2))) & (~((0x1UL << (23U))))) | (BitOrder))));
}
# 1249 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetTransferBitOrder(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG2) & ((0x1UL << (23U)))));
}
# 1268 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  (((SPIx->CR1)) = ((((((SPIx->CR1))) & (~((0x1UL << (11U))))) | (TransferDirection & (0x1UL << (11U))))));
  (((SPIx->CFG2)) = ((((((SPIx->CFG2))) & (~((0x3UL << (17U))))) | (TransferDirection & (0x3UL << (17U))))));
}
# 1286 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetTransferDirection(SPI_TypeDef *SPIx)
{
  uint32_t Hddir = ((SPIx->CR1) & ((0x1UL << (11U))));
  uint32_t Comm = ((SPIx->CFG2) & ((0x3UL << (17U))));
  return (Hddir | Comm);
}
# 1303 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetHalfDuplexDirection(SPI_TypeDef *SPIx, uint32_t HalfDuplexDirection)
{
  (((SPIx->CR1)) = ((((((SPIx->CR1))) & (~((0x1UL << (11U))))) | (HalfDuplexDirection & (0x1UL << (11U))))));
}
# 1317 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetHalfDuplexDirection(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR1) & ((0x1UL << (11U)))) | (0x3UL << (17U)));
}
# 1359 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetDataWidth(SPI_TypeDef *SPIx, uint32_t DataWidth)
{
  (((SPIx->CFG1)) = ((((((SPIx->CFG1))) & (~((0x1FUL << (0U))))) | (DataWidth))));
}
# 1399 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetDataWidth(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG1) & ((0x1FUL << (0U)))));
}
# 1428 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
  (((SPIx->CFG1)) = ((((((SPIx->CFG1))) & (~((0xFUL << (5U))))) | (Threshold))));
}
# 1455 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetFIFOThreshold(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG1) & ((0xFUL << (5U)))));
}
# 1467 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_EnableCRC(SPI_TypeDef *SPIx)
{
  ((SPIx->CFG1) |= ((0x1UL << (22U))));
}







static inline void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  ((SPIx->CFG1) &= ~((0x1UL << (22U))));
}







static inline uint32_t LL_SPI_IsEnabledCRC(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CFG1) & ((0x1UL << (22U)))) == (0x1UL << (22U))) ? 1UL : 0UL);
}
# 1531 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetCRCWidth(SPI_TypeDef *SPIx, uint32_t CRCLength)
{
  (((SPIx->CFG1)) = ((((((SPIx->CFG1))) & (~((0x1FUL << (16U))))) | (CRCLength))));
}
# 1571 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetCRCWidth(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG1) & ((0x1FUL << (16U)))));
}
# 1589 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  (((SPIx->CFG2)) = ((((((SPIx->CFG2))) & (~((0x1UL << (26U)) | (0x1UL << (29U))))) | (NSS))));
}
# 1604 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetNSSMode(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CFG2) & ((0x1UL << (26U)) | (0x1UL << (29U)))));
}
# 1617 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
  ((SPIx->CFG2) |= ((0x1UL << (30U))));
}
# 1630 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
  ((SPIx->CFG2) &= ~((0x1UL << (30U))));
}







static inline uint32_t LL_SPI_IsEnabledNSSPulse(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CFG2) & ((0x1UL << (30U)))) == (0x1UL << (30U))) ? 1UL : 0UL);
}
# 1660 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_IsActiveFlag_RXP(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsActiveFlag_TXP(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsActiveFlag_DXP(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsActiveFlag_EOT(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsActiveFlag_TXTF(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsActiveFlag_UDR(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsActiveFlag_CRCERR(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsActiveFlag_MODF(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsActiveFlag_FRE(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsActiveFlag_TSER(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsActiveFlag_SUSP(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsActiveFlag_TXC(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsActiveFlag_RXWNE(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_GetRemainingDataFrames(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->SR) & ((0xFFFFUL << (16U)))) >> (16U));
}
# 1829 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_SPI_GetRxFIFOPackingLevel(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->SR) & ((0x3UL << (13U)))));
}







static inline void LL_SPI_ClearFlag_EOT(SPI_TypeDef *SPIx)
{
  ((SPIx->IFCR) |= ((0x1UL << (3U))));
}







static inline void LL_SPI_ClearFlag_TXTF(SPI_TypeDef *SPIx)
{
  ((SPIx->IFCR) |= ((0x1UL << (4U))));
}







static inline void LL_SPI_ClearFlag_UDR(SPI_TypeDef *SPIx)
{
  ((SPIx->IFCR) |= ((0x1UL << (5U))));
}







static inline void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  ((SPIx->IFCR) |= ((0x1UL << (6U))));
}







static inline void LL_SPI_ClearFlag_CRCERR(SPI_TypeDef *SPIx)
{
  ((SPIx->IFCR) |= ((0x1UL << (7U))));
}







static inline void LL_SPI_ClearFlag_MODF(SPI_TypeDef *SPIx)
{
  ((SPIx->IFCR) |= ((0x1UL << (9U))));
}







static inline void LL_SPI_ClearFlag_FRE(SPI_TypeDef *SPIx)
{
  ((SPIx->IFCR) |= ((0x1UL << (8U))));
}







static inline void LL_SPI_ClearFlag_TSER(SPI_TypeDef *SPIx)
{
  ((SPIx->IFCR) |= ((0x1UL << (10U))));
}







static inline void LL_SPI_ClearFlag_SUSP(SPI_TypeDef *SPIx)
{
  ((SPIx->IFCR) |= ((0x1UL << (11U))));
}
# 1947 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_EnableIT_RXP(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) |= ((0x1UL << (0U))));
}







static inline void LL_SPI_EnableIT_TXP(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) |= ((0x1UL << (1U))));
}







static inline void LL_SPI_EnableIT_DXP(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) |= ((0x1UL << (2U))));
}







static inline void LL_SPI_EnableIT_EOT(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) |= ((0x1UL << (3U))));
}







static inline void LL_SPI_EnableIT_TXTF(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) |= ((0x1UL << (4U))));
}







static inline void LL_SPI_EnableIT_UDR(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) |= ((0x1UL << (5U))));
}







static inline void LL_SPI_EnableIT_OVR(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) |= ((0x1UL << (6U))));
}







static inline void LL_SPI_EnableIT_CRCERR(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) |= ((0x1UL << (7U))));
}







static inline void LL_SPI_EnableIT_FRE(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) |= ((0x1UL << (8U))));
}







static inline void LL_SPI_EnableIT_MODF(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) |= ((0x1UL << (9U))));
}







static inline void LL_SPI_EnableIT_TSER(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) |= ((0x1UL << (10U))));
}







static inline void LL_SPI_DisableIT_RXP(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) &= ~((0x1UL << (0U))));
}







static inline void LL_SPI_DisableIT_TXP(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) &= ~((0x1UL << (1U))));
}







static inline void LL_SPI_DisableIT_DXP(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) &= ~((0x1UL << (2U))));
}







static inline void LL_SPI_DisableIT_EOT(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) &= ~((0x1UL << (3U))));
}







static inline void LL_SPI_DisableIT_TXTF(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) &= ~((0x1UL << (4U))));
}







static inline void LL_SPI_DisableIT_UDR(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) &= ~((0x1UL << (5U))));
}







static inline void LL_SPI_DisableIT_OVR(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) &= ~((0x1UL << (6U))));
}







static inline void LL_SPI_DisableIT_CRCERR(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) &= ~((0x1UL << (7U))));
}







static inline void LL_SPI_DisableIT_FRE(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) &= ~((0x1UL << (8U))));
}







static inline void LL_SPI_DisableIT_MODF(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) &= ~((0x1UL << (9U))));
}







static inline void LL_SPI_DisableIT_TSER(SPI_TypeDef *SPIx)
{
  ((SPIx->IER) &= ~((0x1UL << (10U))));
}







static inline uint32_t LL_SPI_IsEnabledIT_RXP(SPI_TypeDef *SPIx)
{
  return ((((SPIx->IER) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsEnabledIT_TXP(SPI_TypeDef *SPIx)
{
  return ((((SPIx->IER) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsEnabledIT_DXP(SPI_TypeDef *SPIx)
{
  return ((((SPIx->IER) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsEnabledIT_EOT(SPI_TypeDef *SPIx)
{
  return ((((SPIx->IER) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsEnabledIT_TXTF(SPI_TypeDef *SPIx)
{
  return ((((SPIx->IER) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsEnabledIT_UDR(SPI_TypeDef *SPIx)
{
  return ((((SPIx->IER) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsEnabledIT_OVR(SPI_TypeDef *SPIx)
{
  return ((((SPIx->IER) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsEnabledIT_CRCERR(SPI_TypeDef *SPIx)
{
  return ((((SPIx->IER) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsEnabledIT_FRE(SPI_TypeDef *SPIx)
{
  return ((((SPIx->IER) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsEnabledIT_MODF(SPI_TypeDef *SPIx)
{
  return ((((SPIx->IER) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_SPI_IsEnabledIT_TSER(SPI_TypeDef *SPIx)
{
  return ((((SPIx->IER) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
# 2318 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
  ((SPIx->CFG1) |= ((0x1UL << (14U))));
}







static inline void LL_SPI_DisableDMAReq_RX(SPI_TypeDef *SPIx)
{
  ((SPIx->CFG1) &= ~((0x1UL << (14U))));
}







static inline uint32_t LL_SPI_IsEnabledDMAReq_RX(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CFG1) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}







static inline void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
  ((SPIx->CFG1) |= ((0x1UL << (15U))));
}







static inline void LL_SPI_DisableDMAReq_TX(SPI_TypeDef *SPIx)
{
  ((SPIx->CFG1) &= ~((0x1UL << (15U))));
}







static inline uint32_t LL_SPI_IsEnabledDMAReq_TX(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CFG1) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
# 2392 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (*((volatile uint8_t *)&SPIx->RXDR));
}







static inline uint16_t LL_SPI_ReceiveData16(SPI_TypeDef *SPIx)
{
  return (uint16_t)(((SPIx->RXDR)));
}







static inline uint32_t LL_SPI_ReceiveData32(SPI_TypeDef *SPIx)
{
  return (*((volatile uint32_t *)&SPIx->RXDR));
}
# 2426 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  *((volatile uint8_t *)&SPIx->TXDR) = TxData;
}
# 2438 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{

  volatile uint16_t *spitxdr = ((volatile uint16_t *)&SPIx->TXDR);
  *spitxdr = TxData;



}
# 2455 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_TransmitData32(SPI_TypeDef *SPIx, uint32_t TxData)
{
  *((volatile uint32_t *)&SPIx->TXDR) = TxData;
}
# 2467 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
  ((SPIx->CRCPOLY) = (CRCPoly));
}







static inline uint32_t LL_SPI_GetCRCPolynomial(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CRCPOLY)));
}
# 2490 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_SPI_SetUDRPattern(SPI_TypeDef *SPIx, uint32_t Pattern)
{
  ((SPIx->UDRDR) = (Pattern));
}







static inline uint32_t LL_SPI_GetUDRPattern(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->UDRDR)));
}







static inline uint32_t LL_SPI_GetRxCRC(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->RXCRC)));
}







static inline uint32_t LL_SPI_GetTxCRC(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->TXCRC)));
}
# 2537 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
ErrorStatus LL_SPI_DeInit(SPI_TypeDef *SPIx);
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct);
void LL_SPI_StructInit(LL_SPI_InitTypeDef *SPI_InitStruct);
# 2567 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
typedef struct
{
  uint32_t Mode;




  uint32_t Standard;





  uint32_t DataFormat;





  uint32_t MCLKOutput;





  uint32_t AudioFreq;






  uint32_t ClockPolarity;




} LL_I2S_InitTypeDef;
# 2796 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_SetDataFormat(SPI_TypeDef *SPIx, uint32_t DataLength)
{
  (((SPIx->I2SCFGR)) = ((((((SPIx->I2SCFGR))) & (~((0x3UL << (8U)) | (0x1UL << (10U)) | (0x1UL << (14U))))) | (DataLength))));
}
# 2814 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_I2S_GetDataFormat(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->I2SCFGR) & ((0x3UL << (8U)) | (0x1UL << (10U)) | (0x1UL << (14U)))));
}
# 2829 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_SetChannelLengthType(SPI_TypeDef *SPIx, uint32_t ChannelLengthType)
{
  (((SPIx->I2SCFGR)) = ((((((SPIx->I2SCFGR))) & (~((0x1UL << (12U))))) | (ChannelLengthType))));
}
# 2843 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_I2S_GetChannelLengthType(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->I2SCFGR) & ((0x1UL << (12U)))));
}







static inline void LL_I2S_EnableWordSelectInversion(SPI_TypeDef *SPIx)
{
  ((SPIx->I2SCFGR) |= ((0x1UL << (13U))));
}







static inline void LL_I2S_DisableWordSelectInversion(SPI_TypeDef *SPIx)
{
  ((SPIx->I2SCFGR) &= ~((0x1UL << (13U))));
}







static inline uint32_t LL_I2S_IsEnabledWordSelectInversion(SPI_TypeDef *SPIx)
{
  return ((((SPIx->I2SCFGR) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
# 2890 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  (((SPIx->I2SCFGR)) = ((((((SPIx->I2SCFGR))) & (~((0x1UL << (11U))))) | (ClockPolarity))));
}
# 2903 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_I2S_GetClockPolarity(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->I2SCFGR) & ((0x1UL << (11U)))));
}
# 2921 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  (((SPIx->I2SCFGR)) = ((((((SPIx->I2SCFGR))) & (~((0x3UL << (4U)) | (0x1UL << (7U))))) | (Standard))));
}
# 2938 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_I2S_GetStandard(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->I2SCFGR) & ((0x3UL << (4U)) | (0x1UL << (7U)))));
}
# 2956 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_SetTransferMode(SPI_TypeDef *SPIx, uint32_t Standard)
{
  (((SPIx->I2SCFGR)) = ((((((SPIx->I2SCFGR))) & (~((0x7UL << (1U))))) | (Standard))));
}
# 2973 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_I2S_GetTransferMode(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->I2SCFGR) & ((0x7UL << (1U)))));
}
# 2985 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_Enable(SPI_TypeDef *SPIx)
{
  ((SPIx->I2SCFGR) |= ((0x1UL << (0U))));
  ((SPIx->CR1) |= ((0x1UL << (0U))));
}
# 2998 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_Disable(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) &= ~((0x1UL << (0U))));
  ((SPIx->I2SCFGR) &= ~((0x1UL << (0U))));
}
# 3011 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_EnableIOSwap(SPI_TypeDef *SPIx)
{
  LL_SPI_EnableIOSwap(SPIx);
}
# 3023 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_DisableIOSwap(SPI_TypeDef *SPIx)
{
  LL_SPI_DisableIOSwap(SPIx);
}







static inline uint32_t LL_I2S_IsEnabledIOSwap(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsEnabledIOSwap(SPIx);
}
# 3046 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_EnableGPIOControl(SPI_TypeDef *SPIx)
{
  LL_SPI_EnableGPIOControl(SPIx);
}
# 3058 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_DisableGPIOControl(SPI_TypeDef *SPIx)
{
  LL_SPI_DisableGPIOControl(SPIx);
}







static inline uint32_t LL_I2S_IsEnabledGPIOControl(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsEnabledGPIOControl(SPIx);
}
# 3082 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_EnableIOLock(SPI_TypeDef *SPIx)
{
  LL_SPI_EnableIOLock(SPIx);
}







static inline uint32_t LL_I2S_IsEnabledIOLock(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsEnabledIOLock(SPIx);
}
# 3108 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_SetTransferBitOrder(SPI_TypeDef *SPIx, uint32_t BitOrder)
{
  LL_SPI_SetTransferBitOrder(SPIx, BitOrder);
}
# 3120 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_I2S_GetTransferBitOrder(SPI_TypeDef *SPIx)
{
  return LL_SPI_GetTransferBitOrder(SPIx);
}







static inline void LL_I2S_StartTransfer(SPI_TypeDef *SPIx)
{
  LL_SPI_StartMasterTransfer(SPIx);
}







static inline uint32_t LL_I2S_IsActiveTransfer(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsActiveMasterTransfer(SPIx);
}
# 3163 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_SetFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
  LL_SPI_SetFIFOThreshold(SPIx, Threshold);
}
# 3182 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_I2S_GetFIFOThreshold(SPI_TypeDef *SPIx)
{
  return LL_SPI_GetFIFOThreshold(SPIx);
}
# 3195 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_SetPrescalerLinear(SPI_TypeDef *SPIx, uint32_t PrescalerLinear)
{
  (((SPIx->I2SCFGR)) = ((((((SPIx->I2SCFGR))) & (~((0xFFUL << (16U))))) | ((PrescalerLinear << (16U))))));
}







static inline uint32_t LL_I2S_GetPrescalerLinear(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->I2SCFGR) & ((0xFFUL << (16U)))) >> (16U));
}
# 3220 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_SetPrescalerParity(SPI_TypeDef *SPIx, uint32_t PrescalerParity)
{
  (((SPIx->I2SCFGR)) = ((((((SPIx->I2SCFGR))) & (~((0x1UL << (24U))))) | (PrescalerParity << (24U)))));
}
# 3233 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_I2S_GetPrescalerParity(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->I2SCFGR) & ((0x1UL << (24U)))) >> (24U));
}







static inline void LL_I2S_EnableMasterClock(SPI_TypeDef *SPIx)
{
  ((SPIx->I2SCFGR) |= ((0x1UL << (25U))));
}







static inline void LL_I2S_DisableMasterClock(SPI_TypeDef *SPIx)
{
  ((SPIx->I2SCFGR) &= ~((0x1UL << (25U))));
}







static inline uint32_t LL_I2S_IsEnabledMasterClock(SPI_TypeDef *SPIx)
{
  return ((((SPIx->I2SCFGR) & ((0x1UL << (25U)))) == ((0x1UL << (25U)))) ? 1UL : 0UL);
}
# 3286 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint32_t LL_I2S_IsActiveFlag_RXP(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsActiveFlag_RXP(SPIx);
}







static inline uint32_t LL_I2S_IsActiveFlag_TXP(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsActiveFlag_TXP(SPIx);
}







static inline uint32_t LL_I2S_IsActiveFlag_UDR(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsActiveFlag_UDR(SPIx);
}







static inline uint32_t LL_I2S_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsActiveFlag_OVR(SPIx);
}







static inline uint32_t LL_I2S_IsActiveFlag_FRE(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsActiveFlag_FRE(SPIx);
}







static inline void LL_I2S_ClearFlag_UDR(SPI_TypeDef *SPIx)
{
  LL_SPI_ClearFlag_UDR(SPIx);
}







static inline void LL_I2S_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  LL_SPI_ClearFlag_OVR(SPIx);
}







static inline void LL_I2S_ClearFlag_FRE(SPI_TypeDef *SPIx)
{
  LL_SPI_ClearFlag_FRE(SPIx);
}
# 3382 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_EnableIT_RXP(SPI_TypeDef *SPIx)
{
  LL_SPI_EnableIT_RXP(SPIx);
}







static inline void LL_I2S_EnableIT_TXP(SPI_TypeDef *SPIx)
{
  LL_SPI_EnableIT_TXP(SPIx);
}







static inline void LL_I2S_EnableIT_UDR(SPI_TypeDef *SPIx)
{
  LL_SPI_EnableIT_UDR(SPIx);
}







static inline void LL_I2S_EnableIT_OVR(SPI_TypeDef *SPIx)
{
  LL_SPI_EnableIT_OVR(SPIx);
}







static inline void LL_I2S_EnableIT_FRE(SPI_TypeDef *SPIx)
{
  LL_SPI_EnableIT_FRE(SPIx);
}







static inline void LL_I2S_DisableIT_RXP(SPI_TypeDef *SPIx)
{
  LL_SPI_DisableIT_RXP(SPIx);
}







static inline void LL_I2S_DisableIT_TXP(SPI_TypeDef *SPIx)
{
  LL_SPI_DisableIT_TXP(SPIx);
}







static inline void LL_I2S_DisableIT_UDR(SPI_TypeDef *SPIx)
{
  LL_SPI_DisableIT_UDR(SPIx);
}







static inline void LL_I2S_DisableIT_OVR(SPI_TypeDef *SPIx)
{
  LL_SPI_DisableIT_OVR(SPIx);
}







static inline void LL_I2S_DisableIT_FRE(SPI_TypeDef *SPIx)
{
  LL_SPI_DisableIT_FRE(SPIx);
}







static inline uint32_t LL_I2S_IsEnabledIT_RXP(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsEnabledIT_RXP(SPIx);
}







static inline uint32_t LL_I2S_IsEnabledIT_TXP(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsEnabledIT_TXP(SPIx);
}







static inline uint32_t LL_I2S_IsEnabledIT_UDR(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsEnabledIT_UDR(SPIx);
}







static inline uint32_t LL_I2S_IsEnabledIT_OVR(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsEnabledIT_OVR(SPIx);
}







static inline uint32_t LL_I2S_IsEnabledIT_FRE(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsEnabledIT_FRE(SPIx);
}
# 3555 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
  LL_SPI_EnableDMAReq_RX(SPIx);
}







static inline void LL_I2S_DisableDMAReq_RX(SPI_TypeDef *SPIx)
{
  LL_SPI_DisableDMAReq_RX(SPIx);
}







static inline uint32_t LL_I2S_IsEnabledDMAReq_RX(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsEnabledDMAReq_RX(SPIx);
}







static inline void LL_I2S_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
  LL_SPI_EnableDMAReq_TX(SPIx);
}







static inline void LL_I2S_DisableDMAReq_TX(SPI_TypeDef *SPIx)
{
  LL_SPI_DisableDMAReq_TX(SPIx);
}







static inline uint32_t LL_I2S_IsEnabledDMAReq_TX(SPI_TypeDef *SPIx)
{
  return LL_SPI_IsEnabledDMAReq_TX(SPIx);
}
# 3629 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline uint16_t LL_I2S_ReceiveData16(SPI_TypeDef *SPIx)
{
  return LL_SPI_ReceiveData16(SPIx);
}







static inline uint32_t LL_I2S_ReceiveData32(SPI_TypeDef *SPIx)
{
  return LL_SPI_ReceiveData32(SPIx);
}
# 3652 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
  LL_SPI_TransmitData16(SPIx, TxData);
}
# 3664 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
static inline void LL_I2S_TransmitData32(SPI_TypeDef *SPIx, uint32_t TxData)
{
  LL_SPI_TransmitData32(SPIx, TxData);
}
# 3679 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_spi.h"
ErrorStatus LL_I2S_DeInit(SPI_TypeDef *SPIx);
ErrorStatus LL_I2S_Init(SPI_TypeDef *SPIx, LL_I2S_InitTypeDef *I2S_InitStruct);
void LL_I2S_StructInit(LL_I2S_InitTypeDef *I2S_InitStruct);
void LL_I2S_ConfigPrescaler(SPI_TypeDef *SPIx, uint32_t PrescalerLinear, uint32_t PrescalerParity);
# 58 "./src/main/platform.h" 2
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h" 1
# 64 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
typedef struct
{
  uint32_t Pin;


  uint32_t Mode;




  uint32_t Speed;




  uint32_t OutputType;




  uint32_t Pull;




  uint32_t Alternate;



} LL_GPIO_InitTypeDef;
# 279 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  (((GPIOx->MODER)) = ((((((GPIOx->MODER))) & (~(((Pin * Pin) * (0x3UL << (0U)))))) | (((Pin * Pin) * Mode)))));
}
# 313 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
  return (uint32_t)(((GPIOx->MODER) & (((Pin * Pin) * (0x3UL << (0U))))) / (Pin * Pin));
}
# 347 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
  (((GPIOx->OTYPER)) = ((((((GPIOx->OTYPER))) & (~(PinMask))) | ((PinMask * OutputType)))));
}
# 381 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline uint32_t LL_GPIO_GetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
  return (uint32_t)(((GPIOx->OTYPER) & (Pin)) / Pin);
}
# 418 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Speed)
{
  (((GPIOx->OSPEEDR)) = ((((((GPIOx->OSPEEDR))) & (~(((Pin * Pin) * (0x3UL << (0U)))))) | (((Pin * Pin) * Speed)))));
}
# 454 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline uint32_t LL_GPIO_GetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
  return (uint32_t)(((GPIOx->OSPEEDR) & (((Pin * Pin) * (0x3UL << (0U))))) / (Pin * Pin));
}
# 487 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  (((GPIOx->PUPDR)) = ((((((GPIOx->PUPDR))) & (~(((Pin * Pin) * (0x3UL << (0U)))))) | (((Pin * Pin) * Pull)))));
}
# 519 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline uint32_t LL_GPIO_GetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
  return (uint32_t)(((GPIOx->PUPDR) & (((Pin * Pin) * (0x3UL << (0U))))) / (Pin * Pin));
}
# 558 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  (((GPIOx->AFR[0])) = ((((((GPIOx->AFR[0]))) & (~(((((Pin * Pin) * Pin) * Pin) * (0xFUL << (0U)))))) | (((((Pin * Pin) * Pin) * Pin) * Alternate)))))
                                                       ;
}
# 595 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline uint32_t LL_GPIO_GetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
  return (uint32_t)(((GPIOx->AFR[0]) & (((((Pin * Pin) * Pin) * Pin) * (0xFUL << (0U)))))
                                                                               / (((Pin * Pin) * Pin) * Pin));
}
# 635 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  (((GPIOx->AFR[1])) = ((((((GPIOx->AFR[1]))) & (~((((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * (0xFUL << (0U)))))) | ((((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate)))))
                                                                                       ;
}
# 673 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline uint32_t LL_GPIO_GetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
  return (uint32_t)(((GPIOx->AFR[1]) & ((((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * (0xFUL << (0U)))))
                                                                                                               / ((((Pin >> 8U) *
                                 (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)));
}
# 710 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  volatile uint32_t temp;
  ((GPIOx->LCKR) = ((0x1UL << (16U)) | PinMask));
  ((GPIOx->LCKR) = (PinMask));
  ((GPIOx->LCKR) = ((0x1UL << (16U)) | PinMask));

  temp = ((GPIOx->LCKR));
  (void) temp;
}
# 745 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline uint32_t LL_GPIO_IsPinLocked(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return ((((GPIOx->LCKR) & (PinMask)) == (PinMask)) ? 1UL : 0UL);
}







static inline uint32_t LL_GPIO_IsAnyPinLocked(GPIO_TypeDef *GPIOx)
{
  return ((((GPIOx->LCKR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
# 775 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(((GPIOx->IDR)));
}
# 804 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return ((((GPIOx->IDR) & (PinMask)) == (PinMask)) ? 1UL : 0UL);
}
# 816 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline void LL_GPIO_WriteOutputPort(GPIO_TypeDef *GPIOx, uint32_t PortValue)
{
  ((GPIOx->ODR) = (PortValue));
}







static inline uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(((GPIOx->ODR)));
}
# 856 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline uint32_t LL_GPIO_IsOutputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return ((((GPIOx->ODR) & (PinMask)) == (PinMask)) ? 1UL : 0UL);
}
# 885 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  ((GPIOx->BSRR) = (PinMask));
}
# 914 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  ((GPIOx->BSRR) = (PinMask << 16U));
}
# 943 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
static inline void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  ((GPIOx->ODR) = (((GPIOx->ODR)) ^ PinMask));
}
# 957 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_gpio.h"
ErrorStatus LL_GPIO_DeInit(GPIO_TypeDef *GPIOx);
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct);
void LL_GPIO_StructInit(LL_GPIO_InitTypeDef *GPIO_InitStruct);
# 59 "./src/main/platform.h" 2
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h" 1
# 30 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h" 1
# 730 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_SetRequestID(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel, uint32_t Request)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  (((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR)) = ((((((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR))) & (~((0xFFUL << (0U))))) | (Request))));
}
# 923 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline uint32_t LL_DMAMUX_GetRequestID(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return (uint32_t)(((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR) & ((0xFFUL << (0U)))));
}
# 954 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_SetSyncRequestNb(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel, uint32_t RequestNb)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  (((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR)) = ((((((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR))) & (~((0x1FUL << (19U))))) | ((RequestNb - 1U) << (19U)))));
}
# 984 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline uint32_t LL_DMAMUX_GetSyncRequestNb(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return (uint32_t)((((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR) & ((0x1FUL << (19U)))) >> (19U)) + 1U);
}
# 1019 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_SetSyncPolarity(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel, uint32_t Polarity)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  (((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR)) = ((((((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR))) & (~((0x3UL << (17U))))) | (Polarity))));
}
# 1053 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline uint32_t LL_DMAMUX_GetSyncPolarity(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return (uint32_t)(((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR) & ((0x3UL << (17U)))));
}
# 1083 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_EnableEventGeneration(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR) |= ((0x1UL << (9U))));
}
# 1113 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_DisableEventGeneration(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR) &= ~((0x1UL << (9U))));
}
# 1143 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline uint32_t LL_DMAMUX_IsEnabledEventGeneration(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
# 1173 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_EnableSync(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR) |= ((0x1UL << (16U))));
}
# 1203 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_DisableSync(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR) &= ~((0x1UL << (16U))));
}
# 1233 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline uint32_t LL_DMAMUX_IsEnabledSync(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
# 1288 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_SetSyncID(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel, uint32_t SyncID)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  (((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR)) = ((((((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR))) & (~((0x1FUL << (24U))))) | (SyncID))));
}
# 1342 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline uint32_t LL_DMAMUX_GetSyncID(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return (uint32_t)(((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR) & ((0x1FUL << (24U)))));
}
# 1364 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_EnableRequestGen(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * (RequestGenChannel))))->RGCR) |= ((0x1UL << (16U))));
}
# 1382 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_DisableRequestGen(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * (RequestGenChannel))))->RGCR) &= ~((0x1UL << (16U))));
}
# 1404 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline uint32_t LL_DMAMUX_IsEnabledRequestGen(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * RequestGenChannel)))->RGCR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
# 1431 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_SetRequestGenPolarity(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel, uint32_t Polarity)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  (((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * RequestGenChannel)))->RGCR)) = ((((((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * RequestGenChannel)))->RGCR))) & (~((0x3UL << (17U))))) | (Polarity))));
}
# 1457 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline uint32_t LL_DMAMUX_GetRequestGenPolarity(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return (uint32_t)(((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * RequestGenChannel)))->RGCR) & ((0x3UL << (17U)))));
}
# 1481 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_SetGenRequestNb(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel, uint32_t RequestNb)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  (((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * RequestGenChannel)))->RGCR)) = ((((((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * RequestGenChannel)))->RGCR))) & (~((0x1FUL << (19U))))) | ((RequestNb - 1U) << (19U)))));
}
# 1503 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline uint32_t LL_DMAMUX_GetGenRequestNb(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return (uint32_t)((((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * RequestGenChannel)))->RGCR) & ((0x1FUL << (19U)))) >> (19U)) + 1U);
}
# 1565 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_SetRequestSignalID(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel, uint32_t RequestSignalID)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  (((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * RequestGenChannel)))->RGCR)) = ((((((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * RequestGenChannel)))->RGCR))) & (~((0x1FUL << (0U))))) | (RequestSignalID))));
}
# 1611 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline uint32_t LL_DMAMUX_GetRequestSignalID(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return (uint32_t)(((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * RequestGenChannel)))->RGCR) & ((0x1FUL << (0U)))));
}
# 1632 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO0(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO1(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO2(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO3(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO4(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO5(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO6(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO7(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO8(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO9(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO10(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO11(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO12(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO13(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO14(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_SO15(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CSR) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_RGO0(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGSR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_RGO1(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGSR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_RGO2(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGSR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_RGO3(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGSR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_RGO4(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGSR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_RGO5(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGSR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_RGO6(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGSR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMAMUX_IsActiveFlag_RGO7(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGSR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}







static inline void LL_DMAMUX_ClearFlag_SO0(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (0U))));
}







static inline void LL_DMAMUX_ClearFlag_SO1(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (1U))));
}







static inline void LL_DMAMUX_ClearFlag_SO2(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (2U))));
}







static inline void LL_DMAMUX_ClearFlag_SO3(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (3U))));
}







static inline void LL_DMAMUX_ClearFlag_SO4(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (4U))));
}







static inline void LL_DMAMUX_ClearFlag_SO5(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (5U))));
}







static inline void LL_DMAMUX_ClearFlag_SO6(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (6U))));
}







static inline void LL_DMAMUX_ClearFlag_SO7(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (7U))));
}







static inline void LL_DMAMUX_ClearFlag_SO8(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (8U))));
}







static inline void LL_DMAMUX_ClearFlag_SO9(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (9U))));
}







static inline void LL_DMAMUX_ClearFlag_SO10(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (10U))));
}







static inline void LL_DMAMUX_ClearFlag_SO11(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (11U))));
}







static inline void LL_DMAMUX_ClearFlag_SO12(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (12U))));
}







static inline void LL_DMAMUX_ClearFlag_SO13(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (13U))));
}







static inline void LL_DMAMUX_ClearFlag_SO14(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (14U))));
}







static inline void LL_DMAMUX_ClearFlag_SO15(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_ChannelStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0080UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->CFR) |= ((0x1UL << (15U))));
}







static inline void LL_DMAMUX_ClearFlag_RGO0(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGCFR) |= ((0x1UL << (0U))));
}







static inline void LL_DMAMUX_ClearFlag_RGO1(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGCFR) |= ((0x1UL << (1U))));
}







static inline void LL_DMAMUX_ClearFlag_RGO2(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGCFR) |= ((0x1UL << (2U))));
}







static inline void LL_DMAMUX_ClearFlag_RGO3(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGCFR) |= ((0x1UL << (3U))));
}







static inline void LL_DMAMUX_ClearFlag_RGO4(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGCFR) |= ((0x1UL << (4U))));
}







static inline void LL_DMAMUX_ClearFlag_RGO5(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGCFR) |= ((0x1UL << (5U))));
}







static inline void LL_DMAMUX_ClearFlag_RGO6(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGCFR) |= ((0x1UL << (6U))));
}







static inline void LL_DMAMUX_ClearFlag_RGO7(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_RequestGenStatus_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0140UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL))))->RGCFR) |= ((0x1UL << (7U))));
}
# 2281 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_EnableIT_SO(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_Channel_TypeDef *)((uint32_t)(dmamux_base_addr + (0x00000004U * (Channel)))))->CCR) |= ((0x1UL << (8U))));
}
# 2311 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_DisableIT_SO(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_Channel_TypeDef *)((uint32_t)(dmamux_base_addr + (0x00000004U * (Channel)))))->CCR) &= ~((0x1UL << (8U))));
}
# 2341 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline uint32_t LL_DMAMUX_IsEnabledIT_SO(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return (((((DMAMUX_Channel_TypeDef *)(dmamux_base_addr + (0x00000004U * (Channel))))->CCR) & ((0x1UL << (8U)))));
}
# 2363 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_EnableIT_RGO(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * RequestGenChannel)))->RGCR) |= ((0x1UL << (8U))));
}
# 2385 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline void LL_DMAMUX_DisableIT_RGO(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  ((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * RequestGenChannel)))->RGCR) &= ~((0x1UL << (8U))));
}
# 2407 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dmamux.h"
static inline uint32_t LL_DMAMUX_IsEnabledIT_RGO(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  uint32_t dmamux_base_addr = (uint32_t)DMAMUXx;

  return ((((((DMAMUX_RequestGen_TypeDef *)(dmamux_base_addr + (((((0x40000000UL) + 0x00020000UL) + 0x0800UL) + 0x0100UL) - (((0x40000000UL) + 0x00020000UL) + 0x0800UL)) + (0x00000004U * RequestGenChannel)))->RGCR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
# 31 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h" 2
# 48 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static const uint8_t LL_DMA_STR_OFFSET_TAB[] =
{
  (uint8_t)(((((0x40000000UL) + 0x00020000UL) + 0x0000UL) + 0x010UL) - (((0x40000000UL) + 0x00020000UL) + 0x0000UL)),
  (uint8_t)(((((0x40000000UL) + 0x00020000UL) + 0x0000UL) + 0x028UL) - (((0x40000000UL) + 0x00020000UL) + 0x0000UL)),
  (uint8_t)(((((0x40000000UL) + 0x00020000UL) + 0x0000UL) + 0x040UL) - (((0x40000000UL) + 0x00020000UL) + 0x0000UL)),
  (uint8_t)(((((0x40000000UL) + 0x00020000UL) + 0x0000UL) + 0x058UL) - (((0x40000000UL) + 0x00020000UL) + 0x0000UL)),
  (uint8_t)(((((0x40000000UL) + 0x00020000UL) + 0x0000UL) + 0x070UL) - (((0x40000000UL) + 0x00020000UL) + 0x0000UL)),
  (uint8_t)(((((0x40000000UL) + 0x00020000UL) + 0x0000UL) + 0x088UL) - (((0x40000000UL) + 0x00020000UL) + 0x0000UL)),
  (uint8_t)(((((0x40000000UL) + 0x00020000UL) + 0x0000UL) + 0x0A0UL) - (((0x40000000UL) + 0x00020000UL) + 0x0000UL)),
  (uint8_t)(((((0x40000000UL) + 0x00020000UL) + 0x0000UL) + 0x0B8UL) - (((0x40000000UL) + 0x00020000UL) + 0x0000UL))
};
# 82 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
typedef struct
{
  uint32_t PeriphOrM2MSrcAddress;




  uint32_t MemoryOrM2MDstAddress;




  uint32_t Direction;





  uint32_t Mode;






  uint32_t PeriphOrM2MSrcIncMode;





  uint32_t MemoryOrM2MDstIncMode;





  uint32_t PeriphOrM2MSrcDataSize;





  uint32_t MemoryOrM2MDstDataSize;





  uint32_t NbData;






  uint32_t PeriphRequest;




  uint32_t Priority;




  uint32_t FIFOMode;






  uint32_t FIFOThreshold;




  uint32_t MemBurst;







  uint32_t PeriphBurst;







} LL_DMA_InitTypeDef;
# 476 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) |= ((0x1UL << (0U))));
}
# 498 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) &= ~((0x1UL << (0U))));
}
# 520 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_IsEnabledStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return ((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
# 557 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Configuration)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR))) & (~((0x3UL << (6U)) | (0x1UL << (8U)) | (0x1UL << (9U)) | (0x1UL << (10U)) | (0x3UL << (11U)) | (0x3UL << (13U)) | (0x3UL << (16U)) | (0x1UL << (5U))))) | (Configuration))))

                           ;
}
# 585 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Direction)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR))) & (~((0x3UL << (6U))))) | (Direction))));
}
# 610 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x3UL << (6U)))));
}
# 637 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR))) & (~((0x1UL << (8U)) | (0x1UL << (5U))))) | (Mode))));
}
# 663 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x1UL << (8U)) | (0x1UL << (5U)))));
}
# 688 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR))) & (~((0x1UL << (9U))))) | (IncrementMode))));
}
# 712 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x1UL << (9U)))));
}
# 737 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR))) & (~((0x1UL << (10U))))) | (IncrementMode))));
}
# 761 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x1UL << (10U)))));
}
# 787 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Size)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR))) & (~((0x3UL << (11U))))) | (Size))));
}
# 812 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x3UL << (11U)))));
}
# 838 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Size)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR))) & (~((0x3UL << (13U))))) | (Size))));
}
# 863 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x3UL << (13U)))));
}
# 888 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetIncOffsetSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t OffsetSize)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR))) & (~((0x1UL << (15U))))) | (OffsetSize))));
}
# 912 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetIncOffsetSize(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x1UL << (15U)))));
}
# 939 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Priority)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR))) & (~((0x3UL << (16U))))) | (Priority))));
}
# 965 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x3UL << (16U)))));
}
# 987 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_EnableBufferableTransfer(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) |= ((0x1UL << (20U))));
}
# 1009 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_DisableBufferableTransfer(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) &= ~((0x1UL << (20U))));
}
# 1034 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t NbData)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR))) & (~((0xFFFFUL << (0U))))) | (NbData))));
}
# 1058 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR) & ((0xFFFFUL << (0U)))));
}
# 1221 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Request)
{
  (((((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x0800UL))) + (0x00000004U * (Stream)) + (uint32_t)(0x00000004U * (((uint32_t)(DMAx) == ((uint32_t)((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x0000UL)))) ? 0UL : 8UL))))->CCR)) = ((((((((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x0800UL))) + (0x00000004U * (Stream)) + (uint32_t)(0x00000004U * (((uint32_t)(DMAx) == ((uint32_t)((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x0000UL)))) ? 0UL : 8UL))))->CCR))) & (~((0xFFUL << (0U))))) | (Request))));
}
# 1382 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Stream)
{
  return (((((DMAMUX_Channel_TypeDef *)((uint32_t)((uint32_t)((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x0800UL))) + (0x00000004U * (Stream)) + (uint32_t)(0x00000004U * (((uint32_t)(DMAx) == ((uint32_t)((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x0000UL)))) ? 0UL : 8UL)))))->CCR) & ((0xFFUL << (0U)))));
}
# 1407 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetMemoryBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mburst)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR))) & (~((0x3UL << (23U))))) | (Mburst))));
}
# 1433 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetMemoryBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x3UL << (23U)))));
}
# 1460 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetPeriphBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Pburst)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR))) & (~((0x3UL << (21U))))) | (Pburst))));
}
# 1486 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetPeriphBurstxfer(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x3UL << (21U)))));
}
# 1511 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetCurrentTargetMem(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t CurrentMemory)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR))) & (~((0x1UL << (19U))))) | (CurrentMemory))));
}
# 1535 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetCurrentTargetMem(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x1UL << (19U)))));
}
# 1557 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_EnableDoubleBufferMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) |= ((0x1UL << (18U))));
}
# 1579 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_DisableDoubleBufferMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) &= ~((0x1UL << (18U))));
}
# 1607 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetFIFOStatus(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR) & ((0x7UL << (3U)))));
}
# 1629 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR) &= ~((0x1UL << (2U))));
}
# 1651 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_EnableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR) |= ((0x1UL << (2U))));
}
# 1678 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetFIFOThreshold(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Threshold)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR))) & (~((0x3UL << (0U))))) | (Threshold))));
}
# 1704 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetFIFOThreshold(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR) & ((0x3UL << (0U)))));
}
# 1735 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_ConfigFifo(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t FifoMode, uint32_t FifoThreshold)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR))) & (~((0x3UL << (0U)) | (0x1UL << (2U))))) | (FifoMode | FifoThreshold))));
}
# 1765 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;


  if (Direction == (0x1UL << (6U)))
  {
    ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR) = (SrcAddress));
    ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR) = (DstAddress));
  }

  else
  {
    ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR) = (SrcAddress));
    ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR) = (DstAddress));
  }
}
# 1801 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR) = (MemoryAddress));
}
# 1826 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR) = (PeriphAddress));
}
# 1849 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR)));
}
# 1872 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR)));
}
# 1897 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR) = (MemoryAddress));
}
# 1922 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR) = (MemoryAddress));
}
# 1945 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR)));
}
# 1968 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR)));
}
# 1991 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_SetMemory1Address(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Address)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  (((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M1AR)) = ((((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M1AR))) & (~((0xFFFFFFFFUL << (0U))))) | (Address))));
}
# 2013 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_GetMemory1Address(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return (((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M1AR);
}
# 2034 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_IsActiveFlag_HT0(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_HT2(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (20U)))) == ((0x1UL << (20U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_HT3(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (26U)))) == ((0x1UL << (26U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_HT4(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_HT5(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (20U)))) == ((0x1UL << (20U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_HT7(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (26U)))) == ((0x1UL << (26U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TC0(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (21U)))) == ((0x1UL << (21U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (27U)))) == ((0x1UL << (27U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (21U)))) == ((0x1UL << (21U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (27U)))) == ((0x1UL << (27U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TE0(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (19U)))) == ((0x1UL << (19U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (25U)))) == ((0x1UL << (25U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TE4(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (19U)))) == ((0x1UL << (19U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_TE7(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (25U)))) == ((0x1UL << (25U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_DME0(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_DME1(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_DME2(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (18U)))) == ((0x1UL << (18U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_DME3(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (24U)))) == ((0x1UL << (24U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_DME4(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_DME5(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_DME6(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (18U)))) == ((0x1UL << (18U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_DME7(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (24U)))) == ((0x1UL << (24U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_FE0(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_FE1(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_FE2(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_FE3(DMA_TypeDef *DMAx)
{
  return ((((DMAx->LISR) & ((0x1UL << (22U)))) == ((0x1UL << (22U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_FE4(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_FE5(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_FE6(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}







static inline uint32_t LL_DMA_IsActiveFlag_FE7(DMA_TypeDef *DMAx)
{
  return ((((DMAx->HISR) & ((0x1UL << (22U)))) == ((0x1UL << (22U)))) ? 1UL : 0UL);
}







static inline void LL_DMA_ClearFlag_HT0(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (4U))));
}







static inline void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (10U))));
}







static inline void LL_DMA_ClearFlag_HT2(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (20U))));
}







static inline void LL_DMA_ClearFlag_HT3(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (26U))));
}







static inline void LL_DMA_ClearFlag_HT4(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (4U))));
}







static inline void LL_DMA_ClearFlag_HT5(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (10U))));
}







static inline void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (20U))));
}







static inline void LL_DMA_ClearFlag_HT7(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (26U))));
}







static inline void LL_DMA_ClearFlag_TC0(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (5U))));
}







static inline void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (11U))));
}







static inline void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (21U))));
}







static inline void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (27U))));
}







static inline void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (5U))));
}







static inline void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (11U))));
}







static inline void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (21U))));
}







static inline void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (27U))));
}







static inline void LL_DMA_ClearFlag_TE0(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (3U))));
}







static inline void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (9U))));
}







static inline void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (19U))));
}







static inline void LL_DMA_ClearFlag_TE3(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (25U))));
}







static inline void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (3U))));
}







static inline void LL_DMA_ClearFlag_TE5(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (9U))));
}







static inline void LL_DMA_ClearFlag_TE6(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (19U))));
}







static inline void LL_DMA_ClearFlag_TE7(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (25U))));
}







static inline void LL_DMA_ClearFlag_DME0(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (2U))));
}







static inline void LL_DMA_ClearFlag_DME1(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (8U))));
}







static inline void LL_DMA_ClearFlag_DME2(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (18U))));
}







static inline void LL_DMA_ClearFlag_DME3(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (24U))));
}







static inline void LL_DMA_ClearFlag_DME4(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (2U))));
}







static inline void LL_DMA_ClearFlag_DME5(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (8U))));
}







static inline void LL_DMA_ClearFlag_DME6(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (18U))));
}







static inline void LL_DMA_ClearFlag_DME7(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (24U))));
}







static inline void LL_DMA_ClearFlag_FE0(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (0U))));
}







static inline void LL_DMA_ClearFlag_FE1(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (6U))));
}







static inline void LL_DMA_ClearFlag_FE2(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (16U))));
}







static inline void LL_DMA_ClearFlag_FE3(DMA_TypeDef *DMAx)
{
  ((DMAx->LIFCR) = ((0x1UL << (22U))));
}







static inline void LL_DMA_ClearFlag_FE4(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (0U))));
}







static inline void LL_DMA_ClearFlag_FE5(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (6U))));
}







static inline void LL_DMA_ClearFlag_FE6(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (16U))));
}







static inline void LL_DMA_ClearFlag_FE7(DMA_TypeDef *DMAx)
{
  ((DMAx->HIFCR) = ((0x1UL << (22U))));
}
# 2931 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) |= ((0x1UL << (3U))));
}
# 2953 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) |= ((0x1UL << (2U))));
}
# 2975 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) |= ((0x1UL << (4U))));
}
# 2997 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_EnableIT_DME(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) |= ((0x1UL << (1U))));
}
# 3019 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_EnableIT_FE(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR) |= ((0x1UL << (7U))));
}
# 3041 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) &= ~((0x1UL << (3U))));
}
# 3063 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_DisableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) &= ~((0x1UL << (2U))));
}
# 3085 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) &= ~((0x1UL << (4U))));
}
# 3107 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_DisableIT_DME(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) &= ~((0x1UL << (1U))));
}
# 3129 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline void LL_DMA_DisableIT_FE(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  ((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR) &= ~((0x1UL << (7U))));
}
# 3151 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return ((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x1UL << (3U)))) == (0x1UL << (3U))) ? 1UL : 0UL);
}
# 3173 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_IsEnabledIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return ((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x1UL << (2U)))) == (0x1UL << (2U))) ? 1UL : 0UL);
}
# 3195 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return ((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x1UL << (4U)))) == (0x1UL << (4U))) ? 1UL : 0UL);
}
# 3217 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_IsEnabledIT_DME(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return ((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR) & ((0x1UL << (1U)))) == (0x1UL << (1U))) ? 1UL : 0UL);
}
# 3239 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
static inline uint32_t LL_DMA_IsEnabledIT_FE(DMA_TypeDef *DMAx, uint32_t Stream)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;

  return ((((((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR) & ((0x1UL << (7U)))) == (0x1UL << (7U))) ? 1UL : 0UL);
}
# 3255 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_dma.h"
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Stream, LL_DMA_InitTypeDef *DMA_InitStruct);
uint32_t LL_DMA_DeInit(DMA_TypeDef *DMAx, uint32_t Stream);
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct);
# 60 "./src/main/platform.h" 2
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h" 1
# 49 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
extern const uint8_t LL_RCC_PrescTable[16];
# 119 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
typedef struct
{
  uint32_t SYSCLK_Frequency;
  uint32_t CPUCLK_Frequency;
  uint32_t HCLK_Frequency;
  uint32_t PCLK1_Frequency;
  uint32_t PCLK2_Frequency;
  uint32_t PCLK3_Frequency;
  uint32_t PCLK4_Frequency;
} LL_RCC_ClocksTypeDef;
# 137 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
typedef struct
{
  uint32_t PLL_P_Frequency;
  uint32_t PLL_Q_Frequency;
  uint32_t PLL_R_Frequency;
} LL_PLL_ClocksTypeDef;
# 1621 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_HSE_EnableCSS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) |= ((0x1UL << (19U))));
}






static inline void LL_RCC_HSE_EnableBypass(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) |= ((0x1UL << (18U))));
}






static inline void LL_RCC_HSE_DisableBypass(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) &= ~((0x1UL << (18U))));
}
# 1673 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_HSE_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) |= ((0x1UL << (16U))));
}






static inline void LL_RCC_HSE_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) &= ~((0x1UL << (16U))));
}






static inline uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) & ((0x1UL << (17U)))) == ((0x1UL << (17U))))?1UL:0UL);
}
# 1711 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_HSI_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) |= ((0x1UL << (0U))));
}






static inline void LL_RCC_HSI_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) &= ~((0x1UL << (0U))));
}






static inline uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) & ((0x1UL << (2U)))) == ((0x1UL << (2U))))?1UL:0UL);
}






static inline uint32_t LL_RCC_HSI_IsDividerReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) & ((0x1UL << (5U)))) == ((0x1UL << (5U))))?1UL:0UL);
}
# 1756 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_HSI_SetDivider(uint32_t Divider)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR))) & (~((0x3UL << (3U))))) | (Divider))));
}
# 1770 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_HSI_GetDivider(void)
{
  return (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) & ((0x3UL << (3U)))));
}






static inline void LL_RCC_HSI_EnableStopMode(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) |= ((0x1UL << (1U))));
}






static inline void LL_RCC_HSI_DisableStopMode(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) &= ~((0x1UL << (1U))));
}
# 1802 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_HSI_GetCalibration(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->HSICFGR) & ((0xFFFUL << (0U)))) >> (0U));
}
# 1816 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{

  if ((((DBGMCU_TypeDef *) (0x5C001000UL))->IDCODE & 0xF0000000U) == 0x10000000U)
  {

    (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->HSICFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->HSICFGR))) & (~(0x3F000U))) | (Value << 12U))));
  }
  else
  {

    (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->HSICFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->HSICFGR))) & (~((0x7FUL << (24U))))) | (Value << (24U)))));
  }



}






static inline uint32_t LL_RCC_HSI_GetCalibTrimming(void)
{

  if ((((DBGMCU_TypeDef *) (0x5C001000UL))->IDCODE & 0xF0000000U) == 0x10000000U)
  {

    return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->HSICFGR) & (0x3F000U)) >> 12U);
  }
  else
  {

    return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->HSICFGR) & ((0x7FUL << (24U)))) >> (24U));
  }



}
# 1870 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_CSI_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) |= ((0x1UL << (7U))));
}






static inline void LL_RCC_CSI_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) &= ~((0x1UL << (7U))));
}






static inline uint32_t LL_RCC_CSI_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) & ((0x1UL << (8U)))) == ((0x1UL << (8U))))?1UL:0UL);
}






static inline void LL_RCC_CSI_EnableStopMode(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) |= ((0x1UL << (9U))));
}






static inline void LL_RCC_CSI_DisableStopMode(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) &= ~((0x1UL << (9U))));
}
# 1922 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_CSI_GetCalibration(void)
{

  if ((((DBGMCU_TypeDef *) (0x5C001000UL))->IDCODE & 0xF0000000U) == 0x10000000U)
  {

    return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->HSICFGR) & (0x3FC0000U)) >> 18U);
  }
  else
  {

    return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CSICFGR) & ((0xFFUL << (0U)))) >> (0U));
  }



}
# 1949 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_CSI_SetCalibTrimming(uint32_t Value)
{

  if ((((DBGMCU_TypeDef *) (0x5C001000UL))->IDCODE & 0xF0000000U) == 0x10000000U)
  {

    (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->HSICFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->HSICFGR))) & (~(0x7C000000U))) | (Value << 26U))));
  }
  else
  {

    (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CSICFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CSICFGR))) & (~((0x3FUL << (24U))))) | (Value << (24U)))));
  }



}






static inline uint32_t LL_RCC_CSI_GetCalibTrimming(void)
{

  if ((((DBGMCU_TypeDef *) (0x5C001000UL))->IDCODE & 0xF0000000U) == 0x10000000U)
  {

    return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->HSICFGR) & (0x7C000000U)) >> 26U);
  }
  else
  {

    return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CSICFGR) & ((0x3FUL << (24U)))) >> (24U));
  }



}
# 2003 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_HSI48_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) |= ((0x1UL << (12U))));
}






static inline void LL_RCC_HSI48_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) &= ~((0x1UL << (12U))));
}






static inline uint32_t LL_RCC_HSI48_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) & ((0x1UL << (13U)))) == ((0x1UL << (13U))))?1UL:0UL);
}
# 2035 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_HSI48_GetCalibration(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CRRCR) & ((0x3FFUL << (0U)))) >> (0U));
}
# 2054 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_D1CK_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) & ((0x1UL << (14U)))) == ((0x1UL << (14U))))?1UL:0UL);
}
# 2095 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_D2CK_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) & ((0x1UL << (15U)))) == ((0x1UL << (15U))))?1UL:0UL);
}
# 2133 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_WWDG1_EnableSystemReset(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->GCR) |= ((0x1UL << (0U))));
}






static inline uint32_t LL_RCC_WWDG1_IsSystemReset(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->GCR) & ((0x1UL << (0U)))) == (0x1UL << (0U)))?1UL:0UL);
}
# 2235 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_LSE_EnableCSS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR) |= ((0x1UL << (5U))));
}






static inline uint32_t LL_RCC_LSE_IsFailureDetected(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR) & ((0x1UL << (6U)))) == ((0x1UL << (6U))))?1UL:0UL);
}






static inline void LL_RCC_LSE_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR) |= ((0x1UL << (0U))));
}






static inline void LL_RCC_LSE_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR) &= ~((0x1UL << (0U))));
}






static inline void LL_RCC_LSE_EnableBypass(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR) |= ((0x1UL << (2U))));
}






static inline void LL_RCC_LSE_DisableBypass(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR) &= ~((0x1UL << (2U))));
}
# 2327 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR))) & (~((0x3UL << (3U))))) | (LSEDrive))));
}
# 2341 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_LSE_GetDriveCapability(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR) & ((0x3UL << (3U)))));
}






static inline uint32_t LL_RCC_LSE_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR) & ((0x1UL << (1U)))) == ((0x1UL << (1U))))?1UL:0UL);
}
# 2369 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_LSI_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CSR) |= ((0x1UL << (0U))));
}






static inline void LL_RCC_LSI_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CSR) &= ~((0x1UL << (0U))));
}






static inline uint32_t LL_RCC_LSI_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CSR) & ((0x1UL << (1U)))) == ((0x1UL << (1U))))?1UL:0UL);
}
# 2412 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetSysClkSource(uint32_t Source)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR))) & (~((0x7UL << (0U))))) | (Source))));
}
# 2426 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetSysClkSource(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR) & ((0x7UL << (3U)))));
}
# 2439 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetSysWakeUpClkSource(uint32_t Source)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR))) & (~((0x1UL << (6U))))) | (Source))));
}
# 2451 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetSysWakeUpClkSource(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR) & ((0x1UL << (6U)))));
}
# 2464 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetKerWakeUpClkSource(uint32_t Source)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR))) & (~((0x1UL << (7U))))) | (Source))));
}
# 2476 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetKerWakeUpClkSource(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR) & ((0x1UL << (7U)))));
}
# 2496 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetSysPrescaler(uint32_t Prescaler)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CFGR))) & (~((0xFUL << (8U))))) | (Prescaler))));



}
# 2520 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CFGR))) & (~((0xFUL << (0U))))) | (Prescaler))));



}
# 2540 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CFGR))) & (~((0x7UL << (4U))))) | (Prescaler))));



}
# 2560 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CFGR))) & (~((0x7UL << (8U))))) | (Prescaler))));



}
# 2580 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetAPB3Prescaler(uint32_t Prescaler)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CFGR))) & (~((0x7UL << (4U))))) | (Prescaler))));



}
# 2600 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetAPB4Prescaler(uint32_t Prescaler)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D3CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D3CFGR))) & (~((0x7UL << (4U))))) | (Prescaler))));



}
# 2623 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetSysPrescaler(void)
{

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CFGR) & ((0xFUL << (8U)))));



}
# 2646 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetAHBPrescaler(void)
{

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CFGR) & ((0xFUL << (0U)))));



}
# 2665 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetAPB1Prescaler(void)
{

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CFGR) & ((0x7UL << (4U)))));



}
# 2684 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetAPB2Prescaler(void)
{

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CFGR) & ((0x7UL << (8U)))));



}
# 2703 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetAPB3Prescaler(void)
{

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CFGR) & ((0x7UL << (4U)))));



}
# 2722 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetAPB4Prescaler(void)
{

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D3CFGR) & ((0x7UL << (4U)))));



}
# 2790 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_ConfigMCO(uint32_t MCOxSource, uint32_t MCOxPrescaler)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR))) & (~((MCOxSource << 16U) | (MCOxPrescaler << 16U)))) | ((MCOxSource & 0xFFFF0000U) | (MCOxPrescaler & 0xFFFF0000U)))));
}
# 2902 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetClockSource(uint32_t ClkSource)
{

  uint32_t * pReg = (uint32_t *)((uint32_t)&((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CCIPR + (((ClkSource) >> 0U ) & 0xFFUL));



  (((*pReg)) = ((((((*pReg))) & (~(((((ClkSource) >> 24U ) & 0xFFUL) << (((ClkSource) >> 8U ) & 0x1FUL))))) | (((((ClkSource) >> 16U) & 0xFFUL) << (((ClkSource) >> 8U ) & 0x1FUL))))));
}
# 2931 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetUSARTClockSource(uint32_t ClkSource)
{
  LL_RCC_SetClockSource(ClkSource);
}
# 2948 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetLPUARTClockSource(uint32_t ClkSource)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D3CCIPR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D3CCIPR))) & (~((0x7UL << (0U))))) | (ClkSource))));



}
# 2972 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetI2CClockSource(uint32_t ClkSource)
{
  LL_RCC_SetClockSource(ClkSource);
}
# 3003 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetLPTIMClockSource(uint32_t ClkSource)
{
  LL_RCC_SetClockSource(ClkSource);
}
# 3052 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetSAIClockSource(uint32_t ClkSource)
{
  LL_RCC_SetClockSource(ClkSource);
}
# 3065 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetSDMMCClockSource(uint32_t ClkSource)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CCIPR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CCIPR))) & (~((0x1UL << (16U))))) | (ClkSource))));



}
# 3084 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetRNGClockSource(uint32_t ClkSource)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP2R)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP2R))) & (~((0x3UL << (8U))))) | (ClkSource))));



}
# 3103 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetUSBClockSource(uint32_t ClkSource)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP2R)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP2R))) & (~((0x3UL << (20U))))) | (ClkSource))));



}
# 3121 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetCECClockSource(uint32_t ClkSource)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP2R)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP2R))) & (~((0x3UL << (22U))))) | (ClkSource))));



}
# 3153 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetDFSDMClockSource(uint32_t ClkSource)
{

   (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP1R)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP1R))) & (~((0x1UL << (24U))))) | (ClkSource))));



}
# 3187 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetFMCClockSource(uint32_t ClkSource)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CCIPR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CCIPR))) & (~((0x3UL << (0U))))) | (ClkSource))));



}
# 3207 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetQSPIClockSource(uint32_t ClkSource)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CCIPR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CCIPR))) & (~((0x3UL << (4U))))) | (ClkSource))));
}
# 3243 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetCLKPClockSource(uint32_t ClkSource)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CCIPR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CCIPR))) & (~((0x3UL << (28U))))) | (ClkSource))));



}
# 3280 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetSPIClockSource(uint32_t ClkSource)
{
  LL_RCC_SetClockSource(ClkSource);
}
# 3295 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetSPDIFClockSource(uint32_t ClkSource)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP1R)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP1R))) & (~((0x3UL << (20U))))) | (ClkSource))));



}
# 3313 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetFDCANClockSource(uint32_t ClkSource)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP1R)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP1R))) & (~((0x3UL << (28U))))) | (ClkSource))));



}
# 3330 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetSWPClockSource(uint32_t ClkSource)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP1R)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP1R))) & (~((0x1UL << (31U))))) | (ClkSource))));



}
# 3348 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetADCClockSource(uint32_t ClkSource)
{

  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D3CCIPR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D3CCIPR))) & (~((0x3UL << (16U))))) | (ClkSource))));



}
# 3473 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{

  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CCIPR) + (((Periph) >> 0U ) & 0xFFUL)));



  return (uint32_t) (Periph | (((((*pReg) & (((((Periph) >> 24U ) & 0xFFUL) << (((Periph) >> 8U ) & 0x1FUL))))) >> (((Periph) >> 8U ) & 0x1FUL)) << 16U) );
}
# 3504 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
  return LL_RCC_GetClockSource(Periph);
}
# 3522 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetLPUARTClockSource(uint32_t Periph)
{
  ((void)(Periph));

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D3CCIPR) & ((0x7UL << (0U)))));



}
# 3549 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetI2CClockSource(uint32_t Periph)
{
  return LL_RCC_GetClockSource(Periph);
}
# 3584 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetLPTIMClockSource(uint32_t Periph)
{
  return LL_RCC_GetClockSource(Periph);
}
# 3638 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetSAIClockSource(uint32_t Periph)
{
  return LL_RCC_GetClockSource(Periph);
}
# 3652 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetSDMMCClockSource(uint32_t Periph)
{
  ((void)(Periph));

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CCIPR) & ((0x1UL << (16U)))));



}
# 3673 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetRNGClockSource(uint32_t Periph)
{
  ((void)(Periph));

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP2R) & ((0x3UL << (8U)))));



}
# 3694 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetUSBClockSource(uint32_t Periph)
{
  ((void)(Periph));

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP2R) & ((0x3UL << (20U)))));



}
# 3714 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetCECClockSource(uint32_t Periph)
{
  ((void)(Periph));

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP2R) & ((0x3UL << (22U)))));



}
# 3750 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetDFSDMClockSource(uint32_t Periph)
{
  ((void)(Periph));

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP1R) & ((0x1UL << (24U)))));



}
# 3788 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetFMCClockSource(uint32_t Periph)
{
  ((void)(Periph));

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CCIPR) & ((0x3UL << (0U)))));



}
# 3810 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetQSPIClockSource(uint32_t Periph)
{
  ((void)(Periph));
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CCIPR) & ((0x3UL << (4U)))));
}
# 3850 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetCLKPClockSource(uint32_t Periph)
{
  ((void)(Periph));

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D1CCIPR) & ((0x3UL << (28U)))));



}
# 3891 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetSPIClockSource(uint32_t Periph)
{
  return LL_RCC_GetClockSource(Periph);
}
# 3907 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetSPDIFClockSource(uint32_t Periph)
{
  ((void)(Periph));

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP1R) & ((0x3UL << (20U)))));



}
# 3927 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetFDCANClockSource(uint32_t Periph)
{
  ((void)(Periph));

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP1R) & ((0x3UL << (28U)))));



}
# 3946 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetSWPClockSource(uint32_t Periph)
{
  ((void)(Periph));

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D2CCIP1R) & ((0x1UL << (31U)))));



}
# 3966 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetADCClockSource(uint32_t Periph)
{
  ((void)(Periph));

  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D3CCIPR) & ((0x3UL << (16U)))));



}
# 3997 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetRTCClockSource(uint32_t Source)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR))) & (~((0x3UL << (8U))))) | (Source))));
}
# 4011 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetRTCClockSource(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR) & ((0x3UL << (8U)))));
}






static inline void LL_RCC_EnableRTC(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR) |= ((0x1UL << (15U))));
}






static inline void LL_RCC_DisableRTC(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR) &= ~((0x1UL << (15U))));
}






static inline uint32_t LL_RCC_IsEnabledRTC(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR) & ((0x1UL << (15U)))) == ((0x1UL << (15U))))?1UL:0UL);
}






static inline void LL_RCC_ForceBackupDomainReset(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR) |= ((0x1UL << (16U))));
}






static inline void LL_RCC_ReleaseBackupDomainReset(void)
{

  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->BDCR) &= ~((0x1UL << (16U))));



}
# 4139 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetRTC_HSEPrescaler(uint32_t Prescaler)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR))) & (~((0x3FUL << (8U))))) | (Prescaler))));
}
# 4212 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetRTC_HSEPrescaler(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR) & ((0x3FUL << (8U)))));
}
# 4233 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR))) & (~((0x1UL << (15U))))) | (Prescaler))));
}
# 4245 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetTIMPrescaler(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR) & ((0x1UL << (15U)))));
}
# 4267 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_SetHRTIMClockSource(uint32_t Prescaler)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR))) & (~((0x1UL << (14U))))) | (Prescaler))));
}
# 4281 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_GetHRTIMClockSource(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CFGR) & ((0x1UL << (14U)))));
}
# 4305 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_PLL_SetSource(uint32_t PLLSource)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCKSELR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCKSELR))) & (~((0x3UL << (0U))))) | (PLLSource))));
}
# 4319 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_PLL_GetSource(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCKSELR) & ((0x3UL << (0U)))));
}






static inline void LL_RCC_PLL1_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) |= ((0x1UL << (24U))));
}







static inline void LL_RCC_PLL1_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) &= ~((0x1UL << (24U))));
}






static inline uint32_t LL_RCC_PLL1_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) & ((0x1UL << (25U)))) == ((0x1UL << (25U))))?1UL:0UL);
}







static inline void LL_RCC_PLL1P_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) |= ((0x1UL << (16U))));
}







static inline void LL_RCC_PLL1Q_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) |= ((0x1UL << (17U))));
}







static inline void LL_RCC_PLL1R_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) |= ((0x1UL << (18U))));
}






static inline void LL_RCC_PLL1FRACN_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) |= ((0x1UL << (0U))));
}






static inline uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) & ((0x1UL << (16U)))) == (0x1UL << (16U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) & ((0x1UL << (17U)))) == (0x1UL << (17U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) & ((0x1UL << (18U)))) == (0x1UL << (18U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) & ((0x1UL << (0U)))) == (0x1UL << (0U)))?1UL:0UL);
}







static inline void LL_RCC_PLL1P_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) &= ~((0x1UL << (16U))));
}







static inline void LL_RCC_PLL1Q_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) &= ~((0x1UL << (17U))));
}







static inline void LL_RCC_PLL1R_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) &= ~((0x1UL << (18U))));
}






static inline void LL_RCC_PLL1FRACN_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) &= ~((0x1UL << (0U))));
}
# 4490 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_PLL1_SetVCOOutputRange(uint32_t VCORange)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR))) & (~((0x1UL << (1U))))) | (VCORange << (1U)))));
}
# 4506 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_PLL1_SetVCOInputRange(uint32_t InputRange)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR))) & (~((0x3UL << (2U))))) | (InputRange << (2U)))));
}






static inline uint32_t LL_RCC_PLL1_GetN(void)
{
  return (uint32_t)((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1DIVR) & ((0x1FFUL << (0U)))) >> (0U)) + 1UL);
}






static inline uint32_t LL_RCC_PLL1_GetM(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCKSELR) & ((0x3FUL << (4U)))) >> (4U));
}






static inline uint32_t LL_RCC_PLL1_GetP(void)
{
  return (uint32_t)((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1DIVR) & ((0x7FUL << (9U)))) >> (9U)) + 1UL);
}






static inline uint32_t LL_RCC_PLL1_GetQ(void)
{
  return (uint32_t)((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1DIVR) & ((0x7FUL << (16U)))) >> (16U)) + 1UL);
}






static inline uint32_t LL_RCC_PLL1_GetR(void)
{
  return (uint32_t)((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1DIVR) & ((0x7FUL << (24U)))) >> (24U)) + 1UL);
}






static inline uint32_t LL_RCC_PLL1_GetFRACN(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1FRACR) & ((0x1FFFUL << (3U)))) >> (3U));
}







static inline void LL_RCC_PLL1_SetN(uint32_t N)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1DIVR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1DIVR))) & (~((0x1FFUL << (0U))))) | ((N-1UL) << (0U)))));
}







static inline void LL_RCC_PLL1_SetM(uint32_t M)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCKSELR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCKSELR))) & (~((0x3FUL << (4U))))) | (M << (4U)))));
}







static inline void LL_RCC_PLL1_SetP(uint32_t P)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1DIVR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1DIVR))) & (~((0x7FUL << (9U))))) | ((P-1UL) << (9U)))));
}







static inline void LL_RCC_PLL1_SetQ(uint32_t Q)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1DIVR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1DIVR))) & (~((0x7FUL << (16U))))) | ((Q-1UL) << (16U)))));
}







static inline void LL_RCC_PLL1_SetR(uint32_t R)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1DIVR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1DIVR))) & (~((0x7FUL << (24U))))) | ((R-1UL) << (24U)))));
}






static inline void LL_RCC_PLL1_SetFRACN(uint32_t FRACN)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1FRACR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL1FRACR))) & (~((0x1FFFUL << (3U))))) | (FRACN << (3U)))));
}






static inline void LL_RCC_PLL2_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) |= ((0x1UL << (26U))));
}







static inline void LL_RCC_PLL2_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) &= ~((0x1UL << (26U))));
}






static inline uint32_t LL_RCC_PLL2_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) & ((0x1UL << (27U)))) == ((0x1UL << (27U))))?1UL:0UL);
}







static inline void LL_RCC_PLL2P_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) |= ((0x1UL << (19U))));
}







static inline void LL_RCC_PLL2Q_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) |= ((0x1UL << (20U))));
}







static inline void LL_RCC_PLL2R_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) |= ((0x1UL << (21U))));
}






static inline void LL_RCC_PLL2FRACN_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) |= ((0x1UL << (4U))));
}






static inline uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) & ((0x1UL << (19U)))) == (0x1UL << (19U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) & ((0x1UL << (20U)))) == (0x1UL << (20U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) & ((0x1UL << (21U)))) == (0x1UL << (21U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) & ((0x1UL << (4U)))) == (0x1UL << (4U)))?1UL:0UL);
}







static inline void LL_RCC_PLL2P_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) &= ~((0x1UL << (19U))));
}







static inline void LL_RCC_PLL2Q_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) &= ~((0x1UL << (20U))));
}







static inline void LL_RCC_PLL2R_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) &= ~((0x1UL << (21U))));
}






static inline void LL_RCC_PLL2FRACN_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) &= ~((0x1UL << (4U))));
}
# 4802 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_PLL2_SetVCOOutputRange(uint32_t VCORange)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR))) & (~((0x1UL << (5U))))) | (VCORange << (5U)))));
}
# 4818 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_PLL2_SetVCOInputRange(uint32_t InputRange)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR))) & (~((0x3UL << (6U))))) | (InputRange << (6U)))));
}






static inline uint32_t LL_RCC_PLL2_GetN(void)
{
  return (uint32_t)((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2DIVR) & ((0x1FFUL << (0U)))) >> (0U)) + 1UL);
}






static inline uint32_t LL_RCC_PLL2_GetM(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCKSELR) & ((0x3FUL << (12U)))) >> (12U));
}






static inline uint32_t LL_RCC_PLL2_GetP(void)
{
  return (uint32_t)((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2DIVR) & ((0x7FUL << (9U)))) >> (9U)) + 1UL);
}






static inline uint32_t LL_RCC_PLL2_GetQ(void)
{
  return (uint32_t)((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2DIVR) & ((0x7FUL << (16U)))) >> (16U)) + 1UL);
}






static inline uint32_t LL_RCC_PLL2_GetR(void)
{
  return (uint32_t)((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2DIVR) & ((0x7FUL << (24U)))) >> (24U)) + 1UL);
}






static inline uint32_t LL_RCC_PLL2_GetFRACN(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2FRACR) & ((0x1FFFUL << (3U)))) >> (3U));
}







static inline void LL_RCC_PLL2_SetN(uint32_t N)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2DIVR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2DIVR))) & (~((0x1FFUL << (0U))))) | ((N-1UL) << (0U)))));
}







static inline void LL_RCC_PLL2_SetM(uint32_t M)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCKSELR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCKSELR))) & (~((0x3FUL << (12U))))) | (M << (12U)))));
}







static inline void LL_RCC_PLL2_SetP(uint32_t P)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2DIVR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2DIVR))) & (~((0x7FUL << (9U))))) | ((P-1UL) << (9U)))));
}







static inline void LL_RCC_PLL2_SetQ(uint32_t Q)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2DIVR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2DIVR))) & (~((0x7FUL << (16U))))) | ((Q-1UL) << (16U)))));
}







static inline void LL_RCC_PLL2_SetR(uint32_t R)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2DIVR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2DIVR))) & (~((0x7FUL << (24U))))) | ((R-1UL) << (24U)))));
}






static inline void LL_RCC_PLL2_SetFRACN(uint32_t FRACN)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2FRACR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL2FRACR))) & (~((0x1FFFUL << (3U))))) | (FRACN << (3U)))));
}






static inline void LL_RCC_PLL3_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) |= ((0x1UL << (28U))));
}







static inline void LL_RCC_PLL3_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) &= ~((0x1UL << (28U))));
}






static inline uint32_t LL_RCC_PLL3_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CR) & ((0x1UL << (29U)))) == ((0x1UL << (29U))))?1UL:0UL);
}







static inline void LL_RCC_PLL3P_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) |= ((0x1UL << (22U))));
}







static inline void LL_RCC_PLL3Q_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) |= ((0x1UL << (23U))));
}







static inline void LL_RCC_PLL3R_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) |= ((0x1UL << (24U))));
}






static inline void LL_RCC_PLL3FRACN_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) |= ((0x1UL << (8U))));
}






static inline uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) & ((0x1UL << (22U)))) == (0x1UL << (22U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) & ((0x1UL << (23U)))) == (0x1UL << (23U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) & ((0x1UL << (24U)))) == (0x1UL << (24U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) & ((0x1UL << (8U)))) == (0x1UL << (8U)))?1UL:0UL);
}







static inline void LL_RCC_PLL3P_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) &= ~((0x1UL << (22U))));
}







static inline void LL_RCC_PLL3Q_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) &= ~((0x1UL << (23U))));
}







static inline void LL_RCC_PLL3R_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) &= ~((0x1UL << (24U))));
}






static inline void LL_RCC_PLL3FRACN_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR) &= ~((0x1UL << (8U))));
}
# 5114 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_PLL3_SetVCOOutputRange(uint32_t VCORange)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR))) & (~((0x1UL << (9U))))) | (VCORange << (9U)))));
}
# 5130 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_PLL3_SetVCOInputRange(uint32_t InputRange)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCFGR))) & (~((0x3UL << (10U))))) | (InputRange << (10U)))));
}






static inline uint32_t LL_RCC_PLL3_GetN(void)
{
  return (uint32_t)((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3DIVR) & ((0x1FFUL << (0U)))) >> (0U)) + 1UL);
}






static inline uint32_t LL_RCC_PLL3_GetM(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCKSELR) & ((0x3FUL << (20U)))) >> (20U));
}






static inline uint32_t LL_RCC_PLL3_GetP(void)
{
  return (uint32_t)((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3DIVR) & ((0x7FUL << (9U)))) >> (9U)) + 1UL);
}






static inline uint32_t LL_RCC_PLL3_GetQ(void)
{
  return (uint32_t)((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3DIVR) & ((0x7FUL << (16U)))) >> (16U)) + 1UL);
}






static inline uint32_t LL_RCC_PLL3_GetR(void)
{
  return (uint32_t)((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3DIVR) & ((0x7FUL << (24U)))) >> (24U)) + 1UL);
}






static inline uint32_t LL_RCC_PLL3_GetFRACN(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3FRACR) & ((0x1FFFUL << (3U)))) >> (3U));
}







static inline void LL_RCC_PLL3_SetN(uint32_t N)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3DIVR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3DIVR))) & (~((0x1FFUL << (0U))))) | ((N-1UL) << (0U)))));
}







static inline void LL_RCC_PLL3_SetM(uint32_t M)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCKSELR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLLCKSELR))) & (~((0x3FUL << (20U))))) | (M << (20U)))));
}







static inline void LL_RCC_PLL3_SetP(uint32_t P)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3DIVR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3DIVR))) & (~((0x7FUL << (9U))))) | ((P-1UL) << (9U)))));
}







static inline void LL_RCC_PLL3_SetQ(uint32_t Q)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3DIVR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3DIVR))) & (~((0x7FUL << (16U))))) | ((Q-1UL) << (16U)))));
}







static inline void LL_RCC_PLL3_SetR(uint32_t R)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3DIVR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3DIVR))) & (~((0x7FUL << (24U))))) | ((R-1UL) << (24U)))));
}






static inline void LL_RCC_PLL3_SetFRACN(uint32_t FRACN)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3FRACR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->PLL3FRACR))) & (~((0x1FFFUL << (3U))))) | (FRACN << (3U)))));
}
# 5275 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_ClearFlag_LSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CICR) |= ((0x1UL << (0U))));
}






static inline void LL_RCC_ClearFlag_LSERDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CICR) |= ((0x1UL << (1U))));
}






static inline void LL_RCC_ClearFlag_HSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CICR) |= ((0x1UL << (2U))));
}






static inline void LL_RCC_ClearFlag_HSERDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CICR) |= ((0x1UL << (3U))));
}






static inline void LL_RCC_ClearFlag_CSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CICR) |= ((0x1UL << (4U))));
}






static inline void LL_RCC_ClearFlag_HSI48RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CICR) |= ((0x1UL << (5U))));
}






static inline void LL_RCC_ClearFlag_PLL1RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CICR) |= ((0x1UL << (6U))));
}






static inline void LL_RCC_ClearFlag_PLL2RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CICR) |= ((0x1UL << (7U))));
}






static inline void LL_RCC_ClearFlag_PLL3RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CICR) |= ((0x1UL << (8U))));
}






static inline void LL_RCC_ClearFlag_LSECSS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CICR) |= ((0x1UL << (9U))));
}






static inline void LL_RCC_ClearFlag_HSECSS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CICR) |= ((0x1UL << (10U))));
}






static inline uint32_t LL_RCC_IsActiveFlag_LSIRDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIFR) & ((0x1UL << (0U)))) == ((0x1UL << (0U))))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsActiveFlag_LSERDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIFR) & ((0x1UL << (1U)))) == ((0x1UL << (1U))))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsActiveFlag_HSIRDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIFR) & ((0x1UL << (2U)))) == ((0x1UL << (2U))))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsActiveFlag_HSERDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIFR) & ((0x1UL << (3U)))) == ((0x1UL << (3U))))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsActiveFlag_CSIRDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIFR) & ((0x1UL << (4U)))) == ((0x1UL << (4U))))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsActiveFlag_HSI48RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIFR) & ((0x1UL << (5U)))) == ((0x1UL << (5U))))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsActiveFlag_PLL1RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIFR) & ((0x1UL << (6U)))) == ((0x1UL << (6U))))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsActiveFlag_PLL2RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIFR) & ((0x1UL << (7U)))) == ((0x1UL << (7U))))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsActiveFlag_PLL3RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIFR) & ((0x1UL << (8U)))) == ((0x1UL << (8U))))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsActiveFlag_LSECSS(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIFR) & ((0x1UL << (9U)))) == ((0x1UL << (9U))))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsActiveFlag_HSECSS(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIFR) & ((0x1UL << (10U)))) == ((0x1UL << (10U))))?1UL:0UL);
}
# 5499 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_IsActiveFlag_LPWRRST(void)
{



  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->RSR) & ((0x1UL << (30U)))) == ((0x1UL << (30U))))?1UL:0UL);

}
# 5525 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_IsActiveFlag_WWDG1RST(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->RSR) & ((0x1UL << (28U)))) == ((0x1UL << (28U))))?1UL:0UL);
}
# 5547 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_IsActiveFlag_IWDG1RST(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->RSR) & ((0x1UL << (26U)))) == ((0x1UL << (26U))))?1UL:0UL);
}
# 5573 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{



  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->RSR) & ((0x1UL << (24U)))) == ((0x1UL << (24U))))?1UL:0UL);

}
# 5599 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_IsActiveFlag_PORRST(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->RSR) & ((0x1UL << (23U)))) == ((0x1UL << (23U))))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->RSR) & ((0x1UL << (22U)))) == ((0x1UL << (22U))))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsActiveFlag_BORRST(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->RSR) & ((0x1UL << (21U)))) == ((0x1UL << (21U))))?1UL:0UL);
}







static inline uint32_t LL_RCC_IsActiveFlag_D1RST(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->RSR) & ((0x1UL << (19U)))) == ((0x1UL << (19U))))?1UL:0UL);
}
# 5654 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_IsActiveFlag_D2RST(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->RSR) & ((0x1UL << (20U)))) == ((0x1UL << (20U))))?1UL:0UL);
}
# 5670 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline uint32_t LL_RCC_IsActiveFlag_CPURST(void)
{



  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->RSR) & ((0x1UL << (17U)))) == ((0x1UL << (17U))))?1UL:0UL);

}
# 5697 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_ClearResetFlags(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->RSR) |= ((0x1UL << (16U))));
}
# 6037 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
static inline void LL_RCC_EnableIT_LSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) |= ((0x1UL << (0U))));
}






static inline void LL_RCC_EnableIT_LSERDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) |= ((0x1UL << (1U))));
}






static inline void LL_RCC_EnableIT_HSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) |= ((0x1UL << (2U))));
}






static inline void LL_RCC_EnableIT_HSERDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) |= ((0x1UL << (3U))));
}






static inline void LL_RCC_EnableIT_CSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) |= ((0x1UL << (4U))));
}






static inline void LL_RCC_EnableIT_HSI48RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) |= ((0x1UL << (5U))));
}






static inline void LL_RCC_EnableIT_PLL1RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) |= ((0x1UL << (6U))));
}






static inline void LL_RCC_EnableIT_PLL2RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) |= ((0x1UL << (7U))));
}






static inline void LL_RCC_EnableIT_PLL3RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) |= ((0x1UL << (8U))));
}






static inline void LL_RCC_EnableIT_LSECSS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) |= ((0x1UL << (9U))));
}






static inline void LL_RCC_DisableIT_LSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) &= ~((0x1UL << (0U))));
}






static inline void LL_RCC_DisableIT_LSERDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) &= ~((0x1UL << (1U))));
}






static inline void LL_RCC_DisableIT_HSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) &= ~((0x1UL << (2U))));
}






static inline void LL_RCC_DisableIT_HSERDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) &= ~((0x1UL << (3U))));
}






static inline void LL_RCC_DisableIT_CSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) &= ~((0x1UL << (4U))));
}






static inline void LL_RCC_DisableIT_HSI48RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) &= ~((0x1UL << (5U))));
}






static inline void LL_RCC_DisableIT_PLL1RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) &= ~((0x1UL << (6U))));
}






static inline void LL_RCC_DisableIT_PLL2RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) &= ~((0x1UL << (7U))));
}






static inline void LL_RCC_DisableIT_PLL3RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) &= ~((0x1UL << (8U))));
}






static inline void LL_RCC_DisableIT_LSECSS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) &= ~((0x1UL << (9U))));
}






static inline uint32_t LL_RCC_IsEnableIT_LSIRDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) & ((0x1UL << (0U)))) == (0x1UL << (0U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsEnableIT_LSERDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) & ((0x1UL << (1U)))) == (0x1UL << (1U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsEnableIT_HSIRDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) & ((0x1UL << (2U)))) == (0x1UL << (2U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsEnableIT_HSERDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) & ((0x1UL << (3U)))) == (0x1UL << (3U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsEnableIT_CSIRDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) & ((0x1UL << (4U)))) == (0x1UL << (4U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsEnableIT_HSI48RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) & ((0x1UL << (5U)))) == (0x1UL << (5U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsEnableIT_PLL1RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) & ((0x1UL << (6U)))) == (0x1UL << (6U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsEnableIT_PLL2RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) & ((0x1UL << (7U)))) == (0x1UL << (7U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsEnableIT_PLL3RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) & ((0x1UL << (8U)))) == (0x1UL << (8U)))?1UL:0UL);
}






static inline uint32_t LL_RCC_IsEnableIT_LSECSS(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->CIER) & ((0x1UL << (9U)))) == (0x1UL << (9U)))?1UL:0UL);
}
# 6339 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_rcc.h"
void LL_RCC_DeInit(void);







uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR);

void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks);
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks);
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks);
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks);

uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource);
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource);
uint32_t LL_RCC_GetI2CClockFreq(uint32_t I2CxSource);
uint32_t LL_RCC_GetLPTIMClockFreq(uint32_t LPTIMxSource);
uint32_t LL_RCC_GetSAIClockFreq(uint32_t SAIxSource);
uint32_t LL_RCC_GetADCClockFreq(uint32_t ADCxSource);
uint32_t LL_RCC_GetSDMMCClockFreq(uint32_t SDMMCxSource);
uint32_t LL_RCC_GetRNGClockFreq(uint32_t RNGxSource);
uint32_t LL_RCC_GetCECClockFreq(uint32_t CECxSource);
uint32_t LL_RCC_GetUSBClockFreq(uint32_t USBxSource);
uint32_t LL_RCC_GetDFSDMClockFreq(uint32_t DFSDMxSource);






uint32_t LL_RCC_GetSPDIFClockFreq(uint32_t SPDIFxSource);
uint32_t LL_RCC_GetSPIClockFreq(uint32_t SPIxSource);
uint32_t LL_RCC_GetSWPClockFreq(uint32_t SWPxSource);
uint32_t LL_RCC_GetFDCANClockFreq(uint32_t FDCANxSource);
uint32_t LL_RCC_GetFMCClockFreq(uint32_t FMCxSource);

uint32_t LL_RCC_GetQSPIClockFreq(uint32_t QSPIxSource);




uint32_t LL_RCC_GetCLKPClockFreq(uint32_t CLKPxSource);
# 61 "./src/main/platform.h" 2
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h" 1
# 570 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB3ENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB3ENR) & (Periphs));
  (void)tmpreg;
}
# 620 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline uint32_t LL_AHB3_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB3ENR) & (Periphs)) == Periphs)?1U:0U);
}
# 666 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB3_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB3ENR) &= ~(Periphs));
}
# 702 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB3_GRP1_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB3RSTR) |= (Periphs));
}
# 738 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB3_GRP1_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB3RSTR) &= ~(Periphs));
}
# 783 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB3_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB3LPENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB3LPENR) & (Periphs));
  (void)tmpreg;
}
# 832 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB3_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB3LPENR) &= ~(Periphs));
}
# 874 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB1ENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB1ENR) & (Periphs));
  (void)tmpreg;
}
# 914 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline uint32_t LL_AHB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB1ENR) & (Periphs)) == Periphs)?1U:0U);
}
# 949 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB1_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB1ENR) &= ~(Periphs));
}
# 977 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB1_GRP1_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB1RSTR) |= (Periphs));
}
# 1005 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB1_GRP1_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB1RSTR) &= ~(Periphs));
}
# 1041 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB1_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB1LPENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB1LPENR) & (Periphs));
  (void)tmpreg;
}
# 1081 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB1_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB1LPENR) &= ~(Periphs));
}
# 1125 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB2ENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB2ENR) & (Periphs));
  (void)tmpreg;
}
# 1165 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB2ENR) & (Periphs)) == Periphs)?1U:0U);
}
# 1201 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB2ENR) &= ~(Periphs));
}
# 1231 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB2_GRP1_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB2RSTR) |= (Periphs));
}
# 1261 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB2_GRP1_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB2RSTR) &= ~(Periphs));
}
# 1295 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB2_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB2LPENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB2LPENR) & (Periphs));
  (void)tmpreg;
}
# 1331 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB2_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB2LPENR) &= ~(Periphs));
}
# 1385 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB4ENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB4ENR) & (Periphs));
  (void)tmpreg;
}
# 1435 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline uint32_t LL_AHB4_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB4ENR) & (Periphs)) == Periphs)?1U:0U);
}
# 1481 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB4_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB4ENR) &= ~(Periphs));
}
# 1523 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB4_GRP1_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB4RSTR) |= (Periphs));
}
# 1565 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB4_GRP1_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB4RSTR) &= ~(Periphs));
}
# 1607 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB4_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB4LPENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB4LPENR) & (Periphs));
  (void)tmpreg;
}
# 1653 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_AHB4_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->AHB4LPENR) &= ~(Periphs));
}
# 1679 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB3ENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB3ENR) & (Periphs));
  (void)tmpreg;
}
# 1701 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline uint32_t LL_APB3_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB3ENR) & (Periphs)) == Periphs)?1U:0U);
}
# 1719 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB3_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB3ENR) &= ~(Periphs));
}
# 1735 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB3_GRP1_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB3RSTR) |= (Periphs));
}
# 1751 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB3_GRP1_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB3RSTR) &= ~(Periphs));
}
# 1769 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB3_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB3LPENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB3LPENR) & (Periphs));
  (void)tmpreg;
}
# 1791 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB3_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB3LPENR) &= ~(Periphs));
}
# 1863 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1LENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1LENR) & (Periphs));
  (void)tmpreg;
}
# 1931 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1LENR) & (Periphs)) == Periphs)?1U:0U);
}
# 1995 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1LENR) &= ~(Periphs));
}
# 2057 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1LRSTR) |= (Periphs));
}
# 2119 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1LRSTR) &= ~(Periphs));
}
# 2183 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB1_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1LLPENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1LLPENR) & (Periphs));
  (void)tmpreg;
}
# 2251 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB1_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1LLPENR) &= ~(Periphs));
}
# 2275 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1HENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1HENR) & (Periphs));
  (void)tmpreg;
}
# 2303 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline uint32_t LL_APB1_GRP2_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1HENR) & (Periphs)) == Periphs)?1U:0U);
}
# 2327 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB1_GRP2_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1HENR) &= ~(Periphs));
}
# 2351 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB1_GRP2_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1HRSTR) |= (Periphs));
}
# 2375 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB1_GRP2_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1HRSTR) &= ~(Periphs));
}
# 2399 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB1_GRP2_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1HLPENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1HLPENR) & (Periphs));
  (void)tmpreg;
}
# 2427 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB1_GRP2_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB1HLPENR) &= ~(Periphs));
}
# 2481 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB2ENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB2ENR) & (Periphs));
  (void)tmpreg;
}
# 2531 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB2ENR) & (Periphs)) == Periphs)?1U:0U);
}
# 2577 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB2ENR) &= ~(Periphs));
}
# 2623 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB2RSTR) |= (Periphs));
}
# 2669 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB2RSTR) &= ~(Periphs));
}
# 2715 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB2_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB2LPENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB2LPENR) & (Periphs));
  (void)tmpreg;
}
# 2765 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB2_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB2LPENR) &= ~(Periphs));
}
# 2815 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB4_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB4ENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB4ENR) & (Periphs));
  (void)tmpreg;
}
# 2861 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline uint32_t LL_APB4_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB4ENR) & (Periphs)) == Periphs)?1U:0U);
}
# 2903 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB4_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB4ENR) &= ~(Periphs));
}
# 2943 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB4_GRP1_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB4RSTR) |= (Periphs));
}
# 2983 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB4_GRP1_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB4RSTR) &= ~(Periphs));
}
# 3025 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB4_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB4LPENR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB4LPENR) & (Periphs));
  (void)tmpreg;
}
# 3071 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_APB4_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->APB4LPENR) &= ~(Periphs));
}
# 3130 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_CLKAM_Enable(uint32_t Periphs)
{
  volatile uint32_t tmpreg;


  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D3AMR) |= (Periphs));

  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D3AMR) & (Periphs));





  (void)tmpreg;
}
# 3192 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_bus.h"
static inline void LL_CLKAM_Disable(uint32_t Periphs)
{

  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18020000UL) + 0x4400UL))->D3AMR) &= ~(Periphs));



}
# 62 "./src/main/platform.h" 2
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h" 1
# 46 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static const uint8_t OFFSET_TAB_CCMRx[] =
{
  0x00U,
  0x00U,
  0x00U,
  0x00U,
  0x04U,
  0x04U,
  0x04U,
  0x3CU,
  0x3CU
};

static const uint8_t SHIFT_TAB_OCxx[] =
{
  0U,
  0U,
  8U,
  0U,
  0U,
  0U,
  8U,
  0U,
  8U
};

static const uint8_t SHIFT_TAB_ICxx[] =
{
  0U,
  0U,
  8U,
  0U,
  0U,
  0U,
  8U,
  0U,
  0U
};

static const uint8_t SHIFT_TAB_CCxP[] =
{
  0U,
  2U,
  4U,
  6U,
  8U,
  10U,
  12U,
  16U,
  20U
};

static const uint8_t SHIFT_TAB_OISx[] =
{
  0U,
  1U,
  2U,
  3U,
  4U,
  5U,
  6U,
  8U,
  10U
};
# 199 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
typedef struct
{
  uint16_t Prescaler;




  uint32_t CounterMode;




  uint32_t Autoreload;






  uint32_t ClockDivision;




  uint32_t RepetitionCounter;
# 233 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
} LL_TIM_InitTypeDef;




typedef struct
{
  uint32_t OCMode;




  uint32_t OCState;




  uint32_t OCNState;




  uint32_t CompareValue;




  uint32_t OCPolarity;




  uint32_t OCNPolarity;





  uint32_t OCIdleState;




  uint32_t OCNIdleState;



} LL_TIM_OC_InitTypeDef;





typedef struct
{

  uint32_t ICPolarity;




  uint32_t ICActiveInput;




  uint32_t ICPrescaler;




  uint32_t ICFilter;



} LL_TIM_IC_InitTypeDef;





typedef struct
{
  uint32_t EncoderMode;




  uint32_t IC1Polarity;




  uint32_t IC1ActiveInput;




  uint32_t IC1Prescaler;




  uint32_t IC1Filter;




  uint32_t IC2Polarity;




  uint32_t IC2ActiveInput;




  uint32_t IC2Prescaler;




  uint32_t IC2Filter;




} LL_TIM_ENCODER_InitTypeDef;




typedef struct
{

  uint32_t IC1Polarity;




  uint32_t IC1Prescaler;






  uint32_t IC1Filter;




  uint32_t CommutationDelay;





} LL_TIM_HALLSENSOR_InitTypeDef;




typedef struct
{
  uint32_t OSSRState;






  uint32_t OSSIState;






  uint32_t LockLevel;





  uint8_t DeadTime;







  uint16_t BreakState;






  uint32_t BreakPolarity;






  uint32_t BreakFilter;






  uint32_t Break2State;






  uint32_t Break2Polarity;






  uint32_t Break2Filter;






  uint32_t AutomaticOutput;





} LL_TIM_BDTR_InitTypeDef;
# 1405 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) |= ((0x1UL << (0U))));
}







static inline void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) &= ~((0x1UL << (0U))));
}







static inline uint32_t LL_TIM_IsEnabledCounter(TIM_TypeDef *TIMx)
{
  return ((((TIMx->CR1) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_EnableUpdateEvent(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) &= ~((0x1UL << (1U))));
}







static inline void LL_TIM_DisableUpdateEvent(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) |= ((0x1UL << (1U))));
}







static inline uint32_t LL_TIM_IsEnabledUpdateEvent(TIM_TypeDef *TIMx)
{
  return ((((TIMx->CR1) & ((0x1UL << (1U)))) == (uint32_t)RESET) ? 1UL : 0UL);
}
# 1481 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetUpdateSource(TIM_TypeDef *TIMx, uint32_t UpdateSource)
{
  (((TIMx->CR1)) = ((((((TIMx->CR1))) & (~((0x1UL << (2U))))) | (UpdateSource))));
}
# 1494 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_GetUpdateSource(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CR1) & ((0x1UL << (2U)))));
}
# 1508 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
{
  (((TIMx->CR1)) = ((((((TIMx->CR1))) & (~((0x1UL << (3U))))) | (OnePulseMode))));
}
# 1521 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_GetOnePulseMode(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CR1) & ((0x1UL << (3U)))));
}
# 1545 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
  (((TIMx->CR1)) = ((((((TIMx->CR1))) & (~(((0x1UL << (4U)) | (0x3UL << (5U)))))) | (CounterMode))));
}
# 1565 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_GetCounterMode(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CR1) & ((0x1UL << (4U)) | (0x3UL << (5U)))));
}







static inline void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) |= ((0x1UL << (7U))));
}







static inline void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) &= ~((0x1UL << (7U))));
}







static inline uint32_t LL_TIM_IsEnabledARRPreload(TIM_TypeDef *TIMx)
{
  return ((((TIMx->CR1) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
# 1616 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
{
  (((TIMx->CR1)) = ((((((TIMx->CR1))) & (~((0x3UL << (8U))))) | (ClockDivision))));
}
# 1633 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_GetClockDivision(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CR1) & ((0x3UL << (8U)))));
}
# 1647 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
  ((TIMx->CNT) = (Counter));
}
# 1660 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CNT)));
}
# 1673 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_GetDirection(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CR1) & ((0x1UL << (4U)))));
}
# 1689 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
  ((TIMx->PSC) = (Prescaler));
}







static inline uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->PSC)));
}
# 1716 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  ((TIMx->ARR) = (AutoReload));
}
# 1729 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->ARR)));
}
# 1744 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
  ((TIMx->RCR) = (RepetitionCounter));
}
# 1757 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_GetRepetitionCounter(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->RCR)));
}
# 1769 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_EnableUIFRemap(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) |= ((0x1UL << (11U))));
}







static inline void LL_TIM_DisableUIFRemap(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) &= ~((0x1UL << (11U))));
}






static inline uint32_t LL_TIM_IsActiveUIFCPY(uint32_t Counter)
{
  return (((Counter & (0x1UL << (31U))) == ((0x1UL << (31U)))) ? 1UL : 0UL);
}
# 1813 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_CC_EnablePreload(TIM_TypeDef *TIMx)
{
  ((TIMx->CR2) |= ((0x1UL << (0U))));
}
# 1826 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_CC_DisablePreload(TIM_TypeDef *TIMx)
{
  ((TIMx->CR2) &= ~((0x1UL << (0U))));
}
# 1842 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_CC_SetUpdate(TIM_TypeDef *TIMx, uint32_t CCUpdateSource)
{
  (((TIMx->CR2)) = ((((((TIMx->CR2))) & (~((0x1UL << (2U))))) | (CCUpdateSource))));
}
# 1856 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
{
  (((TIMx->CR2)) = ((((((TIMx->CR2))) & (~((0x1UL << (3U))))) | (DMAReqTrigger))));
}
# 1869 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_CC_GetDMAReqTrigger(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CR2) & ((0x1UL << (3U)))));
}
# 1888 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_CC_SetLockLevel(TIM_TypeDef *TIMx, uint32_t LockLevel)
{
  (((TIMx->BDTR)) = ((((((TIMx->BDTR))) & (~((0x3UL << (8U))))) | (LockLevel))));
}
# 1917 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  ((TIMx->CCER) |= (Channels));
}
# 1946 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  ((TIMx->CCER) &= ~(Channels));
}
# 1975 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((((TIMx->CCER) & (Channels)) == (Channels)) ? 1UL : 0UL);
}
# 2020 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_ConfigOutput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  ((*pReg) &= ~(((0x3UL << (0U)) << SHIFT_TAB_OCxx[iChannel])));
  (((TIMx->CCER)) = ((((((TIMx->CCER))) & (~(((0x1UL << (1U)) << SHIFT_TAB_CCxP[iChannel])))) | ((Configuration & (0x1UL << (1U))) << SHIFT_TAB_CCxP[iChannel]))))
                                                                         ;
  (((TIMx->CR2)) = ((((((TIMx->CR2))) & (~(((0x1UL << (8U)) << SHIFT_TAB_OISx[iChannel])))) | ((Configuration & (0x1UL << (8U))) << SHIFT_TAB_OISx[iChannel]))))
                                                                        ;
}
# 2065 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  (((*pReg)) = ((((((*pReg))) & (~((((0x1007UL << (4U)) | (0x3UL << (0U))) << SHIFT_TAB_OCxx[iChannel])))) | (Mode << SHIFT_TAB_OCxx[iChannel]))));
}
# 2104 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_OC_GetMode(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   const volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  return (((*pReg) & ((((0x1007UL << (4U)) | (0x3UL << (0U))) << SHIFT_TAB_OCxx[iChannel]))) >> SHIFT_TAB_OCxx[iChannel]);
}
# 2138 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  (((TIMx->CCER)) = ((((((TIMx->CCER))) & (~(((0x1UL << (1U)) << SHIFT_TAB_CCxP[iChannel])))) | (Polarity << SHIFT_TAB_CCxP[iChannel]))));
}
# 2170 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_OC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  return (((TIMx->CCER) & (((0x1UL << (1U)) << SHIFT_TAB_CCxP[iChannel]))) >> SHIFT_TAB_CCxP[iChannel]);
}
# 2207 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  (((TIMx->CR2)) = ((((((TIMx->CR2))) & (~(((0x1UL << (8U)) << SHIFT_TAB_OISx[iChannel])))) | (IdleState << SHIFT_TAB_OISx[iChannel]))));
}
# 2239 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_OC_GetIdleState(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  return (((TIMx->CR2) & (((0x1UL << (8U)) << SHIFT_TAB_OISx[iChannel]))) >> SHIFT_TAB_OISx[iChannel]);
}
# 2264 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  ((*pReg) |= (((0x1UL << (2U)) << SHIFT_TAB_OCxx[iChannel])));

}
# 2290 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  ((*pReg) &= ~(((0x1UL << (2U)) << SHIFT_TAB_OCxx[iChannel])));

}
# 2316 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   const volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
   uint32_t bitfield = (0x1UL << (2U)) << SHIFT_TAB_OCxx[iChannel];
  return ((((*pReg) & (bitfield)) == bitfield) ? 1UL : 0UL);
}
# 2342 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  ((*pReg) |= (((0x1UL << (3U)) << SHIFT_TAB_OCxx[iChannel])));
}
# 2367 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  ((*pReg) &= ~(((0x1UL << (3U)) << SHIFT_TAB_OCxx[iChannel])));
}
# 2392 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_OC_IsEnabledPreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   const volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
   uint32_t bitfield = (0x1UL << (3U)) << SHIFT_TAB_OCxx[iChannel];
  return ((((*pReg) & (bitfield)) == bitfield) ? 1UL : 0UL);
}
# 2421 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_EnableClear(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  ((*pReg) |= (((0x1UL << (7U)) << SHIFT_TAB_OCxx[iChannel])));
}
# 2448 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_DisableClear(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  ((*pReg) &= ~(((0x1UL << (7U)) << SHIFT_TAB_OCxx[iChannel])));
}
# 2477 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_OC_IsEnabledClear(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   const volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
   uint32_t bitfield = (0x1UL << (7U)) << SHIFT_TAB_OCxx[iChannel];
  return ((((*pReg) & (bitfield)) == bitfield) ? 1UL : 0UL);
}
# 2495 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_SetDeadTime(TIM_TypeDef *TIMx, uint32_t DeadTime)
{
  (((TIMx->BDTR)) = ((((((TIMx->BDTR))) & (~((0xFFUL << (0U))))) | (DeadTime))));
}
# 2512 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  ((TIMx->CCR1) = (CompareValue));
}
# 2529 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  ((TIMx->CCR2) = (CompareValue));
}
# 2546 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  ((TIMx->CCR3) = (CompareValue));
}
# 2563 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  ((TIMx->CCR4) = (CompareValue));
}
# 2577 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  (((TIMx->CCR5)) = ((((((TIMx->CCR5))) & (~((0xFFFFFFFFUL << (0U))))) | (CompareValue))));
}
# 2591 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  ((TIMx->CCR6) = (CompareValue));
}
# 2607 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR1)));
}
# 2623 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR2)));
}
# 2639 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR3)));
}
# 2655 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR4)));
}
# 2668 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_OC_GetCompareCH5(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR5) & ((0xFFFFFFFFUL << (0U)))));
}
# 2681 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_OC_GetCompareCH6(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR6)));
}
# 2701 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetCH5CombinedChannels(TIM_TypeDef *TIMx, uint32_t GroupCH5)
{
  (((TIMx->CCR5)) = ((((((TIMx->CCR5))) & (~(((0x1UL << (31U)) | (0x1UL << (30U)) | (0x1UL << (29U)))))) | (GroupCH5))));
}
# 2748 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  (((*pReg)) = ((((((*pReg))) & (~((((0xFUL << (4U)) | (0x3UL << (2U)) | (0x3UL << (0U))) << SHIFT_TAB_ICxx[iChannel])))) | (((Configuration >> 16U) & ((0xFUL << (4U)) | (0x3UL << (2U)) | (0x3UL << (0U)))) << SHIFT_TAB_ICxx[iChannel]))))
                                                                                                                          ;
  (((TIMx->CCER)) = ((((((TIMx->CCER))) & (~((((0x1UL << (3U)) | (0x1UL << (1U))) << SHIFT_TAB_CCxP[iChannel])))) | ((Configuration & ((0x1UL << (3U)) | (0x1UL << (1U)))) << SHIFT_TAB_CCxP[iChannel]))))
                                                                                            ;
}
# 2776 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  (((*pReg)) = ((((((*pReg))) & (~((((0x3UL << (0U))) << SHIFT_TAB_ICxx[iChannel])))) | ((ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]))));
}
# 2800 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   const volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  return ((((*pReg) & ((((0x3UL << (0U))) << SHIFT_TAB_ICxx[iChannel]))) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
}
# 2826 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  (((*pReg)) = ((((((*pReg))) & (~((((0x3UL << (2U))) << SHIFT_TAB_ICxx[iChannel])))) | ((ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]))));
}
# 2851 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   const volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  return ((((*pReg) & ((((0x3UL << (2U))) << SHIFT_TAB_ICxx[iChannel]))) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
}
# 2889 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  (((*pReg)) = ((((((*pReg))) & (~((((0xFUL << (4U))) << SHIFT_TAB_ICxx[iChannel])))) | ((ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]))));
}
# 2926 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
   const volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  return ((((*pReg) & ((((0xFUL << (4U))) << SHIFT_TAB_ICxx[iChannel]))) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
}
# 2955 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  (((TIMx->CCER)) = ((((((TIMx->CCER))) & (~((((0x1UL << (3U)) | (0x1UL << (1U))) << SHIFT_TAB_CCxP[iChannel])))) | (ICPolarity << SHIFT_TAB_CCxP[iChannel]))))
                                                    ;
}
# 2983 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  return (((TIMx->CCER) & ((((0x1UL << (3U)) | (0x1UL << (1U))) << SHIFT_TAB_CCxP[iChannel]))) >>
          SHIFT_TAB_CCxP[iChannel]);
}
# 2998 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
{
  ((TIMx->CR2) |= ((0x1UL << (7U))));
}
# 3011 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
{
  ((TIMx->CR2) &= ~((0x1UL << (7U))));
}
# 3024 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
{
  return ((((TIMx->CR2) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
# 3040 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR1)));
}
# 3056 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR2)));
}
# 3072 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR3)));
}
# 3088 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR4)));
}
# 3109 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
{
  ((TIMx->SMCR) |= ((0x1UL << (14U))));
}
# 3122 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
{
  ((TIMx->SMCR) &= ~((0x1UL << (14U))));
}
# 3135 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SMCR) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
# 3159 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  (((TIMx->SMCR)) = ((((((TIMx->SMCR))) & (~((0x10007UL << (0U)) | (0x1UL << (14U))))) | (ClockSource))));
}
# 3176 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
  (((TIMx->SMCR)) = ((((((TIMx->SMCR))) & (~((0x10007UL << (0U))))) | (EncoderMode))));
}
# 3205 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  (((TIMx->CR2)) = ((((((TIMx->CR2))) & (~((0x7UL << (4U))))) | (TimerSynchronization))));
}
# 3235 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
  (((TIMx->CR2)) = ((((((TIMx->CR2))) & (~((0xFUL << (20U))))) | (ADCSynchronization))));
}
# 3254 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
{
  (((TIMx->SMCR)) = ((((((TIMx->SMCR))) & (~((0x10007UL << (0U))))) | (SlaveMode))));
}
# 3288 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  (((TIMx->SMCR)) = ((((((TIMx->SMCR))) & (~((0x30007UL << (4U))))) | (TriggerInput))));
}
# 3301 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  ((TIMx->SMCR) |= ((0x1UL << (7U))));
}
# 3314 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  ((TIMx->SMCR) &= ~((0x1UL << (7U))));
}
# 3327 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_IsEnabledMasterSlaveMode(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SMCR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
# 3367 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
                                      uint32_t ETRFilter)
{
  (((TIMx->SMCR)) = ((((((TIMx->SMCR))) & (~((0x1UL << (15U)) | (0x3UL << (12U)) | (0xFUL << (8U))))) | (ETRPolarity | ETRPrescaler | ETRFilter))));
}
# 3436 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetETRSource(TIM_TypeDef *TIMx, uint32_t ETRSource)
{

  (((TIMx->AF1)) = ((((((TIMx->AF1))) & (~((0xFUL << (14U))))) | (ETRSource))));
}
# 3457 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_EnableBRK(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) |= ((0x1UL << (12U))));
}
# 3470 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_DisableBRK(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) &= ~((0x1UL << (12U))));
}
# 3504 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_ConfigBRK(TIM_TypeDef *TIMx, uint32_t BreakPolarity,
                                      uint32_t BreakFilter)
{
  (((TIMx->BDTR)) = ((((((TIMx->BDTR))) & (~((0x1UL << (13U)) | (0xFUL << (16U))))) | (BreakPolarity | BreakFilter))));
}
# 3518 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_EnableBRK2(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) |= ((0x1UL << (24U))));
}
# 3531 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_DisableBRK2(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) &= ~((0x1UL << (24U))));
}
# 3565 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_ConfigBRK2(TIM_TypeDef *TIMx, uint32_t Break2Polarity, uint32_t Break2Filter)
{
  (((TIMx->BDTR)) = ((((((TIMx->BDTR))) & (~((0x1UL << (25U)) | (0xFUL << (20U))))) | (Break2Polarity | Break2Filter))));
}
# 3585 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetOffStates(TIM_TypeDef *TIMx, uint32_t OffStateIdle, uint32_t OffStateRun)
{
  (((TIMx->BDTR)) = ((((((TIMx->BDTR))) & (~((0x1UL << (10U)) | (0x1UL << (11U))))) | (OffStateIdle | OffStateRun))));
}
# 3598 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_EnableAutomaticOutput(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) |= ((0x1UL << (14U))));
}
# 3611 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_DisableAutomaticOutput(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) &= ~((0x1UL << (14U))));
}
# 3624 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_IsEnabledAutomaticOutput(TIM_TypeDef *TIMx)
{
  return ((((TIMx->BDTR) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
# 3639 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) |= ((0x1UL << (15U))));
}
# 3654 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) &= ~((0x1UL << (15U))));
}
# 3667 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline uint32_t LL_TIM_IsEnabledAllOutputs(TIM_TypeDef *TIMx)
{
  return ((((TIMx->BDTR) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
# 3696 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_EnableBreakInputSource(TIM_TypeDef *TIMx, uint32_t BreakInput, uint32_t Source)
{
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->AF1) + BreakInput));
  ((*pReg) |= (Source));
}
# 3725 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_DisableBreakInputSource(TIM_TypeDef *TIMx, uint32_t BreakInput, uint32_t Source)
{
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->AF1) + BreakInput));
  ((*pReg) &= ~(Source));
}
# 3754 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetBreakInputSourcePolarity(TIM_TypeDef *TIMx, uint32_t BreakInput, uint32_t Source,
                                                        uint32_t Polarity)
{
   volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->AF1) + BreakInput));
  (((*pReg)) = ((((((*pReg))) & (~(((0x1UL << (9U)) << (((uint8_t)__builtin_clz(__RBIT(Source))) & 0x1FUL))))) | ((Polarity << (((uint8_t)__builtin_clz(__RBIT(Source))) & 0x1FUL))))));
}
# 3822 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_ConfigDMABurst(TIM_TypeDef *TIMx, uint32_t DMABurstBaseAddress, uint32_t DMABurstLength)
{
  (((TIMx->DCR)) = ((((((TIMx->DCR))) & (~(((0x1FUL << (8U)) | (0x1FUL << (0U)))))) | ((DMABurstBaseAddress | DMABurstLength)))));
}
# 3907 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_SetRemap(TIM_TypeDef *TIMx, uint32_t Remap)
{
  (((TIMx->TISEL)) = ((((((TIMx->TISEL))) & (~(((0xFUL << (0U)) | (0xFUL << (8U)) | (0xFUL << (16U)) | (0xFUL << (24U)))))) | (Remap))));
}
# 3925 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (0U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (1U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (2U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (3U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_CC3(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (4U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_CC4(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_CC5(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (16U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_CC5(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_CC6(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (17U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_CC6(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (17U)))) == ((0x1UL << (17U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_COM(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (5U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_COM(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_TRIG(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (6U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_TRIG(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (7U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_BRK2(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (8U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_CC1OVR(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (9U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_CC1OVR(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_CC2OVR(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (10U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_CC2OVR(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_CC3OVR(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (11U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_CC3OVR(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_CC4OVR(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (12U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_CC4OVR(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_ClearFlag_SYSBRK(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (13U)))));
}







static inline uint32_t LL_TIM_IsActiveFlag_SYSBRK(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
# 4284 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (0U))));
}







static inline void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (0U))));
}







static inline uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (1U))));
}







static inline void LL_TIM_DisableIT_CC1(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (1U))));
}







static inline uint32_t LL_TIM_IsEnabledIT_CC1(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (2U))));
}







static inline void LL_TIM_DisableIT_CC2(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (2U))));
}







static inline uint32_t LL_TIM_IsEnabledIT_CC2(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_EnableIT_CC3(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (3U))));
}







static inline void LL_TIM_DisableIT_CC3(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (3U))));
}







static inline uint32_t LL_TIM_IsEnabledIT_CC3(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_EnableIT_CC4(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (4U))));
}







static inline void LL_TIM_DisableIT_CC4(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (4U))));
}







static inline uint32_t LL_TIM_IsEnabledIT_CC4(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_EnableIT_COM(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (5U))));
}







static inline void LL_TIM_DisableIT_COM(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (5U))));
}







static inline uint32_t LL_TIM_IsEnabledIT_COM(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_EnableIT_TRIG(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (6U))));
}







static inline void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (6U))));
}







static inline uint32_t LL_TIM_IsEnabledIT_TRIG(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (7U))));
}







static inline void LL_TIM_DisableIT_BRK(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (7U))));
}







static inline uint32_t LL_TIM_IsEnabledIT_BRK(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
# 4555 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_EnableDMAReq_UPDATE(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (8U))));
}







static inline void LL_TIM_DisableDMAReq_UPDATE(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (8U))));
}







static inline uint32_t LL_TIM_IsEnabledDMAReq_UPDATE(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (9U))));
}







static inline void LL_TIM_DisableDMAReq_CC1(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (9U))));
}







static inline uint32_t LL_TIM_IsEnabledDMAReq_CC1(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_EnableDMAReq_CC2(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (10U))));
}







static inline void LL_TIM_DisableDMAReq_CC2(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (10U))));
}







static inline uint32_t LL_TIM_IsEnabledDMAReq_CC2(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_EnableDMAReq_CC3(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (11U))));
}







static inline void LL_TIM_DisableDMAReq_CC3(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (11U))));
}







static inline uint32_t LL_TIM_IsEnabledDMAReq_CC3(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_EnableDMAReq_CC4(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (12U))));
}







static inline void LL_TIM_DisableDMAReq_CC4(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (12U))));
}







static inline uint32_t LL_TIM_IsEnabledDMAReq_CC4(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_EnableDMAReq_COM(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (13U))));
}







static inline void LL_TIM_DisableDMAReq_COM(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (13U))));
}







static inline uint32_t LL_TIM_IsEnabledDMAReq_COM(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}







static inline void LL_TIM_EnableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (14U))));
}







static inline void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (14U))));
}







static inline uint32_t LL_TIM_IsEnabledDMAReq_TRIG(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
# 4793 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
static inline void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (0U))));
}







static inline void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (1U))));
}







static inline void LL_TIM_GenerateEvent_CC2(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (2U))));
}







static inline void LL_TIM_GenerateEvent_CC3(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (3U))));
}







static inline void LL_TIM_GenerateEvent_CC4(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (4U))));
}







static inline void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (5U))));
}







static inline void LL_TIM_GenerateEvent_TRIG(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (6U))));
}







static inline void LL_TIM_GenerateEvent_BRK(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (7U))));
}







static inline void LL_TIM_GenerateEvent_BRK2(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (8U))));
}
# 4895 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_tim.h"
ErrorStatus LL_TIM_DeInit(TIM_TypeDef *TIMx);
void LL_TIM_StructInit(LL_TIM_InitTypeDef *TIM_InitStruct);
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct);
void LL_TIM_OC_StructInit(LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct);
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct);
void LL_TIM_IC_StructInit(LL_TIM_IC_InitTypeDef *TIM_ICInitStruct);
ErrorStatus LL_TIM_IC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_IC_InitTypeDef *TIM_IC_InitStruct);
void LL_TIM_ENCODER_StructInit(LL_TIM_ENCODER_InitTypeDef *TIM_EncoderInitStruct);
ErrorStatus LL_TIM_ENCODER_Init(TIM_TypeDef *TIMx, LL_TIM_ENCODER_InitTypeDef *TIM_EncoderInitStruct);
void LL_TIM_HALLSENSOR_StructInit(LL_TIM_HALLSENSOR_InitTypeDef *TIM_HallSensorInitStruct);
ErrorStatus LL_TIM_HALLSENSOR_Init(TIM_TypeDef *TIMx, LL_TIM_HALLSENSOR_InitTypeDef *TIM_HallSensorInitStruct);
void LL_TIM_BDTR_StructInit(LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct);
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct);
# 63 "./src/main/platform.h" 2
# 1 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h" 1
# 451 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_SetPHYInterface(uint32_t Interface)
{
  (((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->PMCR)) = ((((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->PMCR))) & (~((0x7UL << (21U))))) | (Interface))));
}
# 463 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_GetPHYInterface(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->PMCR) & ((0x7UL << (21U)))));
}
# 482 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_OpenAnalogSwitch(uint32_t AnalogSwitch)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->PMCR) |= (AnalogSwitch));
}
# 500 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_CloseAnalogSwitch(uint32_t AnalogSwitch)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->PMCR) &= ~(AnalogSwitch));
}
# 514 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_EnableAnalogBooster(void)
{
 ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->PMCR) |= ((0x1UL << (8U)))) ;
}
# 527 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_DisableAnalogBooster(void)
{
 ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->PMCR) &= ~((0x1UL << (8U)))) ;
}
# 550 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->PMCR) |= (ConfigFastModePlus));
}
# 573 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_DisableFastModePlus(uint32_t ConfigFastModePlus)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->PMCR) &= ~(ConfigFastModePlus));
}
# 617 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  (((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->EXTICR[Line & 0x3U])) = ((((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->EXTICR[Line & 0x3U]))) & (~((Line >> 16U)))) | (Port << ((((uint8_t)__builtin_clz(__RBIT(Line >> 16U)))) & 31U)))));
}
# 659 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->EXTICR[Line & 0x3U]) & ((Line >> 16U))) >> (((uint8_t)__builtin_clz(__RBIT(Line >> 16U))) & 31U));
}
# 695 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_SetTIMBreakInputs(uint32_t Break)
{





  (((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CFGR)) = ((((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CFGR))) & (~((0x1UL << (15U)) | (0x1UL << (14U)) | (0x1UL << (13U)) | (0x1UL << (12U)) | (0x1UL << (11U)) | (0x1UL << (10U)) | (0x1UL << (9U)) | (0x1UL << (7U)) | (0x1UL << (6U)) | (0x1UL << (3U)) | (0x1UL << (2U))))) | (Break))))

                                                   ;
# 714 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
}
# 746 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_GetTIMBreakInputs(void)
{






  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CFGR) & ((0x1UL << (15U)) | (0x1UL << (14U)) | (0x1UL << (13U)) | (0x1UL << (12U)) | (0x1UL << (11U)) | (0x1UL << (10U)) | (0x1UL << (9U)) | (0x1UL << (7U)) | (0x1UL << (6U)) | (0x1UL << (3U)) | (0x1UL << (2U))))


                                                                                     );
# 767 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
}
# 776 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_EnableCompensationCell(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCSR) |= ((0x1UL << (0U))));
}
# 788 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_DisableCompensationCell(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCSR) &= ~((0x1UL << (0U))));
}






static inline uint32_t LL_SYSCFG_IsEnabledCompensationCell(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCSR) & ((0x1UL << (0U)))) == (0x1UL << (0U))) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsActiveFlag_CMPCR(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCSR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
# 821 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_EnableIOSpeedOptimization(void)
{

  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCSR) |= ((0x1UL << (16U))));



}
# 880 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_DisableIOSpeedOptimization(void)
{

  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCSR) &= ~((0x1UL << (16U))));



}
# 935 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_IsEnabledIOSpeedOptimization(void)
{

  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCSR) & ((0x1UL << (16U)))) == (0x1UL << (16U))) ? 1UL : 0UL);



}
# 985 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_SetCellCompensationCode(uint32_t CompCode)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCSR) |= (CompCode));
}
# 997 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_GetCellCompensationCode(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCSR) & ((0x1UL << (1U)))));
}
# 1022 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_GetPMOSCompensationValue(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCVR) & ((0xFUL << (4U)))));
}






static inline uint32_t LL_SYSCFG_GetNMOSCompensationValue(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCVR) & ((0xFUL << (0U)))));
}
# 1045 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_SetPMOSCompensationCode(uint32_t PMOSCode)
{
  (((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCR)) = ((((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCR))) & (~((0xFUL << (4U))))) | (PMOSCode))));
}






static inline uint32_t LL_SYSCFG_GetPMOSCompensationCode(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCR) & ((0xFUL << (4U)))));
}
# 1094 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_SYSCFG_SetNMOSCompensationCode(uint32_t NMOSCode)
{
  (((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCR)) = ((((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCR))) & (~((0xFUL << (0U))))) | (NMOSCode))));
}






static inline uint32_t LL_SYSCFG_GetNMOSCompensationCode(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->CCCR) & ((0xFUL << (0U)))));
}
# 1159 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_GetPackage(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->PKGR) & ((0xFUL << (0U)))));
}
# 1174 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_GetFLashProtectionLevel(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR0) & ((0xFFUL << (16U)))));
}






static inline uint32_t LL_SYSCFG_IsFLashBankAddressesSwaped(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR0) & ((0x1UL << (0U)))) == 0U) ? 1UL : 0UL);
}
# 1199 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_GetBrownoutResetLevel(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR2) & ((0x3UL << (0U)))));
}






static inline void LL_SYSCFG_SetCM7BootAddress0(uint16_t BootAddress)
{




  (((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR2)) = ((((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR2))) & (~((0xFFFFUL << (16U))))) | (((uint32_t)BootAddress << (16U))))));


}






static inline uint16_t LL_SYSCFG_GetCM7BootAddress0(void)
{




  return (uint16_t)((uint32_t)((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR2) & ((0xFFFFUL << (16U)))) >> (16U));

}







static inline void LL_SYSCFG_SetCM7BootAddress1(uint16_t BootAddress)
{




  (((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR3)) = ((((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR3))) & (~((0xFFFFUL << (0U))))) | (BootAddress))));

}






static inline uint16_t LL_SYSCFG_GetCM7BootAddress1(void)
{




  return (uint16_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR3) & ((0xFFFFUL << (0U)))));

}
# 1319 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_IsFlashB1ProtectedAreaErasable(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR4) & ((0x1UL << (16U)))) == (0x1UL << (16U))) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB1SecuredAreaErasable(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR5) & ((0x1UL << (0U)))) == (0x1UL << (0U))) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB1Sector0WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR5) & ((0xFFUL << (16U)))) == ((0xFFUL << (16U)) & 0x10000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB1Sector1WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR5) & ((0xFFUL << (16U)))) == ((0xFFUL << (16U)) & 0x20000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB1Sector2WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR5) & ((0xFFUL << (16U)))) == ((0xFFUL << (16U)) & 0x40000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB1Sector3WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR5) & ((0xFFUL << (16U)))) == ((0xFFUL << (16U)) & 0x80000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB1Sector4WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR5) & ((0xFFUL << (16U)))) == ((0xFFUL << (16U)) & 0x100000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB1Sector5WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR5) & ((0xFFUL << (16U)))) == ((0xFFUL << (16U)) & 0x200000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB1Sector6WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR5) & ((0xFFUL << (16U)))) == ((0xFFUL << (16U)) & 0x400000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB1Sector7WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR5) & ((0xFFUL << (16U)))) == ((0xFFUL << (16U)) & 0x800000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_GetFlashB1ProtectedAreaStartAddress(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR6) & ((0xFFFUL << (0U)))));
}






static inline uint32_t LL_SYSCFG_GetFlashB1ProtectedAreaEndAddress(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR6) & ((0xFFFUL << (16U)))));
}






static inline uint32_t LL_SYSCFG_GetFlashB1SecuredAreaStartAddress(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR7) & ((0xFFFUL << (0U)))));
}






static inline uint32_t LL_SYSCFG_GetFlashB1SecuredAreaEndAddress(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR7) & ((0xFFFUL << (16U)))));
}







static inline uint32_t LL_SYSCFG_IsFlashB2ProtectedAreaErasable(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR8) & ((0x1UL << (0U)))) == (0x1UL << (0U))) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB2SecuredAreaErasable(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR8) & ((0x1UL << (16U)))) == (0x1UL << (16U))) ? 1UL : 0UL);
}
# 1482 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_IsFlashB2Sector0WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR9) & ((0xFFUL << (0U)))) == ((0xFFUL << (0U)) & 0x10000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB2Sector1WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR9) & ((0xFFUL << (0U)))) == ((0xFFUL << (0U)) & 0x20000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB2Sector2WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR9) & ((0xFFUL << (0U)))) == ((0xFFUL << (0U)) & 0x40000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB2Sector3WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR9) & ((0xFFUL << (0U)))) == ((0xFFUL << (0U)) & 0x80000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB2Sector4WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR9) & ((0xFFUL << (0U)))) == ((0xFFUL << (0U)) & 0x100000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB2Sector5WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR9) & ((0xFFUL << (0U)))) == ((0xFFUL << (0U)) & 0x200000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB2Sector6WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR9) & ((0xFFUL << (0U)))) == ((0xFFUL << (0U)) & 0x400000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsFlashB2Sector7WriteProtected(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR9) & ((0xFFUL << (0U)))) == ((0xFFUL << (0U)) & 0x800000U)) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_GetFlashB2ProtectedAreaStartAddress(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR9) & ((0xFFFUL << (16U)))));
}
# 1574 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_GetFlashB2ProtectedAreaEndAddress(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR10) & ((0xFFFUL << (0U)))));
}






static inline uint32_t LL_SYSCFG_GetFlashB2SecuredAreaStartAddress(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR10) & ((0xFFFUL << (16U)))));
}
# 1596 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_GetFlashB2SecuredAreaEndAddress(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR11) & ((0xFFFUL << (0U)))));
}
# 1609 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_GetIWDG1ControlMode(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR11) & ((0x1UL << (16U)))));
}
# 1633 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_IsSecureModeEnabled(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR12) & ((0x1UL << (16U)))) == (0x1UL << (16U))) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsD1StandbyGenerateReset(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR13) & ((0x1UL << (16U)))) == 0U) ? 1UL : 0UL);
}
# 1657 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_GetSecuredDTCMSize(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR13) & ((0x3UL << (0U)))));
}






static inline uint32_t LL_SYSCFG_IsD1StopGenerateReset(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR14) & ((0x1UL << (0U)))) == 0U) ? 1UL : 0UL);
}
# 1699 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_IsIWDGFrozenInStandbyMode(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR15) & ((0x1UL << (16U)))) == 0U) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsIWDGFrozenInStopMode(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR16) & ((0x1UL << (0U)))) == 0U) ? 1UL : 0UL);
}






static inline uint32_t LL_SYSCFG_IsPrivateKeyProgrammed(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR16) & ((0x1UL << (16U)))) == (0x1UL << (16U))) ? 1UL : 0UL);
}
# 1732 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_SYSCFG_IsActiveFlag_IOHSLV(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x0400UL))->UR17) & ((0x1UL << (0U)))) == (0x1UL << (0U))) ? 1UL : 0UL);
}
# 1780 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_DBGMCU_GetDeviceID(void)
{
  return (uint32_t)(((((DBGMCU_TypeDef *) (0x5C001000UL))->IDCODE) & ((0xFFFUL << (0U)))));
}
# 1792 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_DBGMCU_GetRevisionID(void)
{
  return (uint32_t)(((((DBGMCU_TypeDef *) (0x5C001000UL))->IDCODE) & ((0xFFFFUL << (16U)))) >> (16U));
}






static inline void LL_DBGMCU_EnableD1DebugInSleepMode(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) |= ((0x1UL << (0U))));
}






static inline void LL_DBGMCU_DisableD1DebugInSleepMode(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) &= ~((0x1UL << (0U))));
}






static inline void LL_DBGMCU_EnableD1DebugInStopMode(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) |= ((0x1UL << (1U))));
}






static inline void LL_DBGMCU_DisableD1DebugInStopMode(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) &= ~((0x1UL << (1U))));
}






static inline void LL_DBGMCU_EnableD1DebugInStandbyMode(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) |= ((0x1UL << (2U))));
}






static inline void LL_DBGMCU_DisableD1DebugInStandbyMode(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) &= ~((0x1UL << (2U))));
}
# 1925 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_DBGMCU_EnableD3DebugInStopMode(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) |= ((0x1UL << (7U))));
}






static inline void LL_DBGMCU_DisableD3DebugInStopMode(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) &= ~((0x1UL << (7U))));
}






static inline void LL_DBGMCU_EnableD3DebugInStandbyMode(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) |= ((0x1UL << (8U))));
}






static inline void LL_DBGMCU_DisableD3DebugInStandbyMode(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) &= ~((0x1UL << (8U))));
}






static inline void LL_DBGMCU_EnableTracePortClock(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) |= ((0x1UL << (20U))));
}






static inline void LL_DBGMCU_DisableTracePortClock(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) &= ~((0x1UL << (20U))));
}






static inline void LL_DBGMCU_EnableD1DebugClock(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) |= ((0x1UL << (21U))));
}






static inline void LL_DBGMCU_DisableD1DebugClock(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) &= ~((0x1UL << (21U))));
}






static inline void LL_DBGMCU_EnableD3DebugClock(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) |= ((0x1UL << (22U))));
}






static inline void LL_DBGMCU_DisableD3DebugClock(void)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) &= ~((0x1UL << (22U))));
}
# 2030 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_DBGMCU_SetExternalTriggerPinDirection(uint32_t PinDirection)
{
  (((((DBGMCU_TypeDef *) (0x5C001000UL))->CR)) = ((((((((DBGMCU_TypeDef *) (0x5C001000UL))->CR))) & (~((0x1UL << (28U))))) | (PinDirection))));
}
# 2042 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_DBGMCU_GetExternalTriggerPinDirection(void)
{
  return (uint32_t)(((((DBGMCU_TypeDef *) (0x5C001000UL))->CR) & ((0x1UL << (28U)))));
}
# 2082 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_DBGMCU_APB1_GRP1_FreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->APB1LFZ1) |= (Periphs));
}
# 2122 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_DBGMCU_APB1_GRP1_UnFreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->APB1LFZ1) &= ~(Periphs));
}
# 2135 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->APB1HFZ1) |= (Periphs));
}
# 2147 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_DBGMCU_APB1_GRP2_UnFreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->APB1HFZ1) &= ~(Periphs));
}
# 2202 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->APB2FZ1) |= (Periphs));
}
# 2226 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_DBGMCU_APB2_GRP1_UnFreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->APB2FZ1) &= ~(Periphs));
}
# 2238 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_DBGMCU_APB3_GRP1_FreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->APB3FZ1) |= (Periphs));
}
# 2250 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_DBGMCU_APB3_GRP1_UnFreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->APB3FZ1) &= ~(Periphs));
}
# 2276 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_DBGMCU_APB4_GRP1_FreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->APB4FZ1) |= (Periphs));
}
# 2302 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_DBGMCU_APB4_GRP1_UnFreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0x5C001000UL))->APB4FZ1) &= ~(Periphs));
}
# 2328 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline void LL_FLASH_SetLatency(uint32_t Latency)
{
  (((((FLASH_TypeDef *) (((0x40000000UL) + 0x12000000UL) + 0x2000UL))->ACR)) = ((((((((FLASH_TypeDef *) (((0x40000000UL) + 0x12000000UL) + 0x2000UL))->ACR))) & (~((0xFUL << (0U))))) | (Latency))));
}
# 2346 "./lib/main/STM32H7/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_system.h"
static inline uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(((((FLASH_TypeDef *) (((0x40000000UL) + 0x12000000UL) + 0x2000UL))->ACR) & ((0xFUL << (0U)))));
}
# 64 "./src/main/platform.h" 2
# 1 "./src/main/drivers/stm32h7xx_ll_ex.h" 1
# 21 "./src/main/drivers/stm32h7xx_ll_ex.h"
       


# 1 "./src/main/common/utils.h" 1
# 21 "./src/main/common/utils.h"
       

# 1 "c:\\dev\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h" 1 3 4
# 24 "./src/main/common/utils.h" 2
# 100 "./src/main/common/utils.h"
static inline int16_t cmp16(uint16_t a, uint16_t b) { return (int16_t)(a-b); }
static inline int32_t cmp32(uint32_t a, uint32_t b) { return (int32_t)(a-b); }
# 110 "./src/main/common/utils.h"
void * memcpy_fn ( void * destination, const void * source, size_t num ) asm("memcpy");
# 25 "./src/main/drivers/stm32h7xx_ll_ex.h" 2






static inline DMA_TypeDef *LL_EX_DMA_Stream_to_DMA(DMA_Stream_TypeDef *DMAx_Streamy)
{

    return (DMA_TypeDef *) (((uint32_t) DMAx_Streamy) & ((uint32_t) ~0xFFU));
}

static inline uint32_t LL_EX_DMA_Stream_to_Stream(DMA_Stream_TypeDef *DMAx_Streamy)
{
    _Static_assert((((((0x40000000UL) + 0x00020000UL) + 0x0000UL) + 0x010UL) - (((0x40000000UL) + 0x00020000UL) + 0x0000UL) == sizeof(DMA_TypeDef)), "DMA_TypeDef_has_padding");
    _Static_assert((((((0x40000000UL) + 0x00020000UL) + 0x0000UL) + 0x028UL) - ((((0x40000000UL) + 0x00020000UL) + 0x0000UL) + 0x010UL) == sizeof(DMA_Stream_TypeDef)), "DMA_Stream_TypeDef_has_padding");

    const size_t firstStreamOffset = sizeof(DMA_TypeDef);
    const size_t streamSize = sizeof(DMA_Stream_TypeDef);

    return (((uint32_t) DMAx_Streamy & 0xFFU) - firstStreamOffset) / streamSize;
}



static inline uint32_t LL_EX_DMA_Init(DMA_Stream_TypeDef *DMAx_Streamy, LL_DMA_InitTypeDef *DMA_InitStruct) {
    DMA_TypeDef *DMA = LL_EX_DMA_Stream_to_DMA(DMAx_Streamy);
    const uint32_t Stream = LL_EX_DMA_Stream_to_Stream(DMAx_Streamy);

    return LL_DMA_Init(DMA, Stream, DMA_InitStruct);
}

static inline uint32_t LL_EX_DMA_DeInit(DMA_Stream_TypeDef *DMAx_Streamy) {
    DMA_TypeDef *DMA = LL_EX_DMA_Stream_to_DMA(DMAx_Streamy);
    const uint32_t Stream = LL_EX_DMA_Stream_to_Stream(DMAx_Streamy);

    return LL_DMA_DeInit(DMA, Stream);
}

static inline void LL_EX_DMA_EnableResource(DMA_Stream_TypeDef *DMAx_Streamy)
{
    ((DMAx_Streamy->CR) |= ((0x1UL << (0U))));
}

static inline void LL_EX_DMA_DisableResource(DMA_Stream_TypeDef *DMAx_Streamy)
{
    ((DMAx_Streamy->CR) &= ~((0x1UL << (0U))));
}

static inline void LL_EX_DMA_EnableIT_TC(DMA_Stream_TypeDef *DMAx_Streamy)
{
    ((DMAx_Streamy->CR) |= ((0x1UL << (4U))));
}

static inline void LL_EX_DMA_SetDataLength(DMA_Stream_TypeDef* DMAx_Streamy, uint32_t NbData)
{
    (((DMAx_Streamy->NDTR)) = ((((((DMAx_Streamy->NDTR))) & (~((0xFFFFUL << (0U))))) | (NbData))));
}

static inline uint32_t LL_EX_DMA_GetDataLength(DMA_Stream_TypeDef* DMAx_Streamy)
{
    DMA_TypeDef *DMA = LL_EX_DMA_Stream_to_DMA(DMAx_Streamy);
    const uint32_t Stream = LL_EX_DMA_Stream_to_Stream(DMAx_Streamy);
    return LL_DMA_GetDataLength(DMA, Stream);
}

static inline void LL_EX_TIM_EnableIT(TIM_TypeDef *TIMx, uint32_t Sources)
{
    ((TIMx->DIER) |= (Sources));
}

static inline void LL_EX_TIM_DisableIT(TIM_TypeDef *TIMx, uint32_t Sources)
{
    ((TIMx->DIER) &= ~(Sources));
}

static inline void LL_EX_TIM_CC_EnableNChannel(TIM_TypeDef *TIMx, uint32_t Channel)
{
    LL_TIM_CC_EnableChannel(TIMx, 4 * Channel);
}
# 65 "./src/main/platform.h" 2
# 149 "./src/main/platform.h"
# 1 "./src/main/target/common_pre.h" 1
# 21 "./src/main/target/common_pre.h"
       





#pragma GCC diagnostic ignored "-Wsign-conversion"
# 150 "./src/main/platform.h" 2
# 1 "./src/main/target/SPRACINGH7EXTREME/target.h" 1
# 21 "./src/main/target/SPRACINGH7EXTREME/target.h"
       
# 151 "./src/main/platform.h" 2
# 1 "./src/main/target/common_deprecated_post.h" 1
# 24 "./src/main/target/common_deprecated_post.h"
       
# 152 "./src/main/platform.h" 2
# 1 "./src/main/target/common_post.h" 1
# 23 "./src/main/target/common_post.h"
       

# 1 "./src/main/build/version.h" 1
# 21 "./src/main/build/version.h"
       
# 33 "./src/main/build/version.h"
extern const char* const targetName;


extern const char* const shortGitRevision;


extern const char* const buildDate;


extern const char* const buildTime;
# 26 "./src/main/target/common_post.h" 2
# 374 "./src/main/target/common_post.h"
extern uint8_t eepromData[4096];
# 153 "./src/main/platform.h" 2
# 1 "./src/main/target/common_defaults_post.h" 1
# 153 "./src/main/platform.h" 2
# 31 "./src/main/telemetry/mavlink.c" 2



# 1 "./src/main/common/maths.h" 1
# 21 "./src/main/common/maths.h"
       
# 63 "./src/main/common/maths.h"
typedef int32_t fix12_t;

typedef struct stdev_s
{
    float m_oldM, m_newM, m_oldS, m_newS;
    int m_n;
} stdev_t;


typedef struct fp_vector {
    float X;
    float Y;
    float Z;
} t_fp_vector_def;

typedef union u_fp_vector {
    float A[3];
    t_fp_vector_def V;
} t_fp_vector;



typedef struct fp_angles {
    float roll;
    float pitch;
    float yaw;
} fp_angles_def;

typedef union {
    float raw[3];
    fp_angles_def angles;
} fp_angles_t;

typedef struct fp_rotationMatrix_s {
    float m[3][3];
} fp_rotationMatrix_t;

int gcd(int num, int denom);
float powerf(float base, int exp);
int32_t applyDeadband(int32_t value, int32_t deadband);
float fapplyDeadband(float value, float deadband);

void devClear(stdev_t *dev);
void devPush(stdev_t *dev, float x);
float devVariance(stdev_t *dev);
float devStandardDeviation(stdev_t *dev);
float degreesToRadians(int16_t degrees);

int scaleRange(int x, int srcFrom, int srcTo, int destFrom, int destTo);
float scaleRangef(float x, float srcFrom, float srcTo, float destFrom, float destTo);

void normalizeV(struct fp_vector *src, struct fp_vector *dest);

void rotateV(struct fp_vector *v, fp_angles_t *delta);
void buildRotationMatrix(fp_angles_t *delta, fp_rotationMatrix_t *rotation);
void applyRotation(float *v, fp_rotationMatrix_t *rotationMatrix);

int32_t quickMedianFilter3(int32_t * v);
int32_t quickMedianFilter5(int32_t * v);
int32_t quickMedianFilter7(int32_t * v);
int32_t quickMedianFilter9(int32_t * v);

float quickMedianFilter3f(float * v);
float quickMedianFilter5f(float * v);
float quickMedianFilter7f(float * v);
float quickMedianFilter9f(float * v);


float sin_approx(float x);
float cos_approx(float x);
float atan2_approx(float y, float x);
float acos_approx(float x);

float exp_approx(float val);
float log_approx(float val);
float pow_approx(float a, float b);
# 150 "./src/main/common/maths.h"
void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);

int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static inline int constrain(int amt, int low, int high)
{
    if (amt < low)
        return low;
    else if (amt > high)
        return high;
    else
        return amt;
}

static inline float constrainf(float amt, float low, float high)
{
    if (amt < low)
        return low;
    else if (amt > high)
        return high;
    else
        return amt;
}
# 35 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/common/axis.h" 1
# 21 "./src/main/common/axis.h"
       

typedef enum {
    X = 0,
    Y,
    Z
} axis_e;




typedef enum {
    FD_ROLL = 0,
    FD_PITCH,
    FD_YAW
} flight_dynamics_index_t;



typedef enum {
    AI_ROLL = 0,
    AI_PITCH
} angle_index_t;
# 36 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/common/color.h" 1
# 21 "./src/main/common/color.h"
       


typedef enum {
    RGB_RED = 0,
    RGB_GREEN,
    RGB_BLUE
} colorComponent_e;



struct rgbColor24bpp_s {
    uint8_t r;
    uint8_t g;
    uint8_t b;
};

typedef union {
    struct rgbColor24bpp_s rgb;
    uint8_t raw[(RGB_BLUE + 1)];
} rgbColor24bpp_t;





typedef enum {
    HSV_HUE = 0,
    HSV_SATURATION,
    HSV_VALUE
} hsvColorComponent_e;



typedef struct hsvColor_s {
    uint16_t h;
    uint8_t s;
    uint8_t v;
} hsvColor_t;
# 37 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/config/feature.h" 1
# 21 "./src/main/config/feature.h"
       

# 1 "./src/main/pg/pg.h" 1
# 21 "./src/main/pg/pg.h"
       




# 1 "./src/main/build/build_config.h" 1
# 21 "./src/main/build/build_config.h"
       
# 44 "./src/main/build/build_config.h"
typedef enum {
    MCU_TYPE_SIMULATOR = 0,
    MCU_TYPE_F103,
    MCU_TYPE_F303,
    MCU_TYPE_F40X,
    MCU_TYPE_F411,
    MCU_TYPE_F446,
    MCU_TYPE_F722,
    MCU_TYPE_F745,
    MCU_TYPE_F746,
    MCU_TYPE_F765,
    MCU_TYPE_H750,
    MCU_TYPE_H743_REV_UNKNOWN,
    MCU_TYPE_H743_REV_Y,
    MCU_TYPE_H743_REV_X,
    MCU_TYPE_H743_REV_V,
    MCU_TYPE_H7A3,
    MCU_TYPE_H723_725,
    MCU_TYPE_UNKNOWN = 255,
} mcuTypeId_e;

mcuTypeId_e getMcuTypeId(void);
# 27 "./src/main/pg/pg.h" 2

typedef uint16_t pgn_t;


typedef enum {
    PGRF_NONE = 0,
    PGRF_CLASSIFICATON_BIT = (1 << 0)
} pgRegistryFlags_e;

typedef enum {
    PGR_PGN_MASK = 0x0fff,
    PGR_PGN_VERSION_MASK = 0xf000,
    PGR_SIZE_MASK = 0x0fff,
    PGR_SIZE_SYSTEM_FLAG = 0x0000
} pgRegistryInternal_e;


typedef void (pgResetFunc)(void * );

typedef struct pgRegistry_s {
    pgn_t pgn;
    uint8_t length;
    uint16_t size;
    uint8_t *address;
    uint8_t *copy;
    uint8_t **ptr;
    union {
        void *ptr;
        pgResetFunc *fn;
    } reset;
} pgRegistry_t;

static inline uint16_t pgN(const pgRegistry_t* reg) {return reg->pgn & PGR_PGN_MASK;}
static inline uint8_t pgVersion(const pgRegistry_t* reg) {return (uint8_t)(reg->pgn >> 12);}
static inline uint16_t pgSize(const pgRegistry_t* reg) {return reg->size & PGR_SIZE_MASK;}
static inline uint16_t pgElementSize(const pgRegistry_t* reg) {return (reg->size & PGR_SIZE_MASK) / reg->length;}
# 75 "./src/main/pg/pg.h"
extern const pgRegistry_t __pg_registry_start[];
extern const pgRegistry_t __pg_registry_end[];


extern const uint8_t __pg_resetdata_start[];
extern const uint8_t __pg_resetdata_end[];
# 194 "./src/main/pg/pg.h"
const pgRegistry_t* pgFind(pgn_t pgn);


# 196 "./src/main/pg/pg.h" 3 4
_Bool 
# 196 "./src/main/pg/pg.h"
    pgLoad(const pgRegistry_t* reg, const void *from, int size, int version);
int pgStore(const pgRegistry_t* reg, void *to, int size);
void pgResetAll(void);
void pgResetInstance(const pgRegistry_t *reg, uint8_t *base);

# 200 "./src/main/pg/pg.h" 3 4
_Bool 
# 200 "./src/main/pg/pg.h"
    pgResetCopy(void *copy, pgn_t pgn);
void pgReset(const pgRegistry_t* reg);
# 24 "./src/main/config/feature.h" 2
# 32 "./src/main/config/feature.h"
typedef enum {
    FEATURE_RX_PPM = 1 << 0,
    FEATURE_INFLIGHT_ACC_CAL = 1 << 2,
    FEATURE_RX_SERIAL = 1 << 3,
    FEATURE_MOTOR_STOP = 1 << 4,
    FEATURE_SERVO_TILT = 1 << 5,
    FEATURE_SOFTSERIAL = 1 << 6,
    FEATURE_GPS = 1 << 7,
    FEATURE_RANGEFINDER = 1 << 9,
    FEATURE_TELEMETRY = 1 << 10,
    FEATURE_3D = 1 << 12,
    FEATURE_RX_PARALLEL_PWM = 1 << 13,
    FEATURE_RX_MSP = 1 << 14,
    FEATURE_RSSI_ADC = 1 << 15,
    FEATURE_LED_STRIP = 1 << 16,
    FEATURE_DASHBOARD = 1 << 17,
    FEATURE_OSD = 1 << 18,
    FEATURE_CHANNEL_FORWARDING = 1 << 20,
    FEATURE_TRANSPONDER = 1 << 21,
    FEATURE_AIRMODE = 1 << 22,
    FEATURE_RX_SPI = 1 << 25,

    FEATURE_ESC_SENSOR = 1 << 27,
    FEATURE_ANTI_GRAVITY = 1 << 28,
    FEATURE_DYNAMIC_FILTER = 1 << 29,
} features_e;

typedef struct featureConfig_s {
    uint32_t enabledFeatures;
} featureConfig_t;

extern featureConfig_t featureConfig_System; extern featureConfig_t featureConfig_Copy; static inline const featureConfig_t* featureConfig(void) { return &featureConfig_System; } static inline featureConfig_t* featureConfigMutable(void) { return &featureConfig_System; } struct _dummy;

void featureInit(void);

# 66 "./src/main/config/feature.h" 3 4
_Bool 
# 66 "./src/main/config/feature.h"
    featureIsEnabled(const uint32_t mask);

# 67 "./src/main/config/feature.h" 3 4
_Bool 
# 67 "./src/main/config/feature.h"
    featureIsConfigured(const uint32_t mask);
void featureEnableImmediate(const uint32_t mask);
void featureDisableImmediate(const uint32_t mask);
void featureConfigSet(const uint32_t mask);
void featureConfigClear(const uint32_t mask);
void featureConfigReplace(const uint32_t mask);
# 39 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/pg/pg_ids.h" 1
# 21 "./src/main/pg/pg_ids.h"
       
# 41 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/pg/rx.h" 1
# 21 "./src/main/pg/rx.h"
       

# 1 "./src/main/drivers/io_types.h" 1
# 21 "./src/main/drivers/io_types.h"
       





typedef uint8_t ioTag_t;
typedef void* IO_t;
# 48 "./src/main/drivers/io_types.h"
typedef uint8_t ioConfig_t;
# 24 "./src/main/pg/rx.h" 2






typedef struct rxConfig_s {
    uint8_t rcmap[8];
    uint8_t serialrx_provider;
    uint8_t serialrx_inverted;
    uint8_t halfDuplex;
    ioTag_t spektrum_bind_pin_override_ioTag;
    ioTag_t spektrum_bind_plug_ioTag;
    uint8_t spektrum_sat_bind;
    uint8_t spektrum_sat_bind_autoreset;
    uint8_t rssi_channel;
    uint8_t rssi_scale;
    uint8_t rssi_invert;
    uint16_t midrc;
    uint16_t mincheck;
    uint16_t maxcheck;
    uint8_t rcInterpolation;
    uint8_t rcInterpolationChannels;
    uint8_t rcInterpolationInterval;
    uint8_t fpvCamAngleDegrees;
    uint8_t airModeActivateThreshold;

    uint16_t rx_min_usec;
    uint16_t rx_max_usec;
    uint8_t max_aux_channel;
    uint8_t rssi_src_frame_errors;
    int8_t rssi_offset;
    uint8_t rc_smoothing_type;
    uint8_t rc_smoothing_input_cutoff;
    uint8_t rc_smoothing_derivative_cutoff;
    uint8_t rc_smoothing_debug_axis;
    uint8_t rc_smoothing_input_type;
    uint8_t rc_smoothing_derivative_type;
    uint8_t rc_smoothing_auto_factor;
    uint8_t rssi_src_frame_lpf_period;

    uint8_t srxl2_unit_id;
    uint8_t srxl2_baud_fast;
    uint8_t sbus_baud_fast;
    uint8_t crsf_use_rx_snr;

    uint32_t msp_override_channels_mask;
} rxConfig_t;

extern rxConfig_t rxConfig_System; extern rxConfig_t rxConfig_Copy; static inline const rxConfig_t* rxConfig(void) { return &rxConfig_System; } static inline rxConfig_t* rxConfigMutable(void) { return &rxConfig_System; } struct _dummy;
# 42 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/drivers/accgyro/accgyro.h" 1
# 21 "./src/main/drivers/accgyro/accgyro.h"
       





# 1 "./src/main/common/sensor_alignment.h" 1
# 21 "./src/main/common/sensor_alignment.h"
       




typedef enum {
    ALIGN_DEFAULT = 0,




    CW0_DEG = 1,
    CW90_DEG = 2,
    CW180_DEG = 3,
    CW270_DEG = 4,
    CW0_DEG_FLIP = 5,
    CW90_DEG_FLIP = 6,
    CW180_DEG_FLIP = 7,
    CW270_DEG_FLIP = 8,

    ALIGN_CUSTOM = 9,
} sensor_align_e;

typedef union sensorAlignment_u {




    int16_t raw[3];
    struct {
        int16_t roll;
        int16_t pitch;
        int16_t yaw;
    };
} sensorAlignment_t;
# 72 "./src/main/common/sensor_alignment.h"
void buildRotationMatrixFromAlignment(const sensorAlignment_t* alignment, fp_rotationMatrix_t* rm);
void buildAlignmentFromStandardAlignment(sensorAlignment_t* sensorAlignment, sensor_align_e alignment);
# 28 "./src/main/drivers/accgyro/accgyro.h" 2
# 1 "./src/main/drivers/exti.h" 1
# 21 "./src/main/drivers/exti.h"
       





typedef enum {
    BETAFLIGHT_EXTI_TRIGGER_RISING = 0,
    BETAFLIGHT_EXTI_TRIGGER_FALLING = 1,
    BETAFLIGHT_EXTI_TRIGGER_BOTH = 2
} extiTrigger_t;

typedef struct extiCallbackRec_s extiCallbackRec_t;
typedef void extiHandlerCallback(extiCallbackRec_t *self);

struct extiCallbackRec_s {
    extiHandlerCallback *fn;
};

void EXTIInit(void);

void EXTIHandlerInit(extiCallbackRec_t *cb, extiHandlerCallback *fn);
void EXTIConfig(IO_t io, extiCallbackRec_t *cb, int irqPriority, ioConfig_t config, extiTrigger_t trigger);
void EXTIRelease(IO_t io);
void EXTIEnable(IO_t io, 
# 45 "./src/main/drivers/exti.h" 3 4
                        _Bool 
# 45 "./src/main/drivers/exti.h"
                             enable);
# 29 "./src/main/drivers/accgyro/accgyro.h" 2
# 1 "./src/main/drivers/bus.h" 1
# 21 "./src/main/drivers/bus.h"
       



# 1 "./src/main/drivers/bus_i2c.h" 1
# 21 "./src/main/drivers/bus_i2c.h"
       




# 1 "./src/main/drivers/rcc_types.h" 1
# 21 "./src/main/drivers/rcc_types.h"
       


typedef uint16_t rccPeriphTag_t;
# 27 "./src/main/drivers/bus_i2c.h" 2





typedef enum I2CDevice {
    I2CINVALID = -1,
    I2CDEV_1 = 0,
    I2CDEV_2,
    I2CDEV_3,
    I2CDEV_4,
} I2CDevice;
# 58 "./src/main/drivers/bus_i2c.h"
struct i2cConfig_s;
void i2cHardwareConfigure(const struct i2cConfig_s *i2cConfig);
void i2cInit(I2CDevice device);

# 61 "./src/main/drivers/bus_i2c.h" 3 4
_Bool 
# 61 "./src/main/drivers/bus_i2c.h"
    i2cWriteBuffer(I2CDevice device, uint8_t addr_, uint8_t reg_, uint8_t len_, uint8_t *data);

# 62 "./src/main/drivers/bus_i2c.h" 3 4
_Bool 
# 62 "./src/main/drivers/bus_i2c.h"
    i2cWrite(I2CDevice device, uint8_t addr_, uint8_t reg, uint8_t data);

# 63 "./src/main/drivers/bus_i2c.h" 3 4
_Bool 
# 63 "./src/main/drivers/bus_i2c.h"
    i2cReadBuffer(I2CDevice device, uint8_t addr_, uint8_t reg, uint8_t len, uint8_t* buf);

# 64 "./src/main/drivers/bus_i2c.h" 3 4
_Bool 
# 64 "./src/main/drivers/bus_i2c.h"
    i2cRead(I2CDevice device, uint8_t addr_, uint8_t reg, uint8_t len, uint8_t* buf);

# 65 "./src/main/drivers/bus_i2c.h" 3 4
_Bool 
# 65 "./src/main/drivers/bus_i2c.h"
    i2cBusy(I2CDevice device, 
# 65 "./src/main/drivers/bus_i2c.h" 3 4
                              _Bool 
# 65 "./src/main/drivers/bus_i2c.h"
                                   *error);

uint16_t i2cGetErrorCounter(void);
uint8_t i2cGetRegisteredDeviceCount(void);
# 26 "./src/main/drivers/bus.h" 2


typedef enum {
    BUSTYPE_NONE = 0,
    BUSTYPE_I2C,
    BUSTYPE_SPI,
    BUSTYPE_MPU_SLAVE,
    BUSTYPE_GYRO_AUTO,
} busType_e;

struct spiDevice_s;

typedef struct busDevice_s {
    busType_e bustype;
    union {
        struct deviceSpi_s {
            SPI_TypeDef *instance;






            SPI_HandleTypeDef* handle;

            IO_t csnPin;
        } spi;
        struct deviceI2C_s {
            I2CDevice device;
            uint8_t address;
        } i2c;
        struct deviceMpuSlave_s {
            const struct busDevice_s *master;
            uint8_t address;
        } mpuSlave;
    } busdev_u;
} busDevice_t;






# 68 "./src/main/drivers/bus.h" 3 4
_Bool 
# 68 "./src/main/drivers/bus.h"
    busRawWriteRegister(const busDevice_t *bus, uint8_t reg, uint8_t data);

# 69 "./src/main/drivers/bus.h" 3 4
_Bool 
# 69 "./src/main/drivers/bus.h"
    busWriteRegister(const busDevice_t *bus, uint8_t reg, uint8_t data);

# 70 "./src/main/drivers/bus.h" 3 4
_Bool 
# 70 "./src/main/drivers/bus.h"
    busRawWriteRegisterStart(const busDevice_t *bus, uint8_t reg, uint8_t data);

# 71 "./src/main/drivers/bus.h" 3 4
_Bool 
# 71 "./src/main/drivers/bus.h"
    busWriteRegisterStart(const busDevice_t *bus, uint8_t reg, uint8_t data);

# 72 "./src/main/drivers/bus.h" 3 4
_Bool 
# 72 "./src/main/drivers/bus.h"
    busRawReadRegisterBuffer(const busDevice_t *bus, uint8_t reg, uint8_t *data, uint8_t length);

# 73 "./src/main/drivers/bus.h" 3 4
_Bool 
# 73 "./src/main/drivers/bus.h"
    busReadRegisterBuffer(const busDevice_t *bus, uint8_t reg, uint8_t *data, uint8_t length);
uint8_t busReadRegister(const busDevice_t *bus, uint8_t reg);

# 75 "./src/main/drivers/bus.h" 3 4
_Bool 
# 75 "./src/main/drivers/bus.h"
    busRawReadRegisterBufferStart(const busDevice_t *busdev, uint8_t reg, uint8_t *data, uint8_t length);

# 76 "./src/main/drivers/bus.h" 3 4
_Bool 
# 76 "./src/main/drivers/bus.h"
    busReadRegisterBufferStart(const busDevice_t *busdev, uint8_t reg, uint8_t *data, uint8_t length);

# 77 "./src/main/drivers/bus.h" 3 4
_Bool 
# 77 "./src/main/drivers/bus.h"
    busBusy(const busDevice_t *busdev, 
# 77 "./src/main/drivers/bus.h" 3 4
                                       _Bool 
# 77 "./src/main/drivers/bus.h"
                                            *error);
void busDeviceRegister(const busDevice_t *busdev);
# 30 "./src/main/drivers/accgyro/accgyro.h" 2
# 1 "./src/main/drivers/sensor.h" 1
# 21 "./src/main/drivers/sensor.h"
       




typedef 
# 26 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 26 "./src/main/drivers/sensor.h"
            (*sensorInterruptFuncPtr)(void);
struct magDev_s;
typedef 
# 28 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 28 "./src/main/drivers/sensor.h"
            (*sensorMagInitFuncPtr)(struct magDev_s *magdev);
typedef 
# 29 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 29 "./src/main/drivers/sensor.h"
            (*sensorMagReadFuncPtr)(struct magDev_s *magdev, int16_t *data);
struct accDev_s;
typedef void (*sensorAccInitFuncPtr)(struct accDev_s *acc);
typedef 
# 32 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 32 "./src/main/drivers/sensor.h"
            (*sensorAccReadFuncPtr)(struct accDev_s *acc);
struct gyroDev_s;
typedef void (*sensorGyroInitFuncPtr)(struct gyroDev_s *gyro);
typedef 
# 35 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 35 "./src/main/drivers/sensor.h"
            (*sensorGyroReadFuncPtr)(struct gyroDev_s *gyro);
typedef 
# 36 "./src/main/drivers/sensor.h" 3 4
       _Bool 
# 36 "./src/main/drivers/sensor.h"
            (*sensorGyroReadDataFuncPtr)(struct gyroDev_s *gyro, int16_t *data);
# 31 "./src/main/drivers/accgyro/accgyro.h" 2
# 1 "./src/main/drivers/accgyro/accgyro_mpu.h" 1
# 21 "./src/main/drivers/accgyro/accgyro_mpu.h"
       
# 144 "./src/main/drivers/accgyro/accgyro_mpu.h"
enum gyro_fsr_e {
    INV_FSR_250DPS = 0,
    INV_FSR_500DPS,
    INV_FSR_1000DPS,
    INV_FSR_2000DPS,
    NUM_GYRO_FSR
};

enum icm_high_range_gyro_fsr_e {
    ICM_HIGH_RANGE_FSR_500DPS = 0,
    ICM_HIGH_RANGE_FSR_1000DPS,
    ICM_HIGH_RANGE_FSR_2000DPS,
    ICM_HIGH_RANGE_FSR_4000DPS,
    NUM_ICM_HIGH_RANGE_GYRO_FSR
};

enum clock_sel_e {
    INV_CLK_INTERNAL = 0,
    INV_CLK_PLL,
    NUM_CLK
};

enum accel_fsr_e {
    INV_FSR_2G = 0,
    INV_FSR_4G,
    INV_FSR_8G,
    INV_FSR_16G,
    NUM_ACCEL_FSR
};

enum icm_high_range_accel_fsr_e {
    ICM_HIGH_RANGE_FSR_4G = 0,
    ICM_HIGH_RANGE_FSR_8G,
    ICM_HIGH_RANGE_FSR_16G,
    ICM_HIGH_RANGE_FSR_32G,
    NUM_ICM_HIGH_RANGE_ACCEL_FSR
};

typedef enum {
    GYRO_OVERFLOW_NONE = 0x00,
    GYRO_OVERFLOW_X = 0x01,
    GYRO_OVERFLOW_Y = 0x02,
    GYRO_OVERFLOW_Z = 0x04
} gyroOverflow_e;

typedef enum {
    MPU_NONE,
    MPU_3050,
    MPU_60x0,
    MPU_60x0_SPI,
    MPU_65xx_I2C,
    MPU_65xx_SPI,
    MPU_9250_SPI,
    ICM_20601_SPI,
    ICM_20602_SPI,
    ICM_20608_SPI,
    ICM_20649_SPI,
    ICM_20689_SPI,
    ICM_42605_SPI,
    BMI_160_SPI,
    BMI_270_SPI,
    LSM6DSO_SPI,
    L3GD20_SPI,
} mpuSensor_e;

typedef enum {
    MPU_HALF_RESOLUTION,
    MPU_FULL_RESOLUTION
} mpu6050Resolution_e;

typedef struct mpuDetectionResult_s {
    mpuSensor_e sensor;
    mpu6050Resolution_e resolution;
} mpuDetectionResult_t;

struct gyroDev_s;
struct gyroDeviceConfig_s;
void mpuGyroInit(struct gyroDev_s *gyro);

# 222 "./src/main/drivers/accgyro/accgyro_mpu.h" 3 4
_Bool 
# 222 "./src/main/drivers/accgyro/accgyro_mpu.h"
    mpuGyroRead(struct gyroDev_s *gyro);

# 223 "./src/main/drivers/accgyro/accgyro_mpu.h" 3 4
_Bool 
# 223 "./src/main/drivers/accgyro/accgyro_mpu.h"
    mpuGyroReadSPI(struct gyroDev_s *gyro);
void mpuPreInit(const struct gyroDeviceConfig_s *config);

# 225 "./src/main/drivers/accgyro/accgyro_mpu.h" 3 4
_Bool 
# 225 "./src/main/drivers/accgyro/accgyro_mpu.h"
    mpuDetect(struct gyroDev_s *gyro, const struct gyroDeviceConfig_s *config);
uint8_t mpuGyroDLPF(struct gyroDev_s *gyro);
uint8_t mpuGyroReadRegister(const busDevice_t *bus, uint8_t reg);

struct accDev_s;

# 230 "./src/main/drivers/accgyro/accgyro_mpu.h" 3 4
_Bool 
# 230 "./src/main/drivers/accgyro/accgyro_mpu.h"
    mpuAccRead(struct accDev_s *acc);
# 32 "./src/main/drivers/accgyro/accgyro.h" 2

#pragma GCC diagnostic push



#pragma GCC diagnostic warning "-Wpadded"





typedef enum {
    GYRO_NONE = 0,
    GYRO_DEFAULT,
    GYRO_MPU6050,
    GYRO_L3G4200D,
    GYRO_MPU3050,
    GYRO_L3GD20,
    GYRO_MPU6000,
    GYRO_MPU6500,
    GYRO_MPU9250,
    GYRO_ICM20601,
    GYRO_ICM20602,
    GYRO_ICM20608G,
    GYRO_ICM20649,
    GYRO_ICM20689,
    GYRO_ICM42605,
    GYRO_BMI160,
    GYRO_BMI270,
    GYRO_LSM6DSO,
    GYRO_FAKE
} gyroHardware_e;

typedef enum {
    GYRO_HARDWARE_LPF_NORMAL,

    GYRO_HARDWARE_LPF_EXPERIMENTAL

} gyroHardwareLpf_e;

typedef enum {
    GYRO_RATE_1_kHz,
    GYRO_RATE_1100_Hz,
    GYRO_RATE_3200_Hz,
    GYRO_RATE_6400_Hz,
    GYRO_RATE_6664_Hz,
    GYRO_RATE_8_kHz,
    GYRO_RATE_9_kHz,
    GYRO_RATE_32_kHz,
} gyroRateKHz_e;

typedef struct gyroDev_s {



    sensorGyroInitFuncPtr initFn;
    sensorGyroReadFuncPtr readFn;
    sensorGyroReadDataFuncPtr temperatureFn;
    extiCallbackRec_t exti;
    busDevice_t bus;
    float scale;
    float gyroZero[3];
    float gyroADC[3];
    int32_t gyroADCRawPrevious[3];
    int16_t gyroADCRaw[3];
    int16_t temperature;
    mpuDetectionResult_t mpuDetectionResult;
    sensor_align_e gyroAlign;
    gyroRateKHz_e gyroRateKHz;
    
# 101 "./src/main/drivers/accgyro/accgyro.h" 3 4
   _Bool 
# 101 "./src/main/drivers/accgyro/accgyro.h"
        dataReady;
    
# 102 "./src/main/drivers/accgyro/accgyro.h" 3 4
   _Bool 
# 102 "./src/main/drivers/accgyro/accgyro.h"
        gyro_high_fsr;
    uint8_t hardware_lpf;
    uint8_t hardware_32khz_lpf;
    uint8_t mpuDividerDrops;
    ioTag_t mpuIntExtiTag;
    uint8_t gyroHasOverflowProtection;
    gyroHardware_e gyroHardware;
    fp_rotationMatrix_t rotationMatrix;
    uint16_t gyroSampleRateHz;
    uint16_t accSampleRateHz;
} gyroDev_t;

typedef struct accDev_s {



    float acc_1G_rec;
    sensorAccInitFuncPtr initFn;
    sensorAccReadFuncPtr readFn;
    busDevice_t bus;
    uint16_t acc_1G;
    int16_t ADCRaw[3];
    mpuDetectionResult_t mpuDetectionResult;
    sensor_align_e accAlign;
    
# 126 "./src/main/drivers/accgyro/accgyro.h" 3 4
   _Bool 
# 126 "./src/main/drivers/accgyro/accgyro.h"
        dataReady;
    
# 127 "./src/main/drivers/accgyro/accgyro.h" 3 4
   _Bool 
# 127 "./src/main/drivers/accgyro/accgyro.h"
        acc_high_fsr;
    char revisionCode;
    uint8_t filler[2];
    fp_rotationMatrix_t rotationMatrix;
} accDev_t;

static inline void accDevLock(accDev_t *acc)
{



    (void)acc;

}

static inline void accDevUnLock(accDev_t *acc)
{



    (void)acc;

}

static inline void gyroDevLock(gyroDev_t *gyro)
{



    (void)gyro;

}

static inline void gyroDevUnLock(gyroDev_t *gyro)
{



    (void)gyro;

}
#pragma GCC diagnostic pop
# 44 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/drivers/time.h" 1
# 21 "./src/main/drivers/time.h"
       



# 1 "./src/main/common/time.h" 1
# 21 "./src/main/common/time.h"
       
# 31 "./src/main/common/time.h"
typedef int32_t timeDelta_t;

typedef uint32_t timeMs_t ;





typedef uint32_t timeUs_t;






static inline timeDelta_t cmpTimeUs(timeUs_t a, timeUs_t b) { return (timeDelta_t)(a - b); }





typedef struct timeConfig_s {
    int16_t tz_offsetMinutes;
} timeConfig_t;

extern timeConfig_t timeConfig_System; extern timeConfig_t timeConfig_Copy; static inline const timeConfig_t* timeConfig(void) { return &timeConfig_System; } static inline timeConfig_t* timeConfigMutable(void) { return &timeConfig_System; } struct _dummy;


typedef int64_t rtcTime_t;

rtcTime_t rtcTimeMake(int32_t secs, uint16_t millis);
int32_t rtcTimeGetSeconds(rtcTime_t *t);
uint16_t rtcTimeGetMillis(rtcTime_t *t);

typedef struct _dateTime_s {

    uint16_t year;

    uint8_t month;

    uint8_t day;

    uint8_t hours;

    uint8_t minutes;

    uint8_t seconds;

    uint16_t millis;
} dateTime_t;



# 83 "./src/main/common/time.h" 3 4
_Bool 
# 83 "./src/main/common/time.h"
    dateTimeFormatUTC(char *buf, dateTime_t *dt);

# 84 "./src/main/common/time.h" 3 4
_Bool 
# 84 "./src/main/common/time.h"
    dateTimeFormatLocal(char *buf, dateTime_t *dt);

# 85 "./src/main/common/time.h" 3 4
_Bool 
# 85 "./src/main/common/time.h"
    dateTimeFormatLocalShort(char *buf, dateTime_t *dt);

void dateTimeUTCToLocal(dateTime_t *utcDateTime, dateTime_t *localDateTime);




# 91 "./src/main/common/time.h" 3 4
_Bool 
# 91 "./src/main/common/time.h"
    dateTimeSplitFormatted(char *formatted, char **date, char **time);


# 93 "./src/main/common/time.h" 3 4
_Bool 
# 93 "./src/main/common/time.h"
    rtcHasTime(void);


# 95 "./src/main/common/time.h" 3 4
_Bool 
# 95 "./src/main/common/time.h"
    rtcGet(rtcTime_t *t);

# 96 "./src/main/common/time.h" 3 4
_Bool 
# 96 "./src/main/common/time.h"
    rtcSet(rtcTime_t *t);


# 98 "./src/main/common/time.h" 3 4
_Bool 
# 98 "./src/main/common/time.h"
    rtcGetDateTime(dateTime_t *dt);

# 99 "./src/main/common/time.h" 3 4
_Bool 
# 99 "./src/main/common/time.h"
    rtcSetDateTime(dateTime_t *dt);

void rtcPersistWrite(int16_t offsetMinutes);

# 102 "./src/main/common/time.h" 3 4
_Bool 
# 102 "./src/main/common/time.h"
    rtcPersistRead(rtcTime_t *t);
# 26 "./src/main/drivers/time.h" 2

void delayMicroseconds(timeUs_t us);
void delay(timeMs_t ms);

timeUs_t micros(void);
timeUs_t microsISR(void);
timeMs_t millis(void);

uint32_t ticks(void);
timeDelta_t ticks_diff_us(uint32_t begin, uint32_t end);
# 46 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/config/config.h" 1
# 21 "./src/main/config/config.h"
       
# 30 "./src/main/config/config.h"
typedef enum {
    CONFIGURATION_STATE_DEFAULTS_BARE = 0,
    CONFIGURATION_STATE_DEFAULTS_CUSTOM,
    CONFIGURATION_STATE_CONFIGURED,
} configurationState_e;

typedef enum {
    SCHEDULER_OPTIMIZE_RATE_OFF = 0,
    SCHEDULER_OPTIMIZE_RATE_ON,
    SCHEDULER_OPTIMIZE_RATE_AUTO,
} schedulerOptimizeRate_e;

typedef struct pilotConfig_s {
    char name[16u + 1];
    char displayName[16u + 1];
} pilotConfig_t;

extern pilotConfig_t pilotConfig_System; extern pilotConfig_t pilotConfig_Copy; static inline const pilotConfig_t* pilotConfig(void) { return &pilotConfig_System; } static inline pilotConfig_t* pilotConfigMutable(void) { return &pilotConfig_System; } struct _dummy;

typedef struct systemConfig_s {
    uint8_t pidProfileIndex;
    uint8_t activeRateProfile;
    uint8_t debug_mode;
    uint8_t task_statistics;
    uint8_t rateProfile6PosSwitch;
    uint8_t cpu_overclock;
    uint8_t powerOnArmingGraceTime;
    char boardIdentifier[sizeof("SP7E") + 1];
    uint8_t hseMhz;
    uint8_t configurationState;
    uint8_t schedulerOptimizeRate;
    uint8_t enableStickArming;
} systemConfig_t;

extern systemConfig_t systemConfig_System; extern systemConfig_t systemConfig_Copy; static inline const systemConfig_t* systemConfig(void) { return &systemConfig_System; } static inline systemConfig_t* systemConfigMutable(void) { return &systemConfig_System; } struct _dummy;

struct pidProfile_s;
extern struct pidProfile_s *currentPidProfile;

void initEEPROM(void);

# 70 "./src/main/config/config.h" 3 4
_Bool 
# 70 "./src/main/config/config.h"
    resetEEPROM(
# 70 "./src/main/config/config.h" 3 4
                _Bool 
# 70 "./src/main/config/config.h"
                     useCustomDefaults);

# 71 "./src/main/config/config.h" 3 4
_Bool 
# 71 "./src/main/config/config.h"
    readEEPROM(void);
void writeEEPROM(void);
void writeUnmodifiedConfigToEEPROM(void);
void ensureEEPROMStructureIsValid(void);

void saveConfigAndNotify(void);
void validateAndFixGyroConfig(void);

void setConfigDirty(void);

# 80 "./src/main/config/config.h" 3 4
_Bool 
# 80 "./src/main/config/config.h"
    isConfigDirty(void);

uint8_t getCurrentPidProfileIndex(void);
void changePidProfile(uint8_t pidProfileIndex);
void changePidProfileFromCellCount(uint8_t cellCount);
struct pidProfile_s;
void resetPidProfile(struct pidProfile_s *profile);

uint8_t getCurrentControlRateProfileIndex(void);
void changeControlRateProfile(uint8_t profileIndex);


# 91 "./src/main/config/config.h" 3 4
_Bool 
# 91 "./src/main/config/config.h"
    canSoftwareSerialBeUsed(void);

uint16_t getCurrentMinthrottle(void);

void resetConfig(void);
void targetConfiguration(void);
void targetValidateConfiguration(void);


# 99 "./src/main/config/config.h" 3 4
_Bool 
# 99 "./src/main/config/config.h"
    isSystemConfigured(void);
void setRebootRequired(void);

# 101 "./src/main/config/config.h" 3 4
_Bool 
# 101 "./src/main/config/config.h"
    getRebootRequired(void);
# 48 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/fc/rc_controls.h" 1
# 21 "./src/main/fc/rc_controls.h"
       



# 1 "./src/main/common/filter.h" 1
# 21 "./src/main/common/filter.h"
       


struct filter_s;
typedef struct filter_s filter_t;

typedef struct pt1Filter_s {
    float state;
    float k;
} pt1Filter_t;

typedef struct slewFilter_s {
    float state;
    float slewLimit;
    float threshold;
} slewFilter_t;


typedef struct biquadFilter_s {
    float b0, b1, b2, a1, a2;
    float x1, x2, y1, y2;
} biquadFilter_t;

typedef struct laggedMovingAverage_s {
    uint16_t movingWindowIndex;
    uint16_t windowSize;
    float movingSum;
    float *buf;
    
# 49 "./src/main/common/filter.h" 3 4
   _Bool 
# 49 "./src/main/common/filter.h"
        primed;
} laggedMovingAverage_t;

typedef enum {
    FILTER_PT1 = 0,
    FILTER_BIQUAD,
} lowpassFilterType_e;

typedef enum {
    FILTER_LPF,
    FILTER_NOTCH,
    FILTER_BPF,
} biquadFilterType_e;

typedef float (*filterApplyFnPtr)(filter_t *filter, float input);

float nullFilterApply(filter_t *filter, float input);

void biquadFilterInitLPF(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate);
void biquadFilterInit(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType);
void biquadFilterUpdate(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType);
void biquadFilterUpdateLPF(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate);

float biquadFilterApplyDF1(biquadFilter_t *filter, float input);
float biquadFilterApply(biquadFilter_t *filter, float input);
float filterGetNotchQ(float centerFreq, float cutoffFreq);

void laggedMovingAverageInit(laggedMovingAverage_t *filter, uint16_t windowSize, float *buf);
float laggedMovingAverageUpdate(laggedMovingAverage_t *filter, float input);

float pt1FilterGain(float f_cut, float dT);
void pt1FilterInit(pt1Filter_t *filter, float k);
void pt1FilterUpdateCutoff(pt1Filter_t *filter, float k);
float pt1FilterApply(pt1Filter_t *filter, float input);

void slewFilterInit(slewFilter_t *filter, float slewLimit, float threshold);
float slewFilterApply(slewFilter_t *filter, float input);
# 26 "./src/main/fc/rc_controls.h" 2


typedef enum rc_alias {
    ROLL = 0,
    PITCH,
    YAW,
    THROTTLE,
    AUX1,
    AUX2,
    AUX3,
    AUX4,
    AUX5,
    AUX6,
    AUX7,
    AUX8,
    AUX9,
    AUX10,
    AUX11,
    AUX12
} rc_alias_e;



typedef enum {
    THROTTLE_LOW = 0,
    THROTTLE_HIGH
} throttleStatus_e;



typedef enum {
    NOT_CENTERED = 0,
    CENTERED
} rollPitchStatus_e;

typedef enum {
    RC_SMOOTHING_OFF = 0,
    RC_SMOOTHING_DEFAULT,
    RC_SMOOTHING_AUTO,
    RC_SMOOTHING_MANUAL
} rcSmoothing_t;

typedef enum {
    RC_SMOOTHING_TYPE_INTERPOLATION,
    RC_SMOOTHING_TYPE_FILTER
} rcSmoothingType_e;

typedef enum {
    RC_SMOOTHING_INPUT_PT1,
    RC_SMOOTHING_INPUT_BIQUAD
} rcSmoothingInputFilter_e;

typedef enum {
    RC_SMOOTHING_DERIVATIVE_OFF,
    RC_SMOOTHING_DERIVATIVE_PT1,
    RC_SMOOTHING_DERIVATIVE_BIQUAD,
    RC_SMOOTHING_DERIVATIVE_AUTO,
} rcSmoothingDerivativeFilter_e;
# 110 "./src/main/fc/rc_controls.h"
extern float rcCommand[4];

typedef struct rcSmoothingFilterTraining_s {
    float sum;
    int count;
    uint16_t min;
    uint16_t max;
} rcSmoothingFilterTraining_t;

typedef union rcSmoothingFilterTypes_u {
    pt1Filter_t pt1Filter;
    biquadFilter_t biquadFilter;
} rcSmoothingFilterTypes_t;

typedef struct rcSmoothingFilter_s {
    
# 125 "./src/main/fc/rc_controls.h" 3 4
   _Bool 
# 125 "./src/main/fc/rc_controls.h"
        filterInitialized;
    rcSmoothingFilterTypes_t filter[4];
    rcSmoothingInputFilter_e inputFilterType;
    uint8_t inputCutoffSetting;
    uint16_t inputCutoffFrequency;
    rcSmoothingDerivativeFilter_e derivativeFilterTypeSetting;
    rcSmoothingDerivativeFilter_e derivativeFilterType;
    uint8_t derivativeCutoffSetting;
    uint16_t derivativeCutoffFrequency;
    int averageFrameTimeUs;
    rcSmoothingFilterTraining_t training;
    uint8_t debugAxis;
    uint8_t autoSmoothnessFactor;
} rcSmoothingFilter_t;

typedef struct rcControlsConfig_s {
    uint8_t deadband;
    uint8_t yaw_deadband;
    uint8_t alt_hold_deadband;
    uint8_t alt_hold_fast_change;
    
# 145 "./src/main/fc/rc_controls.h" 3 4
   _Bool 
# 145 "./src/main/fc/rc_controls.h"
        yaw_control_reversed;
} rcControlsConfig_t;

extern rcControlsConfig_t rcControlsConfig_System; extern rcControlsConfig_t rcControlsConfig_Copy; static inline const rcControlsConfig_t* rcControlsConfig(void) { return &rcControlsConfig_System; } static inline rcControlsConfig_t* rcControlsConfigMutable(void) { return &rcControlsConfig_System; } struct _dummy;

typedef struct flight3DConfig_s {
    uint16_t deadband3d_low;
    uint16_t deadband3d_high;
    uint16_t neutral3d;
    uint16_t deadband3d_throttle;
    uint16_t limit3d_low;
    uint16_t limit3d_high;
    uint8_t switched_mode3d;
} flight3DConfig_t;

extern flight3DConfig_t flight3DConfig_System; extern flight3DConfig_t flight3DConfig_Copy; static inline const flight3DConfig_t* flight3DConfig(void) { return &flight3DConfig_System; } static inline flight3DConfig_t* flight3DConfigMutable(void) { return &flight3DConfig_System; } struct _dummy;

typedef struct armingConfig_s {
    uint8_t gyro_cal_on_first_arm;
    uint8_t auto_disarm_delay;
} armingConfig_t;

extern armingConfig_t armingConfig_System; extern armingConfig_t armingConfig_Copy; static inline const armingConfig_t* armingConfig(void) { return &armingConfig_System; } static inline armingConfig_t* armingConfigMutable(void) { return &armingConfig_System; } struct _dummy;


# 169 "./src/main/fc/rc_controls.h" 3 4
_Bool 
# 169 "./src/main/fc/rc_controls.h"
    areUsingSticksToArm(void);


# 171 "./src/main/fc/rc_controls.h" 3 4
_Bool 
# 171 "./src/main/fc/rc_controls.h"
    areSticksInApModePosition(uint16_t ap_mode);
throttleStatus_e calculateThrottleStatus(void);
void processRcStickPositions();


# 175 "./src/main/fc/rc_controls.h" 3 4
_Bool 
# 175 "./src/main/fc/rc_controls.h"
    isUsingSticksForArming(void);

int32_t getRcStickDeflection(int32_t axis, uint16_t midrc);
void rcControlsInit(void);
# 49 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/fc/runtime_config.h" 1
# 21 "./src/main/fc/runtime_config.h"
       




typedef enum {
    ARMED = (1 << 0),
    WAS_EVER_ARMED = (1 << 1),
    WAS_ARMED_WITH_PREARM = (1 << 2)
} armingFlag_e;

extern uint8_t armingFlags;
# 42 "./src/main/fc/runtime_config.h"
typedef enum {
    ARMING_DISABLED_NO_GYRO = (1 << 0),
    ARMING_DISABLED_FAILSAFE = (1 << 1),
    ARMING_DISABLED_RX_FAILSAFE = (1 << 2),
    ARMING_DISABLED_BAD_RX_RECOVERY = (1 << 3),
    ARMING_DISABLED_BOXFAILSAFE = (1 << 4),
    ARMING_DISABLED_RUNAWAY_TAKEOFF = (1 << 5),
    ARMING_DISABLED_CRASH_DETECTED = (1 << 6),
    ARMING_DISABLED_THROTTLE = (1 << 7),
    ARMING_DISABLED_ANGLE = (1 << 8),
    ARMING_DISABLED_BOOT_GRACE_TIME = (1 << 9),
    ARMING_DISABLED_NOPREARM = (1 << 10),
    ARMING_DISABLED_LOAD = (1 << 11),
    ARMING_DISABLED_CALIBRATING = (1 << 12),
    ARMING_DISABLED_CLI = (1 << 13),
    ARMING_DISABLED_CMS_MENU = (1 << 14),
    ARMING_DISABLED_BST = (1 << 15),
    ARMING_DISABLED_MSP = (1 << 16),
    ARMING_DISABLED_PARALYZE = (1 << 17),
    ARMING_DISABLED_GPS = (1 << 18),
    ARMING_DISABLED_RESC = (1 << 19),
    ARMING_DISABLED_RPMFILTER = (1 << 20),
    ARMING_DISABLED_REBOOT_REQUIRED = (1 << 21),
    ARMING_DISABLED_DSHOT_BITBANG = (1 << 22),
    ARMING_DISABLED_ACC_CALIBRATION = (1 << 23),
    ARMING_DISABLED_MOTOR_PROTOCOL = (1 << 24),
    ARMING_DISABLED_ARM_SWITCH = (1 << 25),
} armingDisableFlags_e;



extern const char *armingDisableFlagNames[((32*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0) + (16*(((ARMING_DISABLED_ARM_SWITCH)*1L >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0) >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0))>65535L) + (8*((((ARMING_DISABLED_ARM_SWITCH)*1L >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0) >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0))*1L >>16*(((ARMING_DISABLED_ARM_SWITCH)*1L >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0) >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0))>65535L))>255) + (8 - 90/((((((ARMING_DISABLED_ARM_SWITCH)*1L >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0) >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0))*1L >>16*(((ARMING_DISABLED_ARM_SWITCH)*1L >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0) >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0))>65535L)) >>8*((((ARMING_DISABLED_ARM_SWITCH)*1L >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0) >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0))*1L >>16*(((ARMING_DISABLED_ARM_SWITCH)*1L >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0) >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0))>65535L))>255))/4+14)|1) - 2/(((((ARMING_DISABLED_ARM_SWITCH)*1L >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0) >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0))*1L >>16*(((ARMING_DISABLED_ARM_SWITCH)*1L >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0) >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0))>65535L)) >>8*((((ARMING_DISABLED_ARM_SWITCH)*1L >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0) >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0))*1L >>16*(((ARMING_DISABLED_ARM_SWITCH)*1L >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0) >>16*((ARMING_DISABLED_ARM_SWITCH)/2L>>31 > 0))>65535L))>255))/2+1))))) + 1)];

void setArmingDisabled(armingDisableFlags_e flag);
void unsetArmingDisabled(armingDisableFlags_e flag);

# 77 "./src/main/fc/runtime_config.h" 3 4
_Bool 
# 77 "./src/main/fc/runtime_config.h"
    isArmingDisabled(void);
armingDisableFlags_e getArmingDisableFlags(void);

typedef enum {
    ANGLE_MODE = (1 << 0),
    HORIZON_MODE = (1 << 1),
    MAG_MODE = (1 << 2),



    HEADFREE_MODE = (1 << 6),

    PASSTHRU_MODE = (1 << 8),

    FAILSAFE_MODE = (1 << 10),
    GPS_RESCUE_MODE = (1 << 11)
} flightModeFlags_e;

extern uint16_t flightModeFlags;
# 114 "./src/main/fc/runtime_config.h"
typedef enum {
    GPS_FIX_HOME = (1 << 0),
    GPS_FIX = (1 << 1),
} stateFlags_t;





extern uint8_t stateFlags;

uint16_t enableFlightMode(flightModeFlags_e mask);
uint16_t disableFlightMode(flightModeFlags_e mask);


# 128 "./src/main/fc/runtime_config.h" 3 4
_Bool 
# 128 "./src/main/fc/runtime_config.h"
    sensors(uint32_t mask);
void sensorsSet(uint32_t mask);
void sensorsClear(uint32_t mask);
uint32_t sensorsMask(void);

void mwDisarm(void);
# 50 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/flight/mixer.h" 1
# 21 "./src/main/flight/mixer.h"
       






# 1 "./src/main/drivers/pwm_output.h" 1
# 21 "./src/main/drivers/pwm_output.h"
       





# 1 "./src/main/drivers/dma.h" 1
# 21 "./src/main/drivers/dma.h"
       

# 1 "./src/main/drivers/resource.h" 1
# 21 "./src/main/drivers/resource.h"
       

typedef enum {
    OWNER_FREE = 0,
    OWNER_PWMINPUT,
    OWNER_PPMINPUT,
    OWNER_MOTOR,
    OWNER_SERVO,
    OWNER_LED,
    OWNER_ADC,
    OWNER_ADC_BATT,
    OWNER_ADC_CURR,
    OWNER_ADC_EXT,
    OWNER_ADC_RSSI,
    OWNER_SERIAL_TX,
    OWNER_SERIAL_RX,
    OWNER_PINDEBUG,
    OWNER_TIMER,
    OWNER_SONAR_TRIGGER,
    OWNER_SONAR_ECHO,
    OWNER_SYSTEM,
    OWNER_SPI_SCK,
    OWNER_SPI_MISO,
    OWNER_SPI_MOSI,
    OWNER_I2C_SCL,
    OWNER_I2C_SDA,
    OWNER_SDCARD,
    OWNER_SDIO_CK,
    OWNER_SDIO_CMD,
    OWNER_SDIO_D0,
    OWNER_SDIO_D1,
    OWNER_SDIO_D2,
    OWNER_SDIO_D3,
    OWNER_SDCARD_CS,
    OWNER_SDCARD_DETECT,
    OWNER_FLASH_CS,
    OWNER_BARO_CS,
    OWNER_GYRO_CS,
    OWNER_OSD_CS,
    OWNER_RX_SPI_CS,
    OWNER_SPI_CS,
    OWNER_GYRO_EXTI,
    OWNER_BARO_EOC,
    OWNER_COMPASS_EXTI,
    OWNER_USB,
    OWNER_USB_DETECT,
    OWNER_BEEPER,
    OWNER_OSD,
    OWNER_RX_BIND,
    OWNER_INVERTER,
    OWNER_LED_STRIP,
    OWNER_TRANSPONDER,
    OWNER_VTX_POWER,
    OWNER_VTX_CS,
    OWNER_VTX_DATA,
    OWNER_VTX_CLK,
    OWNER_COMPASS_CS,
    OWNER_RX_BIND_PLUG,
    OWNER_ESCSERIAL,
    OWNER_CAMERA_CONTROL,
    OWNER_TIMUP,
    OWNER_RANGEFINDER,
    OWNER_RX_SPI,
    OWNER_PINIO,
    OWNER_USB_MSC_PIN,
    OWNER_MCO,
    OWNER_RX_SPI_BIND,
    OWNER_RX_SPI_LED,
    OWNER_PREINIT,
    OWNER_RX_SPI_EXTI,
    OWNER_RX_SPI_CC2500_TX_EN,
    OWNER_RX_SPI_CC2500_LNA_EN,
    OWNER_RX_SPI_CC2500_ANT_SEL,
    OWNER_QUADSPI_CLK,
    OWNER_QUADSPI_BK1IO0,
    OWNER_QUADSPI_BK1IO1,
    OWNER_QUADSPI_BK1IO2,
    OWNER_QUADSPI_BK1IO3,
    OWNER_QUADSPI_BK1CS,
    OWNER_QUADSPI_BK2IO0,
    OWNER_QUADSPI_BK2IO1,
    OWNER_QUADSPI_BK2IO2,
    OWNER_QUADSPI_BK2IO3,
    OWNER_QUADSPI_BK2CS,
    OWNER_BARO_XCLR,
    OWNER_PULLUP,
    OWNER_PULLDOWN,
    OWNER_DSHOT_BITBANG,
    OWNER_SWD,
    OWNER_TOTAL_COUNT
} resourceOwner_e;

typedef struct resourceOwner_s {
    resourceOwner_e owner;
    uint8_t resourceIndex;
} resourceOwner_t;

extern const char * const ownerNames[OWNER_TOTAL_COUNT];
# 24 "./src/main/drivers/dma.h" 2
# 32 "./src/main/drivers/dma.h"
typedef struct dmaResource_s dmaResource_t;
# 43 "./src/main/drivers/dma.h"
struct dmaChannelDescriptor_s;
typedef void (*dmaCallbackHandlerFuncPtr)(struct dmaChannelDescriptor_s *channelDescriptor);

typedef struct dmaChannelDescriptor_s {
    DMA_TypeDef* dma;
    dmaResource_t *ref;

    uint8_t stream;

    dmaCallbackHandlerFuncPtr irqHandlerCallback;
    uint8_t flagsShift;
    IRQn_Type irqN;
    uint32_t userParam;
    resourceOwner_t owner;
    uint8_t resourceIndex;
    uint32_t completeFlag;
} dmaChannelDescriptor_t;
# 71 "./src/main/drivers/dma.h"
typedef enum {
    DMA_NONE = 0,
    DMA1_ST0_HANDLER = 1,
    DMA1_ST1_HANDLER,
    DMA1_ST2_HANDLER,
    DMA1_ST3_HANDLER,
    DMA1_ST4_HANDLER,
    DMA1_ST5_HANDLER,
    DMA1_ST6_HANDLER,
    DMA1_ST7_HANDLER,
    DMA2_ST0_HANDLER,
    DMA2_ST1_HANDLER,
    DMA2_ST2_HANDLER,
    DMA2_ST3_HANDLER,
    DMA2_ST4_HANDLER,
    DMA2_ST5_HANDLER,
    DMA2_ST6_HANDLER,
    DMA2_ST7_HANDLER,
    DMA_LAST_HANDLER = DMA2_ST7_HANDLER
} dmaIdentifier_e;
# 127 "./src/main/drivers/dma.h"
dmaIdentifier_e dmaGetIdentifier(const dmaResource_t *stream);
dmaChannelDescriptor_t* dmaGetDmaDescriptor(const dmaResource_t *stream);
dmaResource_t *dmaGetRefByIdentifier(const dmaIdentifier_e identifier);
uint32_t dmaGetChannel(const uint8_t channel);
# 265 "./src/main/drivers/dma.h"
void dmaInit(dmaIdentifier_e identifier, resourceOwner_e owner, uint8_t resourceIndex);
void dmaSetHandler(dmaIdentifier_e identifier, dmaCallbackHandlerFuncPtr callback, uint32_t priority, uint32_t userParam);

const resourceOwner_t *dmaGetOwner(dmaIdentifier_e identifier);
dmaChannelDescriptor_t* dmaGetDescriptorByIdentifier(const dmaIdentifier_e identifier);
# 28 "./src/main/drivers/pwm_output.h" 2

# 1 "./src/main/drivers/motor.h" 1
# 23 "./src/main/drivers/motor.h"
       



# 1 "./src/main/pg/motor.h" 1
# 21 "./src/main/pg/motor.h"
       



# 1 "./src/main/drivers/io.h" 1
# 21 "./src/main/drivers/io.h"
       
# 110 "./src/main/drivers/io.h"
# 1 "./src/main/drivers/io_def.h" 1
# 21 "./src/main/drivers/io_def.h"
       
# 54 "./src/main/drivers/io_def.h"
# 1 "./src/main/drivers/io_def_generated.h" 1
# 21 "./src/main/drivers/io_def_generated.h"
       
# 54 "./src/main/drivers/io_def.h" 2
# 111 "./src/main/drivers/io.h" 2


# 112 "./src/main/drivers/io.h" 3 4
_Bool 
# 112 "./src/main/drivers/io.h"
    IORead(IO_t io);
void IOWrite(IO_t io, 
# 113 "./src/main/drivers/io.h" 3 4
                     _Bool 
# 113 "./src/main/drivers/io.h"
                          value);
void IOHi(IO_t io);
void IOLo(IO_t io);
void IOToggle(IO_t io);

void IOInit(IO_t io, resourceOwner_e owner, uint8_t index);
void IORelease(IO_t io);
resourceOwner_e IOGetOwner(IO_t io);

# 121 "./src/main/drivers/io.h" 3 4
_Bool 
# 121 "./src/main/drivers/io.h"
    IOIsFreeOrPreinit(IO_t io);
IO_t IOGetByTag(ioTag_t tag);

void IOConfigGPIO(IO_t io, ioConfig_t cfg);

void IOConfigGPIOAF(IO_t io, ioConfig_t cfg, uint8_t af);


void IOInitGlobal(void);

typedef void (*IOTraverseFuncPtr_t)(IO_t io);

void IOTraversePins(IOTraverseFuncPtr_t func);

GPIO_TypeDef* IO_GPIO(IO_t io);
uint16_t IO_Pin(IO_t io);
# 26 "./src/main/pg/motor.h" 2
# 1 "./src/main/drivers/dshot_bitbang.h" 1
# 21 "./src/main/drivers/dshot_bitbang.h"
       

# 1 "./src/main/drivers/timer.h" 1
# 21 "./src/main/drivers/timer.h"
       
# 30 "./src/main/drivers/timer.h"
# 1 "./src/main/drivers/timer_def.h" 1
# 21 "./src/main/drivers/timer_def.h"
       
# 31 "./src/main/drivers/timer.h" 2

# 1 "./src/main/pg/timerio.h" 1
# 21 "./src/main/pg/timerio.h"
       




# 1 "./src/main/drivers/dma_reqmap.h" 1
# 21 "./src/main/drivers/dma_reqmap.h"
       






typedef uint16_t dmaCode_t;

typedef struct dmaChannelSpec_s {
    dmaCode_t code;
    dmaResource_t *ref;

    uint32_t channel;

} dmaChannelSpec_t;







typedef enum {
    DMA_PERIPH_SPI_TX,
    DMA_PERIPH_SPI_RX,
    DMA_PERIPH_ADC,
    DMA_PERIPH_SDIO,
    DMA_PERIPH_UART_TX,
    DMA_PERIPH_UART_RX,
    DMA_PERIPH_TIMUP,
} dmaPeripheral_e;

typedef int8_t dmaoptValue_t;
# 66 "./src/main/drivers/dma_reqmap.h"
struct timerHardware_s;

dmaoptValue_t dmaoptByTag(ioTag_t ioTag);
const dmaChannelSpec_t *dmaGetChannelSpecByPeripheral(dmaPeripheral_e device, uint8_t index, int8_t opt);
const dmaChannelSpec_t *dmaGetChannelSpecByTimerValue(TIM_TypeDef *tim, uint8_t channel, dmaoptValue_t dmaopt);
const dmaChannelSpec_t *dmaGetChannelSpecByTimer(const struct timerHardware_s *timer);
dmaoptValue_t dmaGetOptionByTimer(const struct timerHardware_s *timer);
dmaoptValue_t dmaGetUpOptionByTimer(const struct timerHardware_s *timer);
# 27 "./src/main/pg/timerio.h" 2




typedef struct timerIOConfig_s {
    ioTag_t ioTag;
    uint8_t index;
    int8_t dmaopt;
} timerIOConfig_t;

extern timerIOConfig_t timerIOConfig_SystemArray[21]; extern timerIOConfig_t timerIOConfig_CopyArray[21]; static inline const timerIOConfig_t* timerIOConfig(int _index) { return &timerIOConfig_SystemArray[_index]; } static inline timerIOConfig_t* timerIOConfigMutable(int _index) { return &timerIOConfig_SystemArray[_index]; } static inline timerIOConfig_t (* timerIOConfig_array(void))[21] { return &timerIOConfig_SystemArray; } struct _dummy;
# 33 "./src/main/drivers/timer.h" 2





typedef uint16_t captureCompare_t;


typedef uint32_t timCCR_t;
typedef uint32_t timCCER_t;
typedef uint32_t timSR_t;
typedef uint32_t timCNT_t;
# 54 "./src/main/drivers/timer.h"
typedef enum {
    TIM_USE_ANY = 0x0,
    TIM_USE_NONE = 0x0,
    TIM_USE_PPM = 0x1,
    TIM_USE_PWM = 0x2,
    TIM_USE_MOTOR = 0x4,
    TIM_USE_SERVO = 0x8,
    TIM_USE_LED = 0x10,
    TIM_USE_TRANSPONDER = 0x20,
    TIM_USE_BEEPER = 0x40,
    TIM_USE_CAMERA_CONTROL = 0x80,
} timerUsageFlag_e;


struct timerCCHandlerRec_s;
struct timerOvrHandlerRec_s;
typedef void timerCCHandlerCallback(struct timerCCHandlerRec_s* self, uint16_t capture);
typedef void timerOvrHandlerCallback(struct timerOvrHandlerRec_s* self, uint16_t capture);

typedef struct timerCCHandlerRec_s {
    timerCCHandlerCallback* fn;
} timerCCHandlerRec_t;

typedef struct timerOvrHandlerRec_s {
    timerOvrHandlerCallback* fn;
    struct timerOvrHandlerRec_s* next;
} timerOvrHandlerRec_t;

typedef struct timerDef_s {
    TIM_TypeDef *TIMx;
    rccPeriphTag_t rcc;
    uint8_t inputIrq;
} timerDef_t;

typedef struct timerHardware_s {
    TIM_TypeDef *tim;
    ioTag_t tag;
    uint8_t channel;
    timerUsageFlag_e usageFlags;
    uint8_t output;

    uint8_t alternateFunction;






    dmaResource_t *dmaRefConfigured;
    uint32_t dmaChannelConfigured;







    dmaResource_t *dmaTimUPRef;

    uint32_t dmaTimUPChannel;

    uint8_t dmaTimUPIrqHandler;

} timerHardware_t;

typedef enum {
    TIMER_OUTPUT_NONE = 0,
    TIMER_OUTPUT_INVERTED = (1 << 0),
    TIMER_OUTPUT_N_CHANNEL = (1 << 1),
} timerFlag_e;
# 152 "./src/main/drivers/timer.h"
extern const timerHardware_t timerHardware[];
# 183 "./src/main/drivers/timer.h"
extern const timerHardware_t fullTimerHardware[];
# 223 "./src/main/drivers/timer.h"
extern const timerDef_t timerDefinitions[];

typedef enum {
    TYPE_FREE,
    TYPE_PWMINPUT,
    TYPE_PPMINPUT,
    TYPE_PWMOUTPUT_MOTOR,
    TYPE_PWMOUTPUT_FAST,
    TYPE_PWMOUTPUT_SERVO,
    TYPE_SOFTSERIAL_RX,
    TYPE_SOFTSERIAL_TX,
    TYPE_SOFTSERIAL_RXTX,
    TYPE_SOFTSERIAL_AUXTIMER,
    TYPE_ADC,
    TYPE_SERIAL_RX,
    TYPE_SERIAL_TX,
    TYPE_SERIAL_RXTX,
    TYPE_TIMER
} channelType_t;

void timerConfigure(const timerHardware_t *timHw, uint16_t period, uint32_t hz);

void timerChConfigIC(const timerHardware_t *timHw, 
# 245 "./src/main/drivers/timer.h" 3 4
                                                  _Bool 
# 245 "./src/main/drivers/timer.h"
                                                       polarityRising, unsigned inputFilterSamples);
void timerChConfigICDual(const timerHardware_t* timHw, 
# 246 "./src/main/drivers/timer.h" 3 4
                                                      _Bool 
# 246 "./src/main/drivers/timer.h"
                                                           polarityRising, unsigned inputFilterSamples);
void timerChICPolarity(const timerHardware_t *timHw, 
# 247 "./src/main/drivers/timer.h" 3 4
                                                    _Bool 
# 247 "./src/main/drivers/timer.h"
                                                         polarityRising);
volatile timCCR_t* timerChCCR(const timerHardware_t* timHw);
volatile timCCR_t* timerChCCRLo(const timerHardware_t* timHw);
volatile timCCR_t* timerChCCRHi(const timerHardware_t* timHw);
void timerChConfigOC(const timerHardware_t* timHw, 
# 251 "./src/main/drivers/timer.h" 3 4
                                                  _Bool 
# 251 "./src/main/drivers/timer.h"
                                                       outEnable, 
# 251 "./src/main/drivers/timer.h" 3 4
                                                                  _Bool 
# 251 "./src/main/drivers/timer.h"
                                                                       stateHigh);
void timerChConfigGPIO(const timerHardware_t* timHw, ioConfig_t mode);

void timerChCCHandlerInit(timerCCHandlerRec_t *self, timerCCHandlerCallback *fn);
void timerChOvrHandlerInit(timerOvrHandlerRec_t *self, timerOvrHandlerCallback *fn);
void timerChConfigCallbacks(const timerHardware_t *channel, timerCCHandlerRec_t *edgeCallback, timerOvrHandlerRec_t *overflowCallback);
void timerChConfigCallbacksDual(const timerHardware_t *channel, timerCCHandlerRec_t *edgeCallbackLo, timerCCHandlerRec_t *edgeCallbackHi, timerOvrHandlerRec_t *overflowCallback);
void timerChITConfigDualLo(const timerHardware_t* timHw, FunctionalState newState);
void timerChITConfig(const timerHardware_t* timHw, FunctionalState newState);
void timerChClearCCFlag(const timerHardware_t* timHw);

void timerChInit(const timerHardware_t *timHw, channelType_t type, int irqPriority, uint8_t irq);

void timerInit(void);
void timerStart(void);
void timerForceOverflow(TIM_TypeDef *tim);

uint32_t timerClock(TIM_TypeDef *tim);

void configTimeBase(TIM_TypeDef *tim, uint16_t period, uint32_t hz);

rccPeriphTag_t timerRCC(TIM_TypeDef *tim);
uint8_t timerInputIrq(TIM_TypeDef *tim);


extern const resourceOwner_t freeOwner;

struct timerIOConfig_s;

struct timerIOConfig_s *timerIoConfigByTag(ioTag_t ioTag);
const resourceOwner_t *timerGetOwner(int8_t timerNumber, uint16_t timerChannel);

const timerHardware_t *timerGetByTag(ioTag_t ioTag);
const timerHardware_t *timerAllocate(ioTag_t ioTag, resourceOwner_e owner, uint8_t resourceIndex);
const timerHardware_t *timerGetByTagAndIndex(ioTag_t ioTag, unsigned timerIndex);
ioTag_t timerioTagGetByUsage(timerUsageFlag_e usageFlag, uint8_t index);


TIM_HandleTypeDef* timerFindTimerHandle(TIM_TypeDef *tim);
HAL_StatusTypeDef TIM_DMACmd(TIM_HandleTypeDef *htim, uint32_t Channel, FunctionalState NewState);
HAL_StatusTypeDef DMA_SetCurrDataCounter(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length);
uint16_t timerDmaIndex(uint8_t channel);





volatile timCCR_t *timerCCR(TIM_TypeDef *tim, uint8_t channel);
uint16_t timerDmaSource(uint8_t channel);

uint16_t timerGetPrescalerByDesiredHertz(TIM_TypeDef *tim, uint32_t hz);
uint16_t timerGetPrescalerByDesiredMhz(TIM_TypeDef *tim, uint16_t mhz);
uint16_t timerGetPeriodByPrescaler(TIM_TypeDef *tim, uint16_t prescaler, uint32_t hz);

int8_t timerGetNumberByIndex(uint8_t index);
int8_t timerGetTIMNumber(const TIM_TypeDef *tim);
uint8_t timerLookupChannelIndex(const uint16_t channel);
# 24 "./src/main/drivers/dshot_bitbang.h" 2

typedef enum {
    DSHOT_BITBANG_OFF,
    DSHOT_BITBANG_ON,
    DSHOT_BITBANG_AUTO,
} dshotBitbangMode_e;

typedef enum {
    DSHOT_BITBANG_STATUS_OK,
    DSHOT_BITBANG_STATUS_MOTOR_PIN_CONFLICT,
    DSHOT_BITBANG_STATUS_NO_PACER,
    DSHOT_BITBANG_STATUS_TOO_MANY_PORTS,
} dshotBitbangStatus_e;

struct motorDevConfig_s;
struct motorDevice_s;
struct motorDevice_s *dshotBitbangDevInit(const struct motorDevConfig_s *motorConfig, uint8_t motorCount);
dshotBitbangStatus_e dshotBitbangGetStatus();
const resourceOwner_t *dshotBitbangTimerGetOwner(int8_t timerNumber, uint16_t timerChannel);
# 27 "./src/main/pg/motor.h" 2

typedef enum {
    DSHOT_BITBANGED_TIMER_AUTO = 0,
    DSHOT_BITBANGED_TIMER_TIM1,
    DSHOT_BITBANGED_TIMER_TIM8,
} dshotBitbangedTimer_e;

typedef enum {
    DSHOT_DMAR_OFF,
    DSHOT_DMAR_ON,
    DSHOT_DMAR_AUTO
} dshotDmar_e;

typedef struct motorDevConfig_s {
    uint16_t motorPwmRate;
    uint8_t motorPwmProtocol;
    uint8_t motorPwmInversion;
    uint8_t useUnsyncedPwm;
    uint8_t useBurstDshot;
    uint8_t useDshotTelemetry;
    ioTag_t ioTags[8];
    uint8_t motorTransportProtocol;
    uint8_t useDshotBitbang;
    uint8_t useDshotBitbangedTimer;
    uint8_t motorOutputReordering[8];
} motorDevConfig_t;

typedef struct motorConfig_s {
    motorDevConfig_t dev;
    uint16_t digitalIdleOffsetValue;
    uint16_t minthrottle;
    uint16_t maxthrottle;
    uint16_t mincommand;
    uint8_t motorPoleCount;
} motorConfig_t;

extern motorConfig_t motorConfig_System; extern motorConfig_t motorConfig_Copy; static inline const motorConfig_t* motorConfig(void) { return &motorConfig_System; } static inline motorConfig_t* motorConfigMutable(void) { return &motorConfig_System; } struct _dummy;
# 28 "./src/main/drivers/motor.h" 2

typedef enum {
    PWM_TYPE_STANDARD = 0,
    PWM_TYPE_ONESHOT125,
    PWM_TYPE_ONESHOT42,
    PWM_TYPE_MULTISHOT,
    PWM_TYPE_BRUSHED,
    PWM_TYPE_DSHOT150,
    PWM_TYPE_DSHOT300,
    PWM_TYPE_DSHOT600,

    PWM_TYPE_PROSHOT1000,
    PWM_TYPE_DISABLED,
    PWM_TYPE_MAX
} motorPwmProtocolTypes_e;


typedef struct motorVTable_s {

    void (*postInit)(void);
    float (*convertExternalToMotor)(uint16_t externalValue);
    uint16_t (*convertMotorToExternal)(float motorValue);
    
# 50 "./src/main/drivers/motor.h" 3 4
   _Bool 
# 50 "./src/main/drivers/motor.h"
        (*enable)(void);
    void (*disable)(void);
    
# 52 "./src/main/drivers/motor.h" 3 4
   _Bool 
# 52 "./src/main/drivers/motor.h"
        (*isMotorEnabled)(uint8_t index);
    
# 53 "./src/main/drivers/motor.h" 3 4
   _Bool 
# 53 "./src/main/drivers/motor.h"
        (*updateStart)(void);
    void (*write)(uint8_t index, float value);
    void (*writeInt)(uint8_t index, uint16_t value);
    void (*updateComplete)(void);
    void (*shutdown)(void);



} motorVTable_t;

typedef struct motorDevice_s {
    motorVTable_t vTable;
    uint8_t count;
    
# 66 "./src/main/drivers/motor.h" 3 4
   _Bool 
# 66 "./src/main/drivers/motor.h"
                 initialized;
    
# 67 "./src/main/drivers/motor.h" 3 4
   _Bool 
# 67 "./src/main/drivers/motor.h"
                 enabled;
    timeMs_t motorEnableTimeMs;
} motorDevice_t;

void motorPostInitNull();
void motorWriteNull(uint8_t index, float value);

# 73 "./src/main/drivers/motor.h" 3 4
_Bool 
# 73 "./src/main/drivers/motor.h"
    motorUpdateStartNull(void);
void motorUpdateCompleteNull(void);

void motorPostInit();
void motorWriteAll(float *values);

void motorInitEndpoints(const motorConfig_t *motorConfig, float outputLimit, float *outputLow, float *outputHigh, float *disarm, float *deadbandMotor3DHigh, float *deadbandMotor3DLow);

float motorConvertFromExternal(uint16_t externalValue);
uint16_t motorConvertToExternal(float motorValue);

struct motorDevConfig_s;
void motorDevInit(const struct motorDevConfig_s *motorConfig, uint16_t idlePulse, uint8_t motorCount);
unsigned motorDeviceCount(void);
motorVTable_t motorGetVTable(void);

# 88 "./src/main/drivers/motor.h" 3 4
_Bool 
# 88 "./src/main/drivers/motor.h"
    checkMotorProtocolEnabled(const motorDevConfig_t *motorConfig, 
# 88 "./src/main/drivers/motor.h" 3 4
                                                                   _Bool 
# 88 "./src/main/drivers/motor.h"
                                                                        *protocolIsDshot);

# 89 "./src/main/drivers/motor.h" 3 4
_Bool 
# 89 "./src/main/drivers/motor.h"
    isMotorProtocolDshot(void);

# 90 "./src/main/drivers/motor.h" 3 4
_Bool 
# 90 "./src/main/drivers/motor.h"
    isMotorProtocolEnabled(void);

void motorDisable(void);
void motorEnable(void);

# 94 "./src/main/drivers/motor.h" 3 4
_Bool 
# 94 "./src/main/drivers/motor.h"
    motorIsEnabled(void);

# 95 "./src/main/drivers/motor.h" 3 4
_Bool 
# 95 "./src/main/drivers/motor.h"
    motorIsMotorEnabled(uint8_t index);
timeMs_t motorGetMotorEnableTimeMs(void);
void motorShutdown(void);







float getDigitalIdleOffset(const motorConfig_t *motorConfig);
# 30 "./src/main/drivers/pwm_output.h" 2
# 42 "./src/main/drivers/pwm_output.h"
struct timerHardware_s;

typedef struct {
    volatile timCCR_t *ccr;
    TIM_TypeDef *tim;
} timerChannel_t;

typedef struct {
    timerChannel_t channel;
    float pulseScale;
    float pulseOffset;
    
# 53 "./src/main/drivers/pwm_output.h" 3 4
   _Bool 
# 53 "./src/main/drivers/pwm_output.h"
        forceOverflow;
    
# 54 "./src/main/drivers/pwm_output.h" 3 4
   _Bool 
# 54 "./src/main/drivers/pwm_output.h"
        enabled;
    IO_t io;
} pwmOutputPort_t;

extern __attribute__ ((section(".fastram_bss"), aligned(4))) pwmOutputPort_t motors[8];

struct motorDevConfig_s;
motorDevice_t *motorPwmDevInit(const struct motorDevConfig_s *motorDevConfig, uint16_t idlePulse, uint8_t motorCount, 
# 61 "./src/main/drivers/pwm_output.h" 3 4
                                                                                                                     _Bool 
# 61 "./src/main/drivers/pwm_output.h"
                                                                                                                          useUnsyncedPwm);

typedef struct servoDevConfig_s {

    uint16_t servoCenterPulse;
    uint16_t servoPwmRate;
    ioTag_t ioTags[8];
} servoDevConfig_t;

void servoDevInit(const servoDevConfig_t *servoDevConfig);

void pwmServoConfig(const struct timerHardware_s *timerHardware, uint8_t servoIndex, uint16_t servoPwmRate, uint16_t servoCenterPulse);

void pwmOutConfig(timerChannel_t *channel, const timerHardware_t *timerHardware, uint32_t hz, uint16_t period, uint16_t value, uint8_t inversion);

void pwmWriteServo(uint8_t index, float value);

pwmOutputPort_t *pwmGetMotors(void);

# 79 "./src/main/drivers/pwm_output.h" 3 4
_Bool 
# 79 "./src/main/drivers/pwm_output.h"
    pwmIsSynced(void);
# 29 "./src/main/flight/mixer.h" 2




typedef enum mixerMode
{
    MIXER_TRI = 1,
    MIXER_QUADP = 2,
    MIXER_QUADX = 3,
    MIXER_BICOPTER = 4,
    MIXER_GIMBAL = 5,
    MIXER_Y6 = 6,
    MIXER_HEX6 = 7,
    MIXER_FLYING_WING = 8,
    MIXER_Y4 = 9,
    MIXER_HEX6X = 10,
    MIXER_OCTOX8 = 11,
    MIXER_OCTOFLATP = 12,
    MIXER_OCTOFLATX = 13,
    MIXER_AIRPLANE = 14,
    MIXER_HELI_120_CCPM = 15,
    MIXER_HELI_90_DEG = 16,
    MIXER_VTAIL4 = 17,
    MIXER_HEX6H = 18,
    MIXER_PPM_TO_SERVO = 19,
    MIXER_DUALCOPTER = 20,
    MIXER_SINGLECOPTER = 21,
    MIXER_ATAIL4 = 22,
    MIXER_CUSTOM = 23,
    MIXER_CUSTOM_AIRPLANE = 24,
    MIXER_CUSTOM_TRI = 25,
    MIXER_QUADX_1234 = 26
} mixerMode_e;

typedef enum mixerType
{
    MIXER_LEGACY = 0,
    MIXER_LINEAR = 1,
    MIXER_DYNAMIC = 2,
} mixerType_e;


typedef struct motorMixer_s {
    float throttle;
    float roll;
    float pitch;
    float yaw;
} motorMixer_t;

extern motorMixer_t customMotorMixer_SystemArray[8]; extern motorMixer_t customMotorMixer_CopyArray[8]; static inline const motorMixer_t* customMotorMixer(int _index) { return &customMotorMixer_SystemArray[_index]; } static inline motorMixer_t* customMotorMixerMutable(int _index) { return &customMotorMixer_SystemArray[_index]; } static inline motorMixer_t (* customMotorMixer_array(void))[8] { return &customMotorMixer_SystemArray; } struct _dummy;


typedef struct mixer_s {
    uint8_t motorCount;
    uint8_t useServo;
    const motorMixer_t *motor;
} mixer_t;

typedef struct mixerConfig_s {
    uint8_t mixerMode;
    
# 89 "./src/main/flight/mixer.h" 3 4
   _Bool 
# 89 "./src/main/flight/mixer.h"
        yaw_motors_reversed;
    uint8_t crashflip_motor_percent;
    uint8_t crashflip_expo;
    uint8_t mixer_type;
} mixerConfig_t;

extern mixerConfig_t mixerConfig_System; extern mixerConfig_t mixerConfig_Copy; static inline const mixerConfig_t* mixerConfig(void) { return &mixerConfig_System; } static inline mixerConfig_t* mixerConfigMutable(void) { return &mixerConfig_System; } struct _dummy;



extern const mixer_t mixers[];
extern float motor[8];
extern float motor_disarmed[8];
struct rxConfig_s;

uint8_t getMotorCount(void);
float getMotorMixRange(void);

# 106 "./src/main/flight/mixer.h" 3 4
_Bool 
# 106 "./src/main/flight/mixer.h"
    areMotorsRunning(void);

void mixerLoadMix(int index, motorMixer_t *customMixers);
void initEscEndpoints(void);
void mixerInit(mixerMode_e mixerMode);
void mixerInitProfile(void);

void mixerResetDisarmedMotors(void);
void mixTable(timeUs_t currentTimeUs);
void stopMotors(void);
void writeMotors(void);


# 118 "./src/main/flight/mixer.h" 3 4
_Bool 
# 118 "./src/main/flight/mixer.h"
    mixerIsTricopter(void);

void mixerSetThrottleAngleCorrection(int correctionValue);
float mixerGetThrottle(void);
mixerMode_e getMixerMode(void);

# 123 "./src/main/flight/mixer.h" 3 4
_Bool 
# 123 "./src/main/flight/mixer.h"
    mixerModeIsFixedWing(mixerMode_e mixerMode);

# 124 "./src/main/flight/mixer.h" 3 4
_Bool 
# 124 "./src/main/flight/mixer.h"
    isFixedWing(void);

float getMotorOutputLow(void);
float getMotorOutputHigh(void);
# 52 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/flight/pid.h" 1
# 21 "./src/main/flight/pid.h"
       
# 70 "./src/main/flight/pid.h"
typedef enum {
    PID_ROLL,
    PID_PITCH,
    PID_YAW,
    PID_LEVEL,
    PID_MAG,
    PID_ITEM_COUNT
} pidIndex_e;

typedef enum {
    SUPEREXPO_YAW_OFF = 0,
    SUPEREXPO_YAW_ON,
    SUPEREXPO_YAW_ALWAYS
} pidSuperExpoYaw_e;

typedef enum {
    PID_STABILISATION_OFF = 0,
    PID_STABILISATION_ON
} pidStabilisationState_e;

typedef enum {
    PID_CRASH_RECOVERY_OFF = 0,
    PID_CRASH_RECOVERY_ON,
    PID_CRASH_RECOVERY_BEEP,
    PID_CRASH_RECOVERY_DISARM,
} pidCrashRecovery_e;

typedef struct pidf_s {
    uint8_t P;
    uint8_t I;
    uint8_t D;
    uint16_t F;
} pidf_t;

typedef enum {
    ANTI_GRAVITY_SMOOTH,
    ANTI_GRAVITY_STEP
} antiGravityMode_e;

typedef enum {
    ITERM_RELAX_OFF,
    ITERM_RELAX_RP,
    ITERM_RELAX_RPY,
    ITERM_RELAX_RP_INC,
    ITERM_RELAX_RPY_INC,
    ITERM_RELAX_COUNT,
} itermRelax_e;

typedef enum {
    ITERM_RELAX_GYRO,
    ITERM_RELAX_SETPOINT,
    ITERM_RELAX_TYPE_COUNT,
} itermRelaxType_e;

typedef enum ffInterpolationType_e {
    FF_INTERPOLATE_OFF,
    FF_INTERPOLATE_ON,
    FF_INTERPOLATE_AVG2,
    FF_INTERPOLATE_AVG3,
    FF_INTERPOLATE_AVG4
} ffInterpolationType_t;



typedef struct pidProfile_s {
    uint16_t yaw_lowpass_hz;
    uint16_t dterm_lowpass_hz;
    uint16_t dterm_notch_hz;
    uint16_t dterm_notch_cutoff;

    pidf_t pid[PID_ITEM_COUNT];

    uint8_t dterm_filter_type;
    uint8_t itermWindupPointPercent;
    uint16_t pidSumLimit;
    uint16_t pidSumLimitYaw;
    uint8_t pidAtMinThrottle;
    uint8_t levelAngleLimit;

    uint8_t horizon_tilt_effect;
    uint8_t horizon_tilt_expert_mode;


    uint8_t antiGravityMode;
    uint16_t itermThrottleThreshold;
    uint16_t itermAcceleratorGain;
    uint16_t yawRateAccelLimit;
    uint16_t rateAccelLimit;
    uint16_t crash_dthreshold;
    uint16_t crash_gthreshold;
    uint16_t crash_setpoint_threshold;
    uint16_t crash_time;
    uint16_t crash_delay;
    uint8_t crash_recovery_angle;
    uint8_t crash_recovery_rate;
    uint8_t feedForwardTransition;
    uint16_t crash_limit_yaw;
    uint16_t itermLimit;
    uint16_t dterm_lowpass2_hz;
    uint8_t crash_recovery;
    uint8_t throttle_boost;
    uint8_t throttle_boost_cutoff;
    uint8_t iterm_rotation;
    uint8_t iterm_relax_type;
    uint8_t iterm_relax_cutoff;
    uint8_t iterm_relax;
    uint8_t acro_trainer_angle_limit;
    uint8_t acro_trainer_debug_axis;
    uint8_t acro_trainer_gain;
    uint16_t acro_trainer_lookahead_ms;
    uint8_t abs_control_gain;
    uint8_t abs_control_limit;
    uint8_t abs_control_error_limit;
    uint8_t abs_control_cutoff;
    uint8_t dterm_filter2_type;
    uint16_t dyn_lpf_dterm_min_hz;
    uint16_t dyn_lpf_dterm_max_hz;
    uint8_t launchControlMode;
    uint8_t launchControlThrottlePercent;
    uint8_t launchControlAngleLimit;
    uint8_t launchControlGain;
    uint8_t launchControlAllowTriggerReset;
    uint8_t use_integrated_yaw;
    uint8_t integrated_yaw_relax;
    uint8_t thrustLinearization;
    uint8_t d_min[3];
    uint8_t d_min_gain;
    uint8_t d_min_advance;
    uint8_t motor_output_limit;
    int8_t auto_profile_cell_count;
    uint8_t transient_throttle_limit;
    uint8_t ff_boost;
    char profileName[8u + 1];

    uint8_t dyn_idle_min_rpm;
    uint8_t dyn_idle_p_gain;
    uint8_t dyn_idle_i_gain;
    uint8_t dyn_idle_d_gain;
    uint8_t dyn_idle_max_increase;

    uint8_t ff_interpolate_sp;
    uint8_t ff_max_rate_limit;
    uint8_t ff_smooth_factor;
    uint8_t dyn_lpf_curve_expo;
    uint8_t level_race_mode;
    uint8_t vbat_sag_compensation;

    uint8_t simplified_pids_mode;
    uint8_t simplified_master_multiplier;
    uint8_t simplified_roll_pitch_ratio;
    uint8_t simplified_i_gain;
    uint8_t simplified_pd_ratio;
    uint8_t simplified_pd_gain;
    uint8_t simplified_dmin_ratio;
    uint8_t simplified_ff_gain;

    uint8_t simplified_dterm_filter;
    uint8_t simplified_dterm_filter_multiplier;
} pidProfile_t;

extern pidProfile_t pidProfiles_SystemArray[3]; extern pidProfile_t pidProfiles_CopyArray[3]; static inline const pidProfile_t* pidProfiles(int _index) { return &pidProfiles_SystemArray[_index]; } static inline pidProfile_t* pidProfilesMutable(int _index) { return &pidProfiles_SystemArray[_index]; } static inline pidProfile_t (* pidProfiles_array(void))[3] { return &pidProfiles_SystemArray; } struct _dummy;

typedef struct pidConfig_s {
    uint8_t pid_process_denom;
    uint8_t runaway_takeoff_prevention;
    uint16_t runaway_takeoff_deactivate_delay;
    uint8_t runaway_takeoff_deactivate_throttle;
} pidConfig_t;

extern pidConfig_t pidConfig_System; extern pidConfig_t pidConfig_Copy; static inline const pidConfig_t* pidConfig(void) { return &pidConfig_System; } static inline pidConfig_t* pidConfigMutable(void) { return &pidConfig_System; } struct _dummy;

union rollAndPitchTrims_u;
void pidController(const pidProfile_t *pidProfile, timeUs_t currentTimeUs);

typedef struct pidAxisData_s {
    float P;
    float I;
    float D;
    float F;

    float Sum;
} pidAxisData_t;

typedef union dtermLowpass_u {
    pt1Filter_t pt1Filter;
    biquadFilter_t biquadFilter;
} dtermLowpass_t;

typedef struct pidCoefficient_s {
    float Kp;
    float Ki;
    float Kd;
    float Kf;
} pidCoefficient_t;

typedef struct pidRuntime_s {
    float dT;
    float pidFrequency;
    
# 268 "./src/main/flight/pid.h" 3 4
   _Bool 
# 268 "./src/main/flight/pid.h"
        pidStabilisationEnabled;
    float previousPidSetpoint[3];
    filterApplyFnPtr dtermNotchApplyFn;
    biquadFilter_t dtermNotch[3];
    filterApplyFnPtr dtermLowpassApplyFn;
    dtermLowpass_t dtermLowpass[3];
    filterApplyFnPtr dtermLowpass2ApplyFn;
    dtermLowpass_t dtermLowpass2[3];
    filterApplyFnPtr ptermYawLowpassApplyFn;
    pt1Filter_t ptermYawLowpass;
    
# 278 "./src/main/flight/pid.h" 3 4
   _Bool 
# 278 "./src/main/flight/pid.h"
        antiGravityEnabled;
    uint8_t antiGravityMode;
    pt1Filter_t antiGravityThrottleLpf;
    pt1Filter_t antiGravitySmoothLpf;
    float antiGravityOsdCutoff;
    float antiGravityThrottleHpf;
    float antiGravityPBoost;
    float ffBoostFactor;
    float itermAccelerator;
    uint16_t itermAcceleratorGain;
    float feedForwardTransition;
    pidCoefficient_t pidCoefficient[3];
    float levelGain;
    float horizonGain;
    float horizonTransition;
    float horizonCutoffDegrees;
    float horizonFactorRatio;
    uint8_t horizonTiltExpertMode;
    float maxVelocity[3];
    float itermWindupPointInv;
    
# 298 "./src/main/flight/pid.h" 3 4
   _Bool 
# 298 "./src/main/flight/pid.h"
        inCrashRecoveryMode;
    timeUs_t crashDetectedAtUs;
    timeDelta_t crashTimeLimitUs;
    timeDelta_t crashTimeDelayUs;
    int32_t crashRecoveryAngleDeciDegrees;
    float crashRecoveryRate;
    float crashGyroThreshold;
    float crashDtermThreshold;
    float crashSetpointThreshold;
    float crashLimitYaw;
    float itermLimit;
    
# 309 "./src/main/flight/pid.h" 3 4
   _Bool 
# 309 "./src/main/flight/pid.h"
        itermRotation;
    
# 310 "./src/main/flight/pid.h" 3 4
   _Bool 
# 310 "./src/main/flight/pid.h"
        zeroThrottleItermReset;
    
# 311 "./src/main/flight/pid.h" 3 4
   _Bool 
# 311 "./src/main/flight/pid.h"
        levelRaceMode;
# 343 "./src/main/flight/pid.h"
    pt1Filter_t setpointDerivativePt1[3];
    biquadFilter_t setpointDerivativeBiquad[3];
    
# 345 "./src/main/flight/pid.h" 3 4
   _Bool 
# 345 "./src/main/flight/pid.h"
        setpointDerivativeLpfInitialized;
    uint8_t rcSmoothingDebugAxis;
    uint8_t rcSmoothingFilterType;



    float acroTrainerAngleLimit;
    float acroTrainerLookaheadTime;
    uint8_t acroTrainerDebugAxis;
    float acroTrainerGain;
    
# 355 "./src/main/flight/pid.h" 3 4
   _Bool 
# 355 "./src/main/flight/pid.h"
        acroTrainerActive;
    int acroTrainerAxisState[2];



    uint8_t dynLpfFilter;
    uint16_t dynLpfMin;
    uint16_t dynLpfMax;
    uint8_t dynLpfCurveExpo;
# 387 "./src/main/flight/pid.h"
    ffInterpolationType_t ffFromInterpolatedSetpoint;
    float ffSmoothFactor;

} pidRuntime_t;

extern pidRuntime_t pidRuntime;

extern const char pidNames[];

extern pidAxisData_t pidData[3];

extern uint32_t targetPidLooptime;

extern float throttleBoost;
extern pt1Filter_t throttleLpf;

void pidResetIterm(void);
void pidStabilisationState(pidStabilisationState_e pidControllerState);
void pidSetItermAccelerator(float newItermAccelerator);

# 406 "./src/main/flight/pid.h" 3 4
_Bool 
# 406 "./src/main/flight/pid.h"
    crashRecoveryModeActive(void);
void pidAcroTrainerInit(void);
void pidSetAcroTrainerState(
# 408 "./src/main/flight/pid.h" 3 4
                           _Bool 
# 408 "./src/main/flight/pid.h"
                                newState);
void pidUpdateAntiGravityThrottleFilter(float throttle);

# 410 "./src/main/flight/pid.h" 3 4
_Bool 
# 410 "./src/main/flight/pid.h"
    pidOsdAntiGravityActive(void);

# 411 "./src/main/flight/pid.h" 3 4
_Bool 
# 411 "./src/main/flight/pid.h"
    pidOsdAntiGravityMode(void);
void pidSetAntiGravityState(
# 412 "./src/main/flight/pid.h" 3 4
                           _Bool 
# 412 "./src/main/flight/pid.h"
                                newState);

# 413 "./src/main/flight/pid.h" 3 4
_Bool 
# 413 "./src/main/flight/pid.h"
    pidAntiGravityEnabled(void);
# 436 "./src/main/flight/pid.h"
void dynLpfDTermUpdate(float throttle);
void pidSetItermReset(
# 437 "./src/main/flight/pid.h" 3 4
                     _Bool 
# 437 "./src/main/flight/pid.h"
                          enabled);
float pidGetPreviousSetpoint(int axis);
float pidGetDT();
float pidGetPidFrequency();
float pidGetFfBoostFactor();
float pidGetFfSmoothFactor();
float dynLpfCutoffFreq(float throttle, uint16_t dynLpfMin, uint16_t dynLpfMax, uint8_t expo);
# 53 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/flight/imu.h" 1
# 21 "./src/main/flight/imu.h"
       







extern 
# 29 "./src/main/flight/imu.h" 3 4
      _Bool 
# 29 "./src/main/flight/imu.h"
           canUseGPSHeading;
extern float accAverage[3];

typedef struct {
    float w,x,y,z;
} quaternion;


typedef struct {
    float ww,wx,wy,wz,xx,xy,xz,yy,yz,zz;
} quaternionProducts;


typedef union {
    int16_t raw[3];
    struct {

        int16_t roll;
        int16_t pitch;
        int16_t yaw;
    } values;
} attitudeEulerAngles_t;


extern attitudeEulerAngles_t attitude;
extern float rMat[3][3];

typedef struct imuConfig_s {
    uint16_t dcm_kp;
    uint16_t dcm_ki;
    uint8_t small_angle;
} imuConfig_t;

extern imuConfig_t imuConfig_System; extern imuConfig_t imuConfig_Copy; static inline const imuConfig_t* imuConfig(void) { return &imuConfig_System; } static inline imuConfig_t* imuConfigMutable(void) { return &imuConfig_System; } struct _dummy;

typedef struct imuRuntimeConfig_s {
    float dcm_ki;
    float dcm_kp;
} imuRuntimeConfig_t;

void imuConfigure(uint16_t throttle_correction_angle, uint8_t throttle_correction_value);

float getCosTiltAngle(void);
void getQuaternion(quaternion * q);
void imuUpdateAttitude(timeUs_t currentTimeUs);

void imuInit(void);
# 85 "./src/main/flight/imu.h"

# 85 "./src/main/flight/imu.h" 3 4
_Bool 
# 85 "./src/main/flight/imu.h"
    imuQuaternionHeadfreeOffsetSet(void);
void imuQuaternionHeadfreeTransformVectorEarthToBody(t_fp_vector_def * v);

# 87 "./src/main/flight/imu.h" 3 4
_Bool 
# 87 "./src/main/flight/imu.h"
    shouldInitializeGPSHeading(void);

# 88 "./src/main/flight/imu.h" 3 4
_Bool 
# 88 "./src/main/flight/imu.h"
    isUpright(void);
# 54 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/flight/failsafe.h" 1
# 21 "./src/main/flight/failsafe.h"
       
# 35 "./src/main/flight/failsafe.h"
typedef struct failsafeConfig_s {
    uint16_t failsafe_throttle;
    uint16_t failsafe_throttle_low_delay;
    uint8_t failsafe_delay;
    uint8_t failsafe_off_delay;
    uint8_t failsafe_switch_mode;
    uint8_t failsafe_procedure;
    uint16_t failsafe_recovery_delay;
    uint8_t failsafe_stick_threshold;
} failsafeConfig_t;

extern failsafeConfig_t failsafeConfig_System; extern failsafeConfig_t failsafeConfig_Copy; static inline const failsafeConfig_t* failsafeConfig(void) { return &failsafeConfig_System; } static inline failsafeConfig_t* failsafeConfigMutable(void) { return &failsafeConfig_System; } struct _dummy;

typedef enum {
    FAILSAFE_IDLE = 0,
    FAILSAFE_RX_LOSS_DETECTED,
    FAILSAFE_LANDING,
    FAILSAFE_LANDED,
    FAILSAFE_RX_LOSS_MONITORING,
    FAILSAFE_RX_LOSS_RECOVERED,
    FAILSAFE_GPS_RESCUE
} failsafePhase_e;

typedef enum {
    FAILSAFE_RXLINK_DOWN = 0,
    FAILSAFE_RXLINK_UP
} failsafeRxLinkState_e;

typedef enum {
    FAILSAFE_PROCEDURE_AUTO_LANDING = 0,
    FAILSAFE_PROCEDURE_DROP_IT,



    FAILSAFE_PROCEDURE_COUNT
} failsafeProcedure_e;

extern const char * const failsafeProcedureNames[FAILSAFE_PROCEDURE_COUNT];

typedef enum {
    FAILSAFE_SWITCH_MODE_STAGE1 = 0,
    FAILSAFE_SWITCH_MODE_KILL,
    FAILSAFE_SWITCH_MODE_STAGE2
} failsafeSwitchMode_e;

typedef struct failsafeState_s {
    int16_t events;
    
# 82 "./src/main/flight/failsafe.h" 3 4
   _Bool 
# 82 "./src/main/flight/failsafe.h"
        monitoring;
    
# 83 "./src/main/flight/failsafe.h" 3 4
   _Bool 
# 83 "./src/main/flight/failsafe.h"
        active;
    uint32_t rxDataFailurePeriod;
    uint32_t rxDataRecoveryPeriod;
    uint32_t validRxDataReceivedAt;
    uint32_t validRxDataFailedAt;
    uint32_t throttleLowPeriod;
    uint32_t landingShouldBeFinishedAt;
    uint32_t receivingRxDataPeriod;
    uint32_t receivingRxDataPeriodPreset;
    failsafePhase_e phase;
    failsafeRxLinkState_e rxLinkState;
} failsafeState_t;

void failsafeInit(void);
void failsafeReset(void);

void failsafeStartMonitoring(void);
void failsafeUpdateState(void);

failsafePhase_e failsafePhase(void);

# 103 "./src/main/flight/failsafe.h" 3 4
_Bool 
# 103 "./src/main/flight/failsafe.h"
    failsafeIsMonitoring(void);

# 104 "./src/main/flight/failsafe.h" 3 4
_Bool 
# 104 "./src/main/flight/failsafe.h"
    failsafeIsActive(void);

# 105 "./src/main/flight/failsafe.h" 3 4
_Bool 
# 105 "./src/main/flight/failsafe.h"
    failsafeIsReceivingRxData(void);
void failsafeOnRxSuspend(uint32_t suspendPeriod);
void failsafeOnRxResume(void);

void failsafeOnValidDataReceived(void);
void failsafeOnValidDataFailed(void);
# 55 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/flight/position.h" 1
# 21 "./src/main/flight/position.h"
       



typedef struct positionConfig_s {
    uint8_t altSource;
} positionConfig_t;

extern positionConfig_t positionConfig_System; extern positionConfig_t positionConfig_Copy; static inline const positionConfig_t* positionConfig(void) { return &positionConfig_System; } static inline positionConfig_t* positionConfigMutable(void) { return &positionConfig_System; } struct _dummy;


# 31 "./src/main/flight/position.h" 3 4
_Bool 
# 31 "./src/main/flight/position.h"
    isAltitudeOffset(void);
void calculateEstimatedAltitude(timeUs_t currentTimeUs);
int32_t getEstimatedAltitudeCm(void);
int16_t getEstimatedVario(void);
# 56 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/io/serial.h" 1
# 21 "./src/main/io/serial.h"
       





# 1 "./src/main/drivers/serial.h" 1
# 21 "./src/main/drivers/serial.h"
       







typedef enum {
    MODE_RX = 1 << 0,
    MODE_TX = 1 << 1,
    MODE_RXTX = MODE_RX | MODE_TX
} portMode_e;

typedef enum {
    SERIAL_NOT_INVERTED = 0 << 0,
    SERIAL_INVERTED = 1 << 0,
    SERIAL_STOPBITS_1 = 0 << 1,
    SERIAL_STOPBITS_2 = 1 << 1,
    SERIAL_PARITY_NO = 0 << 2,
    SERIAL_PARITY_EVEN = 1 << 2,
    SERIAL_UNIDIR = 0 << 3,
    SERIAL_BIDIR = 1 << 3,
# 52 "./src/main/drivers/serial.h"
    SERIAL_BIDIR_OD = 0 << 4,
    SERIAL_BIDIR_PP = 1 << 4,
    SERIAL_BIDIR_NOPULL = 1 << 5,
} portOptions_e;





typedef void (*serialReceiveCallbackPtr)(uint16_t data, void *rxCallbackData);
typedef void (*serialIdleCallbackPtr)();

typedef struct serialPort_s {

    const struct serialPortVTable *vTable;

    portMode_e mode;
    portOptions_e options;

    uint32_t baudRate;

    uint32_t rxBufferSize;
    uint32_t txBufferSize;
    volatile uint8_t *rxBuffer;
    volatile uint8_t *txBuffer;
    uint32_t rxBufferHead;
    uint32_t rxBufferTail;
    uint32_t txBufferHead;
    uint32_t txBufferTail;

    serialReceiveCallbackPtr rxCallback;
    void *rxCallbackData;

    serialIdleCallbackPtr idleCallback;

    uint8_t identifier;
} serialPort_t;
# 100 "./src/main/drivers/serial.h"
typedef struct serialPinConfig_s {
    ioTag_t ioTagTx[10];
    ioTag_t ioTagRx[10];
    ioTag_t ioTagInverter[10];
} serialPinConfig_t;

extern serialPinConfig_t serialPinConfig_System; extern serialPinConfig_t serialPinConfig_Copy; static inline const serialPinConfig_t* serialPinConfig(void) { return &serialPinConfig_System; } static inline serialPinConfig_t* serialPinConfigMutable(void) { return &serialPinConfig_System; } struct _dummy;

struct serialPortVTable {
    void (*serialWrite)(serialPort_t *instance, uint8_t ch);

    uint32_t (*serialTotalRxWaiting)(const serialPort_t *instance);
    uint32_t (*serialTotalTxFree)(const serialPort_t *instance);

    uint8_t (*serialRead)(serialPort_t *instance);


    void (*serialSetBaudRate)(serialPort_t *instance, uint32_t baudRate);

    
# 119 "./src/main/drivers/serial.h" 3 4
   _Bool 
# 119 "./src/main/drivers/serial.h"
        (*isSerialTransmitBufferEmpty)(const serialPort_t *instance);

    void (*setMode)(serialPort_t *instance, portMode_e mode);
    void (*setCtrlLineStateCb)(serialPort_t *instance, void (*cb)(void *instance, uint16_t ctrlLineState), void *context);
    void (*setBaudRateCb)(serialPort_t *instance, void (*cb)(serialPort_t *context, uint32_t baud), serialPort_t *context);

    void (*writeBuf)(serialPort_t *instance, const void *data, int count);

    void (*beginWrite)(serialPort_t *instance);
    void (*endWrite)(serialPort_t *instance);
};

void serialWrite(serialPort_t *instance, uint8_t ch);
uint32_t serialRxBytesWaiting(const serialPort_t *instance);
uint32_t serialTxBytesFree(const serialPort_t *instance);
void serialWriteBuf(serialPort_t *instance, const uint8_t *data, int count);
uint8_t serialRead(serialPort_t *instance);
void serialSetBaudRate(serialPort_t *instance, uint32_t baudRate);
void serialSetMode(serialPort_t *instance, portMode_e mode);
void serialSetCtrlLineStateCb(serialPort_t *instance, void (*cb)(void *context, uint16_t ctrlLineState), void *context);
void serialSetBaudRateCb(serialPort_t *instance, void (*cb)(serialPort_t *context, uint32_t baud), serialPort_t *context);

# 140 "./src/main/drivers/serial.h" 3 4
_Bool 
# 140 "./src/main/drivers/serial.h"
    isSerialTransmitBufferEmpty(const serialPort_t *instance);
void serialPrint(serialPort_t *instance, const char *str);
uint32_t serialGetBaudRate(serialPort_t *instance);


void serialWriteBufShim(void *instance, const uint8_t *data, int count);
void serialBeginWrite(serialPort_t *instance);
void serialEndWrite(serialPort_t *instance);
# 28 "./src/main/io/serial.h" 2

typedef enum {
    PORTSHARING_UNUSED = 0,
    PORTSHARING_NOT_SHARED,
    PORTSHARING_SHARED
} portSharing_e;

typedef enum {
    FUNCTION_NONE = 0,
    FUNCTION_MSP = (1 << 0),
    FUNCTION_GPS = (1 << 1),
    FUNCTION_TELEMETRY_FRSKY_HUB = (1 << 2),
    FUNCTION_TELEMETRY_HOTT = (1 << 3),
    FUNCTION_TELEMETRY_LTM = (1 << 4),
    FUNCTION_TELEMETRY_SMARTPORT = (1 << 5),
    FUNCTION_RX_SERIAL = (1 << 6),
    FUNCTION_BLACKBOX = (1 << 7),
    FUNCTION_TELEMETRY_MAVLINK = (1 << 9),
    FUNCTION_ESC_SENSOR = (1 << 10),
    FUNCTION_VTX_SMARTAUDIO = (1 << 11),
    FUNCTION_TELEMETRY_IBUS = (1 << 12),
    FUNCTION_VTX_TRAMP = (1 << 13),
    FUNCTION_RCDEVICE = (1 << 14),
    FUNCTION_LIDAR_TF = (1 << 15),
    FUNCTION_FRSKY_OSD = (1 << 16),
} serialPortFunction_e;




typedef enum {
    BAUD_AUTO = 0,
    BAUD_9600,
    BAUD_19200,
    BAUD_38400,
    BAUD_57600,
    BAUD_115200,
    BAUD_230400,
    BAUD_250000,
    BAUD_400000,
    BAUD_460800,
    BAUD_500000,
    BAUD_921600,
    BAUD_1000000,
    BAUD_1500000,
    BAUD_2000000,
    BAUD_2470000
} baudRate_e;

extern const uint32_t baudRates[];


typedef enum {
    SERIAL_PORT_ALL = -2,
    SERIAL_PORT_NONE = -1,
    SERIAL_PORT_USART1 = 0,
    SERIAL_PORT_USART2,
    SERIAL_PORT_USART3,
    SERIAL_PORT_UART4,
    SERIAL_PORT_UART5,
    SERIAL_PORT_USART6,
    SERIAL_PORT_USART7,
    SERIAL_PORT_USART8,
    SERIAL_PORT_LPUART1,
    SERIAL_PORT_USB_VCP = 20,
    SERIAL_PORT_SOFTSERIAL1 = 30,
    SERIAL_PORT_SOFTSERIAL2,
    SERIAL_PORT_IDENTIFIER_MAX = SERIAL_PORT_SOFTSERIAL2,
} serialPortIdentifier_e;

extern const serialPortIdentifier_e serialPortIdentifiers[8];
# 107 "./src/main/io/serial.h"
typedef struct serialPortUsage_s {
    serialPort_t *serialPort;
    serialPortFunction_e function;
    serialPortIdentifier_e identifier;
} serialPortUsage_t;

serialPort_t *findSharedSerialPort(uint16_t functionMask, serialPortFunction_e sharedWithFunction);




typedef struct serialPortConfig_s {
    uint32_t functionMask;
    int8_t identifier;
    uint8_t msp_baudrateIndex;
    uint8_t gps_baudrateIndex;
    uint8_t blackbox_baudrateIndex;
    uint8_t telemetry_baudrateIndex;
} serialPortConfig_t;

typedef struct serialConfig_s {
    serialPortConfig_t portConfigs[8];
    uint16_t serial_update_rate_hz;
    uint8_t reboot_character;
} serialConfig_t;

extern serialConfig_t serialConfig_System; extern serialConfig_t serialConfig_Copy; static inline const serialConfig_t* serialConfig(void) { return &serialConfig_System; } static inline serialConfig_t* serialConfigMutable(void) { return &serialConfig_System; } struct _dummy;

typedef void serialConsumer(uint8_t);




void serialInit(
# 140 "./src/main/io/serial.h" 3 4
               _Bool 
# 140 "./src/main/io/serial.h"
                    softserialEnabled, serialPortIdentifier_e serialPortToDisable);
void serialRemovePort(serialPortIdentifier_e identifier);
uint8_t serialGetAvailablePortCount(void);

# 143 "./src/main/io/serial.h" 3 4
_Bool 
# 143 "./src/main/io/serial.h"
    serialIsPortAvailable(serialPortIdentifier_e identifier);

# 144 "./src/main/io/serial.h" 3 4
_Bool 
# 144 "./src/main/io/serial.h"
    isSerialConfigValid(const serialConfig_t *serialConfig);
const serialPortConfig_t *serialFindPortConfiguration(serialPortIdentifier_e identifier);
serialPortConfig_t *serialFindPortConfigurationMutable(serialPortIdentifier_e identifier);

# 147 "./src/main/io/serial.h" 3 4
_Bool 
# 147 "./src/main/io/serial.h"
    doesConfigurationUsePort(serialPortIdentifier_e portIdentifier);
const serialPortConfig_t *findSerialPortConfig(serialPortFunction_e function);
const serialPortConfig_t *findNextSerialPortConfig(serialPortFunction_e function);

portSharing_e determinePortSharing(const serialPortConfig_t *portConfig, serialPortFunction_e function);

# 152 "./src/main/io/serial.h" 3 4
_Bool 
# 152 "./src/main/io/serial.h"
    isSerialPortShared(const serialPortConfig_t *portConfig, uint16_t functionMask, serialPortFunction_e sharedWithFunction);

void pgResetFn_serialConfig(serialConfig_t *serialConfig);
serialPortUsage_t *findSerialPortUsageByIdentifier(serialPortIdentifier_e identifier);
int findSerialPortIndexByIdentifier(serialPortIdentifier_e identifier);



serialPort_t *openSerialPort(
    serialPortIdentifier_e identifier,
    serialPortFunction_e function,
    serialReceiveCallbackPtr rxCallback,
    void *rxCallbackData,
    uint32_t baudrate,
    portMode_e mode,
    portOptions_e options
);
void closeSerialPort(serialPort_t *serialPort);

void waitForSerialPortToFinishTransmitting(serialPort_t *serialPort);

baudRate_e lookupBaudRateIndex(uint32_t baudRate);





void serialPassthrough(serialPort_t *left, serialPort_t *right, serialConsumer *leftC, serialConsumer *rightC);
# 58 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/io/gimbal.h" 1
# 21 "./src/main/io/gimbal.h"
       



typedef enum {
    GIMBAL_MODE_NORMAL = 0,
    GIMBAL_MODE_MIXTILT = 1
} gimbalMode_e;



typedef struct gimbalConfig_s {
    uint8_t mode;
} gimbalConfig_t;

extern gimbalConfig_t gimbalConfig_System; extern gimbalConfig_t gimbalConfig_Copy; static inline const gimbalConfig_t* gimbalConfig(void) { return &gimbalConfig_System; } static inline gimbalConfig_t* gimbalConfigMutable(void) { return &gimbalConfig_System; } struct _dummy;
# 59 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/io/gps.h" 1
# 21 "./src/main/io/gps.h"
       
# 35 "./src/main/io/gps.h"
typedef enum {
    GPS_NMEA = 0,
    GPS_UBLOX,
    GPS_MSP
} gpsProvider_e;

typedef enum {
    SBAS_AUTO = 0,
    SBAS_EGNOS,
    SBAS_WAAS,
    SBAS_MSAS,
    SBAS_GAGAN,
    SBAS_NONE
} sbasMode_e;



typedef enum {
    UBLOX_AIRBORNE = 0,
    UBLOX_PEDESTRIAN,
    UBLOX_DYNAMIC
} ubloxMode_e;

typedef enum {
    GPS_BAUDRATE_115200 = 0,
    GPS_BAUDRATE_57600,
    GPS_BAUDRATE_38400,
    GPS_BAUDRATE_19200,
    GPS_BAUDRATE_9600
} gpsBaudRate_e;

typedef enum {
    GPS_AUTOCONFIG_OFF = 0,
    GPS_AUTOCONFIG_ON
} gpsAutoConfig_e;

typedef enum {
    GPS_AUTOBAUD_OFF = 0,
    GPS_AUTOBAUD_ON
} gpsAutoBaud_e;

typedef enum {
    UBLOX_ACK_IDLE = 0,
    UBLOX_ACK_WAITING,
    UBLOX_ACK_GOT_ACK,
    UBLOX_ACK_GOT_NACK,
    UBLOX_ACK_GOT_TIMEOUT
} ubloxAckState_e;



typedef struct gpsConfig_s {
    gpsProvider_e provider;
    sbasMode_e sbasMode;
    gpsAutoConfig_e autoConfig;
    gpsAutoBaud_e autoBaud;
    uint8_t gps_ublox_use_galileo;
    ubloxMode_e gps_ublox_mode;
    uint8_t gps_set_home_point_once;
    uint8_t gps_use_3d_speed;
    uint8_t sbas_integrity;
} gpsConfig_t;

extern gpsConfig_t gpsConfig_System; extern gpsConfig_t gpsConfig_Copy; static inline const gpsConfig_t* gpsConfig(void) { return &gpsConfig_System; } static inline gpsConfig_t* gpsConfigMutable(void) { return &gpsConfig_System; } struct _dummy;

typedef struct gpsCoordinateDDDMMmmmm_s {
    int16_t dddmm;
    int16_t mmmm;
} gpsCoordinateDDDMMmmmm_t;


typedef struct gpsLocation_s {
    int32_t lat;
    int32_t lon;
    int32_t altCm;
} gpsLocation_t;

typedef struct gpsSolutionData_s {
    gpsLocation_t llh;
    uint16_t speed3d;
    uint16_t groundSpeed;
    uint16_t groundCourse;
    uint16_t hdop;
    uint8_t numSat;
} gpsSolutionData_t;

typedef enum {
    GPS_MESSAGE_STATE_IDLE = 0,
    GPS_MESSAGE_STATE_INIT,
    GPS_MESSAGE_STATE_SBAS,
    GPS_MESSAGE_STATE_GNSS,
    GPS_MESSAGE_STATE_INITIALIZED,
    GPS_MESSAGE_STATE_PEDESTRIAN_TO_AIRBORNE,
    GPS_MESSAGE_STATE_ENTRY_COUNT
} gpsMessageState_e;

typedef struct gpsData_s {
    uint32_t errors;
    uint32_t timeouts;
    uint32_t lastMessage;
    uint32_t lastLastMessage;

    uint32_t state_position;
    uint32_t state_ts;
    uint8_t state;
    uint8_t baudrateIndex;
    gpsMessageState_e messageState;

    uint8_t ackWaitingMsgId;
    uint8_t ackTimeoutCounter;
    ubloxAckState_e ackState;
} gpsData_t;


extern char gpsPacketLog[21];

extern int32_t GPS_home[2];
extern uint16_t GPS_distanceToHome;
extern int16_t GPS_directionToHome;
extern uint32_t GPS_distanceFlownInCm;
extern int16_t GPS_verticalSpeedInCmS;
extern int16_t GPS_angle[2];
extern float dTnav;
extern float GPS_scaleLonDown;
extern int16_t nav_takeoff_bearing;

typedef enum {
    GPS_DIRECT_TICK = 1 << 0,
    GPS_MSP_UPDATE = 1 << 1
} gpsUpdateToggle_e;

extern gpsData_t gpsData;
extern gpsSolutionData_t gpsSol;

extern uint8_t GPS_update;
extern uint32_t GPS_packetCount;
extern uint32_t GPS_svInfoReceivedCount;
extern uint8_t GPS_numCh;
extern uint8_t GPS_svinfo_chn[16];
extern uint8_t GPS_svinfo_svid[16];
extern uint8_t GPS_svinfo_quality[16];
extern uint8_t GPS_svinfo_cno[16];




void gpsInit(void);
void gpsUpdate(timeUs_t currentTimeUs);

# 183 "./src/main/io/gps.h" 3 4
_Bool 
# 183 "./src/main/io/gps.h"
    gpsNewFrame(uint8_t c);

# 184 "./src/main/io/gps.h" 3 4
_Bool 
# 184 "./src/main/io/gps.h"
    gpsIsHealthy(void);
struct serialPort_s;
void gpsEnablePassthrough(struct serialPort_s *gpsPassthroughPort);
void onGpsNewData(void);
void GPS_reset_home_position(void);
void GPS_calc_longitude_scaling(int32_t lat);
void GPS_distance_cm_bearing(int32_t *currentLat1, int32_t *currentLon1, int32_t *destinationLat2, int32_t *destinationLon2, uint32_t *dist, int32_t *bearing);
# 60 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/io/ledstrip.h" 1
# 21 "./src/main/io/ledstrip.h"
       





# 1 "./src/main/drivers/light_ws2811strip.h" 1
# 21 "./src/main/drivers/light_ws2811strip.h"
       
# 57 "./src/main/drivers/light_ws2811strip.h"
extern uint32_t ledStripDMABuffer[(32 * 24 + 42)];







typedef enum {
    LED_GRB,
    LED_RGB
} ledStripFormatRGB_e;

void ws2811LedStripInit(ioTag_t ioTag);
void ws2811LedStripEnable(void);


# 73 "./src/main/drivers/light_ws2811strip.h" 3 4
_Bool 
# 73 "./src/main/drivers/light_ws2811strip.h"
    ws2811LedStripHardwareInit(ioTag_t ioTag);
void ws2811LedStripDMAEnable(void);

void ws2811UpdateStrip(ledStripFormatRGB_e ledFormat);

void setLedHsv(uint16_t index, const hsvColor_t *color);
void getLedHsv(uint16_t index, hsvColor_t *color);

void scaleLedValue(uint16_t index, const uint8_t scalePercent);
void setLedValue(uint16_t index, const uint8_t value);

void setStripColor(const hsvColor_t *color);
void setStripColors(const hsvColor_t *colors);

void setUsedLedCount(unsigned ledCount);


# 89 "./src/main/drivers/light_ws2811strip.h" 3 4
_Bool 
# 89 "./src/main/drivers/light_ws2811strip.h"
    isWS2811LedStripReady(void);

extern volatile 
# 91 "./src/main/drivers/light_ws2811strip.h" 3 4
               _Bool 
# 91 "./src/main/drivers/light_ws2811strip.h"
                    ws2811LedDataTransferInProgress;

extern uint16_t BIT_COMPARE_1;
extern uint16_t BIT_COMPARE_0;
# 28 "./src/main/io/ledstrip.h" 2
# 80 "./src/main/io/ledstrip.h"
typedef enum {
    COLOR_BLACK = 0,
    COLOR_WHITE,
    COLOR_RED,
    COLOR_ORANGE,
    COLOR_YELLOW,
    COLOR_LIME_GREEN,
    COLOR_GREEN,
    COLOR_MINT_GREEN,
    COLOR_CYAN,
    COLOR_LIGHT_BLUE,
    COLOR_BLUE,
    COLOR_DARK_VIOLET,
    COLOR_MAGENTA,
    COLOR_DEEP_PINK,
    COLOR_COUNT
} colorId_e;

typedef enum {
    LED_MODE_ORIENTATION = 0,
    LED_MODE_HEADFREE,
    LED_MODE_HORIZON,
    LED_MODE_ANGLE,
    LED_MODE_MAG,
    LED_MODE_BARO,
    LED_SPECIAL,
    LED_AUX_CHANNEL
} ledModeIndex_e;

typedef enum {
    LED_SCOLOR_DISARMED = 0,
    LED_SCOLOR_ARMED,
    LED_SCOLOR_ANIMATION,
    LED_SCOLOR_BACKGROUND,
    LED_SCOLOR_BLINKBACKGROUND,
    LED_SCOLOR_GPSNOSATS,
    LED_SCOLOR_GPSNOLOCK,
    LED_SCOLOR_GPSLOCKED
} ledSpecialColorIds_e;

typedef enum {
    LED_DIRECTION_NORTH = 0,
    LED_DIRECTION_EAST,
    LED_DIRECTION_SOUTH,
    LED_DIRECTION_WEST,
    LED_DIRECTION_UP,
    LED_DIRECTION_DOWN
} ledDirectionId_e;

typedef enum {
    LED_FUNCTION_COLOR,
    LED_FUNCTION_FLIGHT_MODE,
    LED_FUNCTION_ARM_STATE,
    LED_FUNCTION_BATTERY,
    LED_FUNCTION_RSSI,
    LED_FUNCTION_GPS,
    LED_FUNCTION_THRUST_RING
} ledBaseFunctionId_e;

typedef enum {
    LED_OVERLAY_THROTTLE,
    LED_OVERLAY_LARSON_SCANNER,
    LED_OVERLAY_BLINK,
    LED_OVERLAY_VTX,
    LED_OVERLAY_INDICATOR,
    LED_OVERLAY_WARNING
} ledOverlayId_e;

typedef enum {
    LED_PROFILE_RACE = 0,
    LED_PROFILE_BEACON,

    LED_PROFILE_STATUS,

    LED_PROFILE_COUNT
} ledProfile_e;

typedef struct modeColorIndexes_s {
    uint8_t color[6];
} modeColorIndexes_t;

typedef struct specialColorIndexes_s {
    uint8_t color[11];
} specialColorIndexes_t;

typedef uint32_t ledConfig_t;

typedef struct ledCounts_s {
    uint8_t count;
    uint8_t ring;
    uint8_t larson;
    uint8_t ringSeqLen;
} ledCounts_t;

typedef struct ledStripConfig_s {
    uint8_t ledstrip_visual_beeper;
    ioTag_t ioTag;
    ledStripFormatRGB_e ledstrip_grb_rgb;
    ledProfile_e ledstrip_profile;
    colorId_e ledstrip_race_color;
    colorId_e ledstrip_beacon_color;
    uint16_t ledstrip_beacon_period_ms;
    uint8_t ledstrip_beacon_percent;
    uint8_t ledstrip_beacon_armed_only;
    colorId_e ledstrip_visual_beeper_color;
} ledStripConfig_t;

extern ledStripConfig_t ledStripConfig_System; extern ledStripConfig_t ledStripConfig_Copy; static inline const ledStripConfig_t* ledStripConfig(void) { return &ledStripConfig_System; } static inline ledStripConfig_t* ledStripConfigMutable(void) { return &ledStripConfig_System; } struct _dummy;


typedef struct ledStripStatusModeConfig_s {
    ledConfig_t ledConfigs[32];
    hsvColor_t colors[16];
    modeColorIndexes_t modeColors[6];
    specialColorIndexes_t specialColors;
    uint8_t ledstrip_aux_channel;
} ledStripStatusModeConfig_t;

extern ledStripStatusModeConfig_t ledStripStatusModeConfig_System; extern ledStripStatusModeConfig_t ledStripStatusModeConfig_Copy; static inline const ledStripStatusModeConfig_t* ledStripStatusModeConfig(void) { return &ledStripStatusModeConfig_System; } static inline ledStripStatusModeConfig_t* ledStripStatusModeConfigMutable(void) { return &ledStripStatusModeConfig_System; } struct _dummy;







static inline uint8_t ledGetXY(const ledConfig_t *lcfg) { return ((*lcfg >> 0) & ((1 << (8)) - 1)); }
static inline uint8_t ledGetX(const ledConfig_t *lcfg) { return ((*lcfg >> (0 + 4)) & 0x0F); }
static inline uint8_t ledGetY(const ledConfig_t *lcfg) { return ((*lcfg >> (0 + 0)) & 0x0F); }
static inline uint8_t ledGetFunction(const ledConfig_t *lcfg) { return ((*lcfg >> 8) & ((1 << (4)) - 1)); }
static inline uint8_t ledGetOverlay(const ledConfig_t *lcfg) { return ((*lcfg >> 12) & ((1 << (6)) - 1)); }
static inline uint8_t ledGetColor(const ledConfig_t *lcfg) { return ((*lcfg >> 18) & ((1 << (4)) - 1)); }
static inline uint8_t ledGetDirection(const ledConfig_t *lcfg) { return ((*lcfg >> 22) & ((1 << (6)) - 1)); }
static inline uint8_t ledGetParams(const ledConfig_t *lcfg) { return ((*lcfg >> 28) & ((1 << (4)) - 1)); }

static inline 
# 215 "./src/main/io/ledstrip.h" 3 4
             _Bool 
# 215 "./src/main/io/ledstrip.h"
                  ledGetOverlayBit(const ledConfig_t *lcfg, int id) { return ((ledGetOverlay(lcfg) >> id) & 1); }
static inline 
# 216 "./src/main/io/ledstrip.h" 3 4
             _Bool 
# 216 "./src/main/io/ledstrip.h"
                  ledGetDirectionBit(const ledConfig_t *lcfg, int id) { return ((ledGetDirection(lcfg) >> id) & 1); }


# 218 "./src/main/io/ledstrip.h" 3 4
_Bool 
# 218 "./src/main/io/ledstrip.h"
    parseColor(int index, const char *colorConfig);


# 220 "./src/main/io/ledstrip.h" 3 4
_Bool 
# 220 "./src/main/io/ledstrip.h"
    parseLedStripConfig(int ledIndex, const char *config);
void generateLedConfig(ledConfig_t *ledConfig, char *ledConfigBuffer, size_t bufferSize);
void reevaluateLedConfig(void);

void ledStripInit(void);
void ledStripEnable(void);
void ledStripDisable(void);
void ledStripUpdate(timeUs_t currentTimeUs);


# 229 "./src/main/io/ledstrip.h" 3 4
_Bool 
# 229 "./src/main/io/ledstrip.h"
    setModeColor(ledModeIndex_e modeIndex, int modeColorIndex, int colorIndex);

void applyDefaultLedStripConfig(ledConfig_t *ledConfig);
void applyDefaultColors(hsvColor_t *colors);
void applyDefaultModeColors(modeColorIndexes_t *modeColors);
void applyDefaultSpecialColors(specialColorIndexes_t *specialColors);

void updateRequiredOverlay(void);

uint8_t getLedProfile(void);
void setLedProfile(uint8_t profile);
# 61 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/rx/rx.h" 1
# 21 "./src/main/rx/rx.h"
       
# 48 "./src/main/rx/rx.h"
typedef enum {
    RX_FRAME_PENDING = 0,
    RX_FRAME_COMPLETE = (1 << 0),
    RX_FRAME_FAILSAFE = (1 << 1),
    RX_FRAME_PROCESSING_REQUIRED = (1 << 2),
    RX_FRAME_DROPPED = (1 << 3)
} rxFrameState_e;

typedef enum {
    SERIALRX_SPEKTRUM1024 = 0,
    SERIALRX_SPEKTRUM2048 = 1,
    SERIALRX_SBUS = 2,
    SERIALRX_SUMD = 3,
    SERIALRX_SUMH = 4,
    SERIALRX_XBUS_MODE_B = 5,
    SERIALRX_XBUS_MODE_B_RJ01 = 6,
    SERIALRX_IBUS = 7,
    SERIALRX_JETIEXBUS = 8,
    SERIALRX_CRSF = 9,
    SERIALRX_SRXL = 10,
    SERIALRX_TARGET_CUSTOM = 11,
    SERIALRX_FPORT = 12,
    SERIALRX_SRXL2 = 13,
    SERIALRX_GHST = 14
} SerialRXType;
# 87 "./src/main/rx/rx.h"
extern const char rcChannelLetters[];

extern int16_t rcData[18];






typedef enum {
    RX_FAILSAFE_MODE_AUTO = 0,
    RX_FAILSAFE_MODE_HOLD,
    RX_FAILSAFE_MODE_SET,
    RX_FAILSAFE_MODE_INVALID
} rxFailsafeChannelMode_e;



typedef enum {
    RX_FAILSAFE_TYPE_FLIGHT = 0,
    RX_FAILSAFE_TYPE_AUX
} rxFailsafeChannelType_e;



typedef struct rxFailsafeChannelConfig_s {
    uint8_t mode;
    uint8_t step;
} rxFailsafeChannelConfig_t;

extern rxFailsafeChannelConfig_t rxFailsafeChannelConfigs_SystemArray[18]; extern rxFailsafeChannelConfig_t rxFailsafeChannelConfigs_CopyArray[18]; static inline const rxFailsafeChannelConfig_t* rxFailsafeChannelConfigs(int _index) { return &rxFailsafeChannelConfigs_SystemArray[_index]; } static inline rxFailsafeChannelConfig_t* rxFailsafeChannelConfigsMutable(int _index) { return &rxFailsafeChannelConfigs_SystemArray[_index]; } static inline rxFailsafeChannelConfig_t (* rxFailsafeChannelConfigs_array(void))[18] { return &rxFailsafeChannelConfigs_SystemArray; } struct _dummy;

typedef struct rxChannelRangeConfig_s {
    uint16_t min;
    uint16_t max;
} rxChannelRangeConfig_t;

extern rxChannelRangeConfig_t rxChannelRangeConfigs_SystemArray[4]; extern rxChannelRangeConfig_t rxChannelRangeConfigs_CopyArray[4]; static inline const rxChannelRangeConfig_t* rxChannelRangeConfigs(int _index) { return &rxChannelRangeConfigs_SystemArray[_index]; } static inline rxChannelRangeConfig_t* rxChannelRangeConfigsMutable(int _index) { return &rxChannelRangeConfigs_SystemArray[_index]; } static inline rxChannelRangeConfig_t (* rxChannelRangeConfigs_array(void))[4] { return &rxChannelRangeConfigs_SystemArray; } struct _dummy;

struct rxRuntimeState_s;
typedef uint16_t (*rcReadRawDataFnPtr)(const struct rxRuntimeState_s *rxRuntimeState, uint8_t chan);
typedef uint8_t (*rcFrameStatusFnPtr)(struct rxRuntimeState_s *rxRuntimeState);
typedef 
# 129 "./src/main/rx/rx.h" 3 4
       _Bool 
# 129 "./src/main/rx/rx.h"
            (*rcProcessFrameFnPtr)(const struct rxRuntimeState_s *rxRuntimeState);
typedef timeUs_t rcGetFrameTimeUsFn(void);

typedef enum {
    RX_PROVIDER_NONE = 0,
    RX_PROVIDER_PARALLEL_PWM,
    RX_PROVIDER_PPM,
    RX_PROVIDER_SERIAL,
    RX_PROVIDER_MSP,
    RX_PROVIDER_SPI,
} rxProvider_t;

typedef struct rxRuntimeState_s {
    rxProvider_t rxProvider;
    SerialRXType serialrxProvider;
    uint8_t channelCount;
    uint16_t rxRefreshRate;
    rcReadRawDataFnPtr rcReadRawFn;
    rcFrameStatusFnPtr rcFrameStatusFn;
    rcProcessFrameFnPtr rcProcessFrameFn;
    rcGetFrameTimeUsFn *rcFrameTimeUsFn;
    uint16_t *channelData;
    void *frameData;
} rxRuntimeState_t;

typedef enum {
    RSSI_SOURCE_NONE = 0,
    RSSI_SOURCE_ADC,
    RSSI_SOURCE_RX_CHANNEL,
    RSSI_SOURCE_RX_PROTOCOL,
    RSSI_SOURCE_MSP,
    RSSI_SOURCE_FRAME_ERRORS,
    RSSI_SOURCE_RX_PROTOCOL_CRSF,
} rssiSource_e;

extern rssiSource_e rssiSource;

typedef enum {
    LQ_SOURCE_NONE = 0,
    LQ_SOURCE_RX_PROTOCOL_CRSF,
    LQ_SOURCE_RX_PROTOCOL_GHST,
} linkQualitySource_e;

extern linkQualitySource_e linkQualitySource;

extern rxRuntimeState_t rxRuntimeState;

void rxInit(void);

# 177 "./src/main/rx/rx.h" 3 4
_Bool 
# 177 "./src/main/rx/rx.h"
    rxUpdateCheck(timeUs_t currentTimeUs, timeDelta_t currentDeltaTimeUs);

# 178 "./src/main/rx/rx.h" 3 4
_Bool 
# 178 "./src/main/rx/rx.h"
    rxIsReceivingSignal(void);

# 179 "./src/main/rx/rx.h" 3 4
_Bool 
# 179 "./src/main/rx/rx.h"
    rxAreFlightChannelsValid(void);

# 180 "./src/main/rx/rx.h" 3 4
_Bool 
# 180 "./src/main/rx/rx.h"
    calculateRxChannelsAndUpdateFailsafe(timeUs_t currentTimeUs);

struct rxConfig_s;

void parseRcChannels(const char *input, struct rxConfig_s *rxConfig);



void setRssiDirect(uint16_t newRssi, rssiSource_e source);
void setRssi(uint16_t rssiValue, rssiSource_e source);
void setRssiMsp(uint8_t newMspRssi);
void updateRSSI(timeUs_t currentTimeUs);
uint16_t getRssi(void);
uint8_t getRssiPercent(void);

# 194 "./src/main/rx/rx.h" 3 4
_Bool 
# 194 "./src/main/rx/rx.h"
    isRssiConfigured(void);



uint16_t rxGetLinkQuality(void);
void setLinkQualityDirect(uint16_t linkqualityValue);
uint16_t rxGetLinkQualityPercent(void);

int16_t getRssiDbm(void);
void setRssiDbm(int16_t newRssiDbm, rssiSource_e source);
void setRssiDbmDirect(int16_t newRssiDbm, rssiSource_e source);

void rxSetRfMode(uint8_t rfModeValue);
uint8_t rxGetRfMode(void);

void resetAllRxChannelRangeConfigurations(rxChannelRangeConfig_t *rxChannelRangeConfig);

void suspendRxPwmPpmSignal(void);
void resumeRxPwmPpmSignal(void);

uint16_t rxGetRefreshRate(void);

timeDelta_t rxGetFrameDelta(timeDelta_t *frameAgeUs);
# 63 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/sensors/sensors.h" 1
# 21 "./src/main/sensors/sensors.h"
       

typedef enum {
    SENSOR_INDEX_GYRO = 0,
    SENSOR_INDEX_ACC,
    SENSOR_INDEX_BARO,
    SENSOR_INDEX_MAG,
    SENSOR_INDEX_RANGEFINDER,
    SENSOR_INDEX_COUNT
} sensorIndex_e;

extern uint8_t requestedSensors[SENSOR_INDEX_COUNT];
extern uint8_t detectedSensors[SENSOR_INDEX_COUNT];

typedef struct int16_flightDynamicsTrims_s {
    int16_t roll;
    int16_t pitch;
    int16_t yaw;
    int16_t calibrationCompleted;
} flightDynamicsTrims_def_t;

typedef union flightDynamicsTrims_u {
    int16_t raw[4];
    flightDynamicsTrims_def_t values;
} flightDynamicsTrims_t;

typedef enum {
    SENSOR_GYRO = 1 << 0,
    SENSOR_ACC = 1 << 1,
    SENSOR_BARO = 1 << 2,
    SENSOR_MAG = 1 << 3,
    SENSOR_SONAR = 1 << 4,
    SENSOR_RANGEFINDER = 1 << 4,
    SENSOR_GPS = 1 << 5,
    SENSOR_GPSMAG = 1 << 6
} sensors_e;
# 65 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/acceleration.h" 1
# 21 "./src/main/sensors/acceleration.h"
       







typedef enum {
    ACC_DEFAULT,
    ACC_NONE,
    ACC_ADXL345,
    ACC_MPU6050,
    ACC_MMA8452,
    ACC_BMA280,
    ACC_LSM303DLHC,
    ACC_MPU6000,
    ACC_MPU6500,
    ACC_MPU9250,
    ACC_ICM20601,
    ACC_ICM20602,
    ACC_ICM20608G,
    ACC_ICM20649,
    ACC_ICM20689,
    ACC_ICM42605,
    ACC_BMI160,
    ACC_BMI270,
    ACC_LSM6DSO,
    ACC_FAKE
} accelerationSensor_e;

typedef struct acc_s {
    accDev_t dev;
    uint16_t sampleRateHz;
    float accADC[3];
    
# 56 "./src/main/sensors/acceleration.h" 3 4
   _Bool 
# 56 "./src/main/sensors/acceleration.h"
        isAccelUpdatedAtLeastOnce;
} acc_t;

extern acc_t acc;

typedef struct rollAndPitchTrims_s {
    int16_t roll;
    int16_t pitch;
} rollAndPitchTrims_t_def;

typedef union rollAndPitchTrims_u {
    int16_t raw[2];
    rollAndPitchTrims_t_def values;
} rollAndPitchTrims_t;


typedef struct accelerometerConfig_s {
    uint16_t acc_lpf_hz;
    uint8_t acc_hardware;
    
# 75 "./src/main/sensors/acceleration.h" 3 4
   _Bool 
# 75 "./src/main/sensors/acceleration.h"
        acc_high_fsr;
    flightDynamicsTrims_t accZero;
    rollAndPitchTrims_t accelerometerTrims;
} accelerometerConfig_t;

extern accelerometerConfig_t accelerometerConfig_System; extern accelerometerConfig_t accelerometerConfig_Copy; static inline const accelerometerConfig_t* accelerometerConfig(void) { return &accelerometerConfig_System; } static inline accelerometerConfig_t* accelerometerConfigMutable(void) { return &accelerometerConfig_System; } struct _dummy;



# 83 "./src/main/sensors/acceleration.h" 3 4
_Bool 
# 83 "./src/main/sensors/acceleration.h"
    accInit(uint16_t accSampleRateHz);

# 84 "./src/main/sensors/acceleration.h" 3 4
_Bool 
# 84 "./src/main/sensors/acceleration.h"
    accIsCalibrationComplete(void);

# 85 "./src/main/sensors/acceleration.h" 3 4
_Bool 
# 85 "./src/main/sensors/acceleration.h"
    accHasBeenCalibrated(void);
void accStartCalibration(void);
void resetRollAndPitchTrims(rollAndPitchTrims_t *rollAndPitchTrims);
void accUpdate(timeUs_t currentTimeUs, rollAndPitchTrims_t *rollAndPitchTrims);

# 89 "./src/main/sensors/acceleration.h" 3 4
_Bool 
# 89 "./src/main/sensors/acceleration.h"
    accGetAccumulationAverage(float *accumulation);
union flightDynamicsTrims_u;
void setAccelerationTrims(union flightDynamicsTrims_u *accelerationTrimsToUse);
void accInitFilters(void);
void applyAccelerometerTrimsDelta(union rollAndPitchTrims_u *rollAndPitchTrimsDelta);
# 66 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/gyro.h" 1
# 21 "./src/main/sensors/gyro.h"
       
# 32 "./src/main/sensors/gyro.h"
# 1 "./src/main/flight/gyroanalyse.h" 1
# 21 "./src/main/flight/gyroanalyse.h"
       

# 1 "./lib/main/CMSIS/DSP/Include/arm_math.h" 1
# 298 "./lib/main/CMSIS/DSP/Include/arm_math.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"
# 319 "./lib/main/CMSIS/DSP/Include/arm_math.h"
# 1 "./lib/main/CMSIS/Core/Include/core_cm7.h" 1
# 320 "./lib/main/CMSIS/DSP/Include/arm_math.h" 2
# 399 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  typedef enum
  {
    ARM_MATH_SUCCESS = 0,
    ARM_MATH_ARGUMENT_ERROR = -1,
    ARM_MATH_LENGTH_ERROR = -2,
    ARM_MATH_SIZE_MISMATCH = -3,
    ARM_MATH_NANINF = -4,
    ARM_MATH_SINGULAR = -5,
    ARM_MATH_TEST_FAILURE = -6
  } arm_status;




  typedef int8_t q7_t;




  typedef int16_t q15_t;




  typedef int32_t q31_t;




  typedef int64_t q63_t;




  typedef float float32_t;




  typedef double float64_t;
# 520 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline q31_t clip_q63_to_q31(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFFFFFF ^ ((q31_t) (x >> 63)))) : (q31_t) x;
  }




  __attribute__((always_inline)) static inline q15_t clip_q63_to_q15(
  q63_t x)
  {
    return ((q31_t) (x >> 32) != ((q31_t) x >> 31)) ?
      ((0x7FFF ^ ((q15_t) (x >> 63)))) : (q15_t) (x >> 15);
  }




  __attribute__((always_inline)) static inline q7_t clip_q31_to_q7(
  q31_t x)
  {
    return ((q31_t) (x >> 24) != ((q31_t) x >> 23)) ?
      ((0x7F ^ ((q7_t) (x >> 31)))) : (q7_t) x;
  }




  __attribute__((always_inline)) static inline q15_t clip_q31_to_q15(
  q31_t x)
  {
    return ((q31_t) (x >> 16) != ((q31_t) x >> 15)) ?
      ((0x7FFF ^ ((q15_t) (x >> 31)))) : (q15_t) x;
  }





  __attribute__((always_inline)) static inline q63_t mult32x64(
  q63_t x,
  q31_t y)
  {
    return ((((q63_t) (x & 0x00000000FFFFFFFF) * y) >> 32) +
            (((q63_t) (x >> 32) * y)));
  }





  __attribute__((always_inline)) static inline uint32_t arm_recip_q31(
  q31_t in,
  q31_t * dst,
  q31_t * pRecipTable)
  {
    q31_t out;
    uint32_t tempVal;
    uint32_t index, i;
    uint32_t signBits;

    if (in > 0)
    {
      signBits = ((uint32_t) ((uint8_t)__builtin_clz( in) - 1));
    }
    else
    {
      signBits = ((uint32_t) ((uint8_t)__builtin_clz(-in) - 1));
    }


    in = (in << signBits);


    index = (uint32_t)(in >> 24);
    index = (index & 0x0000003F);


    out = pRecipTable[index];



    for (i = 0U; i < 2U; i++)
    {
      tempVal = (uint32_t) (((q63_t) in * out) >> 31);
      tempVal = 0x7FFFFFFFu - tempVal;


      out = clip_q63_to_q31(((q63_t) out * tempVal) >> 30);
    }


    *dst = out;


    return (signBits + 1U);
  }





  __attribute__((always_inline)) static inline uint32_t arm_recip_q15(
  q15_t in,
  q15_t * dst,
  q15_t * pRecipTable)
  {
    q15_t out = 0;
    uint32_t tempVal = 0;
    uint32_t index = 0, i = 0;
    uint32_t signBits = 0;

    if (in > 0)
    {
      signBits = ((uint32_t)((uint8_t)__builtin_clz( in) - 17));
    }
    else
    {
      signBits = ((uint32_t)((uint8_t)__builtin_clz(-in) - 17));
    }


    in = (in << signBits);


    index = (uint32_t)(in >> 8);
    index = (index & 0x0000003F);


    out = pRecipTable[index];



    for (i = 0U; i < 2U; i++)
    {
      tempVal = (uint32_t) (((q31_t) in * out) >> 15);
      tempVal = 0x7FFFu - tempVal;

      out = (q15_t) (((q31_t) out * tempVal) >> 14);

    }


    *dst = out;


    return (signBits + 1);
  }
# 1010 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  typedef struct
  {
    uint16_t numTaps;
    q7_t *pState;
    q7_t *pCoeffs;
  } arm_fir_instance_q7;




  typedef struct
  {
    uint16_t numTaps;
    q15_t *pState;
    q15_t *pCoeffs;
  } arm_fir_instance_q15;




  typedef struct
  {
    uint16_t numTaps;
    q31_t *pState;
    q31_t *pCoeffs;
  } arm_fir_instance_q31;




  typedef struct
  {
    uint16_t numTaps;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_fir_instance_f32;
# 1055 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_q7(
  const arm_fir_instance_q7 * S,
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 1070 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_init_q7(
  arm_fir_instance_q7 * S,
  uint16_t numTaps,
  q7_t * pCoeffs,
  q7_t * pState,
  uint32_t blockSize);
# 1085 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_q15(
  const arm_fir_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1099 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_fast_q15(
  const arm_fir_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1116 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_fir_init_q15(
  arm_fir_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize);
# 1131 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_q31(
  const arm_fir_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1145 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_fast_q31(
  const arm_fir_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1160 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_init_q31(
  arm_fir_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  uint32_t blockSize);
# 1175 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_f32(
  const arm_fir_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 1190 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_init_f32(
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    int8_t numStages;
    q15_t *pState;
    q15_t *pCoeffs;
    int8_t postShift;
  } arm_biquad_casd_df1_inst_q15;




  typedef struct
  {
    uint32_t numStages;
    q31_t *pState;
    q31_t *pCoeffs;
    uint8_t postShift;
  } arm_biquad_casd_df1_inst_q31;




  typedef struct
  {
    uint32_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_biquad_casd_df1_inst_f32;
# 1238 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cascade_df1_q15(
  const arm_biquad_casd_df1_inst_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1253 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cascade_df1_init_q15(
  arm_biquad_casd_df1_inst_q15 * S,
  uint8_t numStages,
  q15_t * pCoeffs,
  q15_t * pState,
  int8_t postShift);
# 1268 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cascade_df1_fast_q15(
  const arm_biquad_casd_df1_inst_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 1282 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cascade_df1_q31(
  const arm_biquad_casd_df1_inst_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1296 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cascade_df1_fast_q31(
  const arm_biquad_casd_df1_inst_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 1311 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cascade_df1_init_q31(
  arm_biquad_casd_df1_inst_q31 * S,
  uint8_t numStages,
  q31_t * pCoeffs,
  q31_t * pState,
  int8_t postShift);
# 1326 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cascade_df1_f32(
  const arm_biquad_casd_df1_inst_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 1340 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cascade_df1_init_f32(
  arm_biquad_casd_df1_inst_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);





  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    float32_t *pData;
  } arm_matrix_instance_f32;





  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    float64_t *pData;
  } arm_matrix_instance_f64;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q15_t *pData;
  } arm_matrix_instance_q15;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q31_t *pData;
  } arm_matrix_instance_q31;
# 1397 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1411 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_add_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst);
# 1425 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_add_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1439 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_cmplx_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1453 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_cmplx_mult_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst,
  q15_t * pScratch);
# 1468 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_cmplx_mult_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1481 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst);
# 1493 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_trans_q15(
  const arm_matrix_instance_q15 * pSrc,
  arm_matrix_instance_q15 * pDst);
# 1505 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_trans_q31(
  const arm_matrix_instance_q31 * pSrc,
  arm_matrix_instance_q31 * pDst);
# 1518 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1533 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_mult_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst,
  q15_t * pState);
# 1549 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_mult_fast_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst,
  q15_t * pState);
# 1564 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_mult_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1578 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_mult_fast_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1592 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst);
# 1606 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_sub_q15(
  const arm_matrix_instance_q15 * pSrcA,
  const arm_matrix_instance_q15 * pSrcB,
  arm_matrix_instance_q15 * pDst);
# 1620 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_sub_q31(
  const arm_matrix_instance_q31 * pSrcA,
  const arm_matrix_instance_q31 * pSrcB,
  arm_matrix_instance_q31 * pDst);
# 1634 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
  float32_t scale,
  arm_matrix_instance_f32 * pDst);
# 1649 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_scale_q15(
  const arm_matrix_instance_q15 * pSrc,
  q15_t scaleFract,
  int32_t shift,
  arm_matrix_instance_q15 * pDst);
# 1665 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_scale_q31(
  const arm_matrix_instance_q31 * pSrc,
  q31_t scaleFract,
  int32_t shift,
  arm_matrix_instance_q31 * pDst);
# 1679 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_mat_init_q31(
  arm_matrix_instance_q31 * S,
  uint16_t nRows,
  uint16_t nColumns,
  q31_t * pData);
# 1693 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_mat_init_q15(
  arm_matrix_instance_q15 * S,
  uint16_t nRows,
  uint16_t nColumns,
  q15_t * pData);
# 1707 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData);






  typedef struct
  {
    q15_t A0;




    q31_t A1;

    q15_t state[3];
    q15_t Kp;
    q15_t Ki;
    q15_t Kd;
  } arm_pid_instance_q15;




  typedef struct
  {
    q31_t A0;
    q31_t A1;
    q31_t A2;
    q31_t state[3];
    q31_t Kp;
    q31_t Ki;
    q31_t Kd;
  } arm_pid_instance_q31;




  typedef struct
  {
    float32_t A0;
    float32_t A1;
    float32_t A2;
    float32_t state[3];
    float32_t Kp;
    float32_t Ki;
    float32_t Kd;
  } arm_pid_instance_f32;
# 1768 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag);






  void arm_pid_reset_f32(
  arm_pid_instance_f32 * S);







  void arm_pid_init_q31(
  arm_pid_instance_q31 * S,
  int32_t resetStateFlag);







  void arm_pid_reset_q31(
  arm_pid_instance_q31 * S);







  void arm_pid_init_q15(
  arm_pid_instance_q15 * S,
  int32_t resetStateFlag);






  void arm_pid_reset_q15(
  arm_pid_instance_q15 * S);





  typedef struct
  {
    uint32_t nValues;
    float32_t x1;
    float32_t xSpacing;
    float32_t *pYData;
  } arm_linear_interp_instance_f32;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    float32_t *pData;
  } arm_bilinear_interp_instance_f32;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q31_t *pData;
  } arm_bilinear_interp_instance_q31;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q15_t *pData;
  } arm_bilinear_interp_instance_q15;




  typedef struct
  {
    uint16_t numRows;
    uint16_t numCols;
    q7_t *pData;
  } arm_bilinear_interp_instance_q7;
# 1877 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_mult_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  q7_t * pDst,
  uint32_t blockSize);
# 1891 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_mult_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t blockSize);
# 1905 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_mult_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize);
# 1919 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q15_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix2_instance_q15;


  arm_status arm_cfft_radix2_init_q15(
  arm_cfft_radix2_instance_q15 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix2_q15(
  const arm_cfft_radix2_instance_q15 * S,
  q15_t * pSrc);





  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q15_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix4_instance_q15;


  arm_status arm_cfft_radix4_init_q15(
  arm_cfft_radix4_instance_q15 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix4_q15(
  const arm_cfft_radix4_instance_q15 * S,
  q15_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q31_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix2_instance_q31;


  arm_status arm_cfft_radix2_init_q31(
  arm_cfft_radix2_instance_q31 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix2_q31(
  const arm_cfft_radix2_instance_q31 * S,
  q31_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    q31_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
  } arm_cfft_radix4_instance_q31;


  void arm_cfft_radix4_q31(
  const arm_cfft_radix4_instance_q31 * S,
  q31_t * pSrc);


  arm_status arm_cfft_radix4_init_q31(
  arm_cfft_radix4_instance_q31 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    float32_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
    float32_t onebyfftLen;
  } arm_cfft_radix2_instance_f32;


  arm_status arm_cfft_radix2_init_f32(
  arm_cfft_radix2_instance_f32 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix2_f32(
  const arm_cfft_radix2_instance_f32 * S,
  float32_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    uint8_t ifftFlag;
    uint8_t bitReverseFlag;
    float32_t *pTwiddle;
    uint16_t *pBitRevTable;
    uint16_t twidCoefModifier;
    uint16_t bitRevFactor;
    float32_t onebyfftLen;
  } arm_cfft_radix4_instance_f32;


  arm_status arm_cfft_radix4_init_f32(
  arm_cfft_radix4_instance_f32 * S,
  uint16_t fftLen,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);


  void arm_cfft_radix4_f32(
  const arm_cfft_radix4_instance_f32 * S,
  float32_t * pSrc);




  typedef struct
  {
    uint16_t fftLen;
    const q15_t *pTwiddle;
    const uint16_t *pBitRevTable;
    uint16_t bitRevLength;
  } arm_cfft_instance_q15;

void arm_cfft_q15(
    const arm_cfft_instance_q15 * S,
    q15_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag);




  typedef struct
  {
    uint16_t fftLen;
    const q31_t *pTwiddle;
    const uint16_t *pBitRevTable;
    uint16_t bitRevLength;
  } arm_cfft_instance_q31;

void arm_cfft_q31(
    const arm_cfft_instance_q31 * S,
    q31_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag);




  typedef struct
  {
    uint16_t fftLen;
    const float32_t *pTwiddle;
    const uint16_t *pBitRevTable;
    uint16_t bitRevLength;
  } arm_cfft_instance_f32;

  void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
  float32_t * p1,
  uint8_t ifftFlag,
  uint8_t bitReverseFlag);




  typedef struct
  {
    uint32_t fftLenReal;
    uint8_t ifftFlagR;
    uint8_t bitReverseFlagR;
    uint32_t twidCoefRModifier;
    q15_t *pTwiddleAReal;
    q15_t *pTwiddleBReal;
    const arm_cfft_instance_q15 *pCfft;
  } arm_rfft_instance_q15;

  arm_status arm_rfft_init_q15(
  arm_rfft_instance_q15 * S,
  uint32_t fftLenReal,
  uint32_t ifftFlagR,
  uint32_t bitReverseFlag);

  void arm_rfft_q15(
  const arm_rfft_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst);




  typedef struct
  {
    uint32_t fftLenReal;
    uint8_t ifftFlagR;
    uint8_t bitReverseFlagR;
    uint32_t twidCoefRModifier;
    q31_t *pTwiddleAReal;
    q31_t *pTwiddleBReal;
    const arm_cfft_instance_q31 *pCfft;
  } arm_rfft_instance_q31;

  arm_status arm_rfft_init_q31(
  arm_rfft_instance_q31 * S,
  uint32_t fftLenReal,
  uint32_t ifftFlagR,
  uint32_t bitReverseFlag);

  void arm_rfft_q31(
  const arm_rfft_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst);




  typedef struct
  {
    uint32_t fftLenReal;
    uint16_t fftLenBy2;
    uint8_t ifftFlagR;
    uint8_t bitReverseFlagR;
    uint32_t twidCoefRModifier;
    float32_t *pTwiddleAReal;
    float32_t *pTwiddleBReal;
    arm_cfft_radix4_instance_f32 *pCfft;
  } arm_rfft_instance_f32;

  arm_status arm_rfft_init_f32(
  arm_rfft_instance_f32 * S,
  arm_cfft_radix4_instance_f32 * S_CFFT,
  uint32_t fftLenReal,
  uint32_t ifftFlagR,
  uint32_t bitReverseFlag);

  void arm_rfft_f32(
  const arm_rfft_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst);




typedef struct
  {
    arm_cfft_instance_f32 Sint;
    uint16_t fftLenRFFT;
    float32_t * pTwiddleRFFT;
  } arm_rfft_fast_instance_f32 ;

arm_status arm_rfft_fast_init_f32 (
   arm_rfft_fast_instance_f32 * S,
   uint16_t fftLen);

void arm_rfft_fast_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut,
  uint8_t ifftFlag);




  typedef struct
  {
    uint16_t N;
    uint16_t Nby2;
    float32_t normalize;
    float32_t *pTwiddle;
    float32_t *pCosFactor;
    arm_rfft_instance_f32 *pRfft;
    arm_cfft_radix4_instance_f32 *pCfft;
  } arm_dct4_instance_f32;
# 2257 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_dct4_init_f32(
  arm_dct4_instance_f32 * S,
  arm_rfft_instance_f32 * S_RFFT,
  arm_cfft_radix4_instance_f32 * S_CFFT,
  uint16_t N,
  uint16_t Nby2,
  float32_t normalize);
# 2272 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_dct4_f32(
  const arm_dct4_instance_f32 * S,
  float32_t * pState,
  float32_t * pInlineBuffer);





  typedef struct
  {
    uint16_t N;
    uint16_t Nby2;
    q31_t normalize;
    q31_t *pTwiddle;
    q31_t *pCosFactor;
    arm_rfft_instance_q31 *pRfft;
    arm_cfft_radix4_instance_q31 *pCfft;
  } arm_dct4_instance_q31;
# 2303 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_dct4_init_q31(
  arm_dct4_instance_q31 * S,
  arm_rfft_instance_q31 * S_RFFT,
  arm_cfft_radix4_instance_q31 * S_CFFT,
  uint16_t N,
  uint16_t Nby2,
  q31_t normalize);
# 2318 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_dct4_q31(
  const arm_dct4_instance_q31 * S,
  q31_t * pState,
  q31_t * pInlineBuffer);





  typedef struct
  {
    uint16_t N;
    uint16_t Nby2;
    q15_t normalize;
    q15_t *pTwiddle;
    q15_t *pCosFactor;
    arm_rfft_instance_q15 *pRfft;
    arm_cfft_radix4_instance_q15 *pCfft;
  } arm_dct4_instance_q15;
# 2349 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_dct4_init_q15(
  arm_dct4_instance_q15 * S,
  arm_rfft_instance_q15 * S_RFFT,
  arm_cfft_radix4_instance_q15 * S_CFFT,
  uint16_t N,
  uint16_t Nby2,
  q15_t normalize);
# 2364 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_dct4_q15(
  const arm_dct4_instance_q15 * S,
  q15_t * pState,
  q15_t * pInlineBuffer);
# 2377 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_add_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize);
# 2391 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_add_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  q7_t * pDst,
  uint32_t blockSize);
# 2405 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_add_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t blockSize);
# 2419 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_add_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize);
# 2433 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_sub_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize);
# 2447 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_sub_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  q7_t * pDst,
  uint32_t blockSize);
# 2461 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_sub_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t blockSize);
# 2475 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_sub_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t blockSize);
# 2489 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_scale_f32(
  float32_t * pSrc,
  float32_t scale,
  float32_t * pDst,
  uint32_t blockSize);
# 2504 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_scale_q7(
  q7_t * pSrc,
  q7_t scaleFract,
  int8_t shift,
  q7_t * pDst,
  uint32_t blockSize);
# 2520 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_scale_q15(
  q15_t * pSrc,
  q15_t scaleFract,
  int8_t shift,
  q15_t * pDst,
  uint32_t blockSize);
# 2536 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_scale_q31(
  q31_t * pSrc,
  q31_t scaleFract,
  int8_t shift,
  q31_t * pDst,
  uint32_t blockSize);
# 2550 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_abs_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 2562 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_abs_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 2574 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_abs_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 2586 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_abs_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 2599 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result);
# 2613 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_dot_prod_q7(
  q7_t * pSrcA,
  q7_t * pSrcB,
  uint32_t blockSize,
  q31_t * result);
# 2627 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_dot_prod_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  uint32_t blockSize,
  q63_t * result);
# 2641 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_dot_prod_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  uint32_t blockSize,
  q63_t * result);
# 2655 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_shift_q7(
  q7_t * pSrc,
  int8_t shiftBits,
  q7_t * pDst,
  uint32_t blockSize);
# 2669 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_shift_q15(
  q15_t * pSrc,
  int8_t shiftBits,
  q15_t * pDst,
  uint32_t blockSize);
# 2683 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_shift_q31(
  q31_t * pSrc,
  int8_t shiftBits,
  q31_t * pDst,
  uint32_t blockSize);
# 2697 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_offset_f32(
  float32_t * pSrc,
  float32_t offset,
  float32_t * pDst,
  uint32_t blockSize);
# 2711 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_offset_q7(
  q7_t * pSrc,
  q7_t offset,
  q7_t * pDst,
  uint32_t blockSize);
# 2725 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_offset_q15(
  q15_t * pSrc,
  q15_t offset,
  q15_t * pDst,
  uint32_t blockSize);
# 2739 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_offset_q31(
  q31_t * pSrc,
  q31_t offset,
  q31_t * pDst,
  uint32_t blockSize);
# 2752 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_negate_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 2764 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_negate_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 2776 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_negate_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 2788 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_negate_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 2800 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_copy_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 2812 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_copy_q7(
  q7_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 2824 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_copy_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 2836 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_copy_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 2848 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fill_f32(
  float32_t value,
  float32_t * pDst,
  uint32_t blockSize);
# 2860 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fill_q7(
  q7_t value,
  q7_t * pDst,
  uint32_t blockSize);
# 2872 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fill_q15(
  q15_t value,
  q15_t * pDst,
  uint32_t blockSize);
# 2884 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fill_q31(
  q31_t value,
  q31_t * pDst,
  uint32_t blockSize);
# 2898 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_conv_f32(
  float32_t * pSrcA,
  uint32_t srcALen,
  float32_t * pSrcB,
  uint32_t srcBLen,
  float32_t * pDst);
# 2916 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_conv_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 2934 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_conv_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst);
# 2950 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_conv_fast_q15(
          q15_t * pSrcA,
          uint32_t srcALen,
          q15_t * pSrcB,
          uint32_t srcBLen,
          q15_t * pDst);
# 2968 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_conv_fast_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 2986 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_conv_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 3002 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_conv_fast_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 3020 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_conv_opt_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3038 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_conv_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst);
# 3057 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_conv_partial_f32(
  float32_t * pSrcA,
  uint32_t srcALen,
  float32_t * pSrcB,
  uint32_t srcBLen,
  float32_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3080 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_conv_partial_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3103 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_conv_partial_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3124 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_conv_partial_fast_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3147 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_conv_partial_fast_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3170 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_conv_partial_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3191 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_conv_partial_fast_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);
# 3214 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_conv_partial_opt_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 3237 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_conv_partial_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  uint32_t firstIndex,
  uint32_t numPoints);





  typedef struct
  {
    uint8_t M;
    uint16_t numTaps;
    q15_t *pCoeffs;
    q15_t *pState;
  } arm_fir_decimate_instance_q15;




  typedef struct
  {
    uint8_t M;
    uint16_t numTaps;
    q31_t *pCoeffs;
    q31_t *pState;
  } arm_fir_decimate_instance_q31;




  typedef struct
  {
    uint8_t M;
    uint16_t numTaps;
    float32_t *pCoeffs;
    float32_t *pState;
  } arm_fir_decimate_instance_f32;
# 3288 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_decimate_f32(
  const arm_fir_decimate_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3306 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_fir_decimate_init_f32(
  arm_fir_decimate_instance_f32 * S,
  uint16_t numTaps,
  uint8_t M,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize);
# 3322 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_decimate_q15(
  const arm_fir_decimate_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3336 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_decimate_fast_q15(
  const arm_fir_decimate_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3354 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_fir_decimate_init_q15(
  arm_fir_decimate_instance_q15 * S,
  uint16_t numTaps,
  uint8_t M,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize);
# 3370 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_decimate_q31(
  const arm_fir_decimate_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3383 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_decimate_fast_q31(
  arm_fir_decimate_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3401 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_fir_decimate_init_q31(
  arm_fir_decimate_instance_q31 * S,
  uint16_t numTaps,
  uint8_t M,
  q31_t * pCoeffs,
  q31_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    uint8_t L;
    uint16_t phaseLength;
    q15_t *pCoeffs;
    q15_t *pState;
  } arm_fir_interpolate_instance_q15;




  typedef struct
  {
    uint8_t L;
    uint16_t phaseLength;
    q31_t *pCoeffs;
    q31_t *pState;
  } arm_fir_interpolate_instance_q31;




  typedef struct
  {
    uint8_t L;
    uint16_t phaseLength;
    float32_t *pCoeffs;
    float32_t *pState;
  } arm_fir_interpolate_instance_f32;
# 3451 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_interpolate_q15(
  const arm_fir_interpolate_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3469 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_fir_interpolate_init_q15(
  arm_fir_interpolate_instance_q15 * S,
  uint8_t L,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  uint32_t blockSize);
# 3485 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_interpolate_q31(
  const arm_fir_interpolate_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3503 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_fir_interpolate_init_q31(
  arm_fir_interpolate_instance_q31 * S,
  uint8_t L,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  uint32_t blockSize);
# 3519 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_interpolate_f32(
  const arm_fir_interpolate_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3537 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_fir_interpolate_init_f32(
  arm_fir_interpolate_instance_f32 * S,
  uint8_t L,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    uint8_t numStages;
    q63_t *pState;
    q31_t *pCoeffs;
    uint8_t postShift;
  } arm_biquad_cas_df1_32x64_ins_q31;
# 3564 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cas_df1_32x64_q31(
  const arm_biquad_cas_df1_32x64_ins_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3578 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cas_df1_32x64_init_q31(
  arm_biquad_cas_df1_32x64_ins_q31 * S,
  uint8_t numStages,
  q31_t * pCoeffs,
  q63_t * pState,
  uint8_t postShift);





  typedef struct
  {
    uint8_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_biquad_cascade_df2T_instance_f32;




  typedef struct
  {
    uint8_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_biquad_cascade_stereo_df2T_instance_f32;




  typedef struct
  {
    uint8_t numStages;
    float64_t *pState;
    float64_t *pCoeffs;
  } arm_biquad_cascade_df2T_instance_f64;
# 3624 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cascade_df2T_f32(
  const arm_biquad_cascade_df2T_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3638 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cascade_stereo_df2T_f32(
  const arm_biquad_cascade_stereo_df2T_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3652 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cascade_df2T_f64(
  const arm_biquad_cascade_df2T_instance_f64 * S,
  float64_t * pSrc,
  float64_t * pDst,
  uint32_t blockSize);
# 3666 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cascade_df2T_init_f32(
  arm_biquad_cascade_df2T_instance_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);
# 3680 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cascade_stereo_df2T_init_f32(
  arm_biquad_cascade_stereo_df2T_instance_f32 * S,
  uint8_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);
# 3694 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_biquad_cascade_df2T_init_f64(
  arm_biquad_cascade_df2T_instance_f64 * S,
  uint8_t numStages,
  float64_t * pCoeffs,
  float64_t * pState);





  typedef struct
  {
    uint16_t numStages;
    q15_t *pState;
    q15_t *pCoeffs;
  } arm_fir_lattice_instance_q15;




  typedef struct
  {
    uint16_t numStages;
    q31_t *pState;
    q31_t *pCoeffs;
  } arm_fir_lattice_instance_q31;




  typedef struct
  {
    uint16_t numStages;
    float32_t *pState;
    float32_t *pCoeffs;
  } arm_fir_lattice_instance_f32;
# 3739 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_lattice_init_q15(
  arm_fir_lattice_instance_q15 * S,
  uint16_t numStages,
  q15_t * pCoeffs,
  q15_t * pState);
# 3753 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_lattice_q15(
  const arm_fir_lattice_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3767 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_lattice_init_q31(
  arm_fir_lattice_instance_q31 * S,
  uint16_t numStages,
  q31_t * pCoeffs,
  q31_t * pState);
# 3781 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_lattice_q31(
  const arm_fir_lattice_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3795 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_lattice_init_f32(
  arm_fir_lattice_instance_f32 * S,
  uint16_t numStages,
  float32_t * pCoeffs,
  float32_t * pState);
# 3809 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_lattice_f32(
  const arm_fir_lattice_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numStages;
    q15_t *pState;
    q15_t *pkCoeffs;
    q15_t *pvCoeffs;
  } arm_iir_lattice_instance_q15;




  typedef struct
  {
    uint16_t numStages;
    q31_t *pState;
    q31_t *pkCoeffs;
    q31_t *pvCoeffs;
  } arm_iir_lattice_instance_q31;




  typedef struct
  {
    uint16_t numStages;
    float32_t *pState;
    float32_t *pkCoeffs;
    float32_t *pvCoeffs;
  } arm_iir_lattice_instance_f32;
# 3857 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_iir_lattice_f32(
  const arm_iir_lattice_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 3873 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_iir_lattice_init_f32(
  arm_iir_lattice_instance_f32 * S,
  uint16_t numStages,
  float32_t * pkCoeffs,
  float32_t * pvCoeffs,
  float32_t * pState,
  uint32_t blockSize);
# 3889 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_iir_lattice_q31(
  const arm_iir_lattice_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 3905 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_iir_lattice_init_q31(
  arm_iir_lattice_instance_q31 * S,
  uint16_t numStages,
  q31_t * pkCoeffs,
  q31_t * pvCoeffs,
  q31_t * pState,
  uint32_t blockSize);
# 3921 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_iir_lattice_q15(
  const arm_iir_lattice_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 3937 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_iir_lattice_init_q15(
  arm_iir_lattice_instance_q15 * S,
  uint16_t numStages,
  q15_t * pkCoeffs,
  q15_t * pvCoeffs,
  q15_t * pState,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    float32_t *pState;
    float32_t *pCoeffs;
    float32_t mu;
  } arm_lms_instance_f32;
# 3967 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_lms_f32(
  const arm_lms_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pRef,
  float32_t * pOut,
  float32_t * pErr,
  uint32_t blockSize);
# 3985 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_lms_init_f32(
  arm_lms_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  float32_t mu,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    q15_t *pState;
    q15_t *pCoeffs;
    q15_t mu;
    uint32_t postShift;
  } arm_lms_instance_q15;
# 4017 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_lms_init_q15(
  arm_lms_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  q15_t mu,
  uint32_t blockSize,
  uint32_t postShift);
# 4036 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_lms_q15(
  const arm_lms_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pRef,
  q15_t * pOut,
  q15_t * pErr,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    q31_t *pState;
    q31_t *pCoeffs;
    q31_t mu;
    uint32_t postShift;
  } arm_lms_instance_q31;
# 4067 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_lms_q31(
  const arm_lms_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pRef,
  q31_t * pOut,
  q31_t * pErr,
  uint32_t blockSize);
# 4086 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_lms_init_q31(
  arm_lms_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  q31_t mu,
  uint32_t blockSize,
  uint32_t postShift);





  typedef struct
  {
    uint16_t numTaps;
    float32_t *pState;
    float32_t *pCoeffs;
    float32_t mu;
    float32_t energy;
    float32_t x0;
  } arm_lms_norm_instance_f32;
# 4119 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_lms_norm_f32(
  arm_lms_norm_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pRef,
  float32_t * pOut,
  float32_t * pErr,
  uint32_t blockSize);
# 4137 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_lms_norm_init_f32(
  arm_lms_norm_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  float32_t mu,
  uint32_t blockSize);





  typedef struct
  {
    uint16_t numTaps;
    q31_t *pState;
    q31_t *pCoeffs;
    q31_t mu;
    uint8_t postShift;
    q31_t *recipTable;
    q31_t energy;
    q31_t x0;
  } arm_lms_norm_instance_q31;
# 4171 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_lms_norm_q31(
  arm_lms_norm_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pRef,
  q31_t * pOut,
  q31_t * pErr,
  uint32_t blockSize);
# 4190 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_lms_norm_init_q31(
  arm_lms_norm_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  q31_t mu,
  uint32_t blockSize,
  uint8_t postShift);





  typedef struct
  {
    uint16_t numTaps;
    q15_t *pState;
    q15_t *pCoeffs;
    q15_t mu;
    uint8_t postShift;
    q15_t *recipTable;
    q15_t energy;
    q15_t x0;
  } arm_lms_norm_instance_q15;
# 4225 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_lms_norm_q15(
  arm_lms_norm_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pRef,
  q15_t * pOut,
  q15_t * pErr,
  uint32_t blockSize);
# 4244 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_lms_norm_init_q15(
  arm_lms_norm_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  q15_t mu,
  uint32_t blockSize,
  uint8_t postShift);
# 4262 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_correlate_f32(
  float32_t * pSrcA,
  uint32_t srcALen,
  float32_t * pSrcB,
  uint32_t srcBLen,
  float32_t * pDst);
# 4279 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_correlate_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch);
# 4297 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_correlate_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst);
# 4314 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_correlate_fast_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst);
# 4331 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_correlate_fast_opt_q15(
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst,
  q15_t * pScratch);
# 4348 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_correlate_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 4364 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_correlate_fast_q31(
  q31_t * pSrcA,
  uint32_t srcALen,
  q31_t * pSrcB,
  uint32_t srcBLen,
  q31_t * pDst);
# 4382 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_correlate_opt_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst,
  q15_t * pScratch1,
  q15_t * pScratch2);
# 4400 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_correlate_q7(
  q7_t * pSrcA,
  uint32_t srcALen,
  q7_t * pSrcB,
  uint32_t srcBLen,
  q7_t * pDst);





  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    float32_t *pState;
    float32_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_f32;




  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    q31_t *pState;
    q31_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_q31;




  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    q15_t *pState;
    q15_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_q15;




  typedef struct
  {
    uint16_t numTaps;
    uint16_t stateIndex;
    q7_t *pState;
    q7_t *pCoeffs;
    uint16_t maxDelay;
    int32_t *pTapDelay;
  } arm_fir_sparse_instance_q7;
# 4469 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_sparse_f32(
  arm_fir_sparse_instance_f32 * S,
  float32_t * pSrc,
  float32_t * pDst,
  float32_t * pScratchIn,
  uint32_t blockSize);
# 4487 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_sparse_init_f32(
  arm_fir_sparse_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4505 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_sparse_q31(
  arm_fir_sparse_instance_q31 * S,
  q31_t * pSrc,
  q31_t * pDst,
  q31_t * pScratchIn,
  uint32_t blockSize);
# 4523 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_sparse_init_q31(
  arm_fir_sparse_instance_q31 * S,
  uint16_t numTaps,
  q31_t * pCoeffs,
  q31_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4542 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_sparse_q15(
  arm_fir_sparse_instance_q15 * S,
  q15_t * pSrc,
  q15_t * pDst,
  q15_t * pScratchIn,
  q31_t * pScratchOut,
  uint32_t blockSize);
# 4561 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_sparse_init_q15(
  arm_fir_sparse_instance_q15 * S,
  uint16_t numTaps,
  q15_t * pCoeffs,
  q15_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4580 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_sparse_q7(
  arm_fir_sparse_instance_q7 * S,
  q7_t * pSrc,
  q7_t * pDst,
  q7_t * pScratchIn,
  q31_t * pScratchOut,
  uint32_t blockSize);
# 4599 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_fir_sparse_init_q7(
  arm_fir_sparse_instance_q7 * S,
  uint16_t numTaps,
  q7_t * pCoeffs,
  q7_t * pState,
  int32_t * pTapDelay,
  uint16_t maxDelay,
  uint32_t blockSize);
# 4615 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_sin_cos_f32(
  float32_t theta,
  float32_t * pSinVal,
  float32_t * pCosVal);
# 4627 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_sin_cos_q31(
  q31_t theta,
  q31_t * pSinVal,
  q31_t * pCosVal);
# 4639 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_conj_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples);







  void arm_cmplx_conj_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t numSamples);
# 4662 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_conj_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t numSamples);
# 4674 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_mag_squared_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples);
# 4686 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_mag_squared_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t numSamples);
# 4698 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_mag_squared_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t numSamples);
# 4776 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
    float32_t out;


    out = (S->A0 * in) +
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);


    S->state[1] = S->state[0];
    S->state[0] = in;
    S->state[2] = out;


    return (out);

  }
# 4810 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline q31_t arm_pid_q31(
  arm_pid_instance_q31 * S,
  q31_t in)
  {
    q63_t acc;
    q31_t out;


    acc = (q63_t) S->A0 * in;


    acc += (q63_t) S->A1 * S->state[0];


    acc += (q63_t) S->A2 * S->state[1];


    out = (q31_t) (acc >> 31U);


    out += S->state[2];


    S->state[1] = S->state[0];
    S->state[0] = in;
    S->state[2] = out;


    return (out);
  }
# 4857 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline q15_t arm_pid_q15(
  arm_pid_instance_q15 * S,
  q15_t in)
  {
    q63_t acc;
    q15_t out;


    int32_t *vstate;




    acc = (q31_t) __SMUAD((uint32_t)S->A0, (uint32_t)in);


    vstate = ((int32_t *)(S->state));
    acc = (q63_t)__SMLALD((uint32_t)S->A1, (uint32_t)*vstate, (uint64_t)acc);
# 4885 "./lib/main/CMSIS/DSP/Include/arm_math.h"
    acc += (q31_t) S->state[2] << 15;


    out = (q15_t) (__extension__ ({ int32_t __RES, __ARG1 = ((acc >> 15)); __asm ("ssat %0, %1, %2" : "=r" (__RES) : "I" (16), "r" (__ARG1) ); __RES; }));


    S->state[1] = S->state[0];
    S->state[0] = in;
    S->state[2] = out;


    return (out);
  }
# 4911 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * src,
  arm_matrix_instance_f32 * dst);
# 4923 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_mat_inverse_f64(
  const arm_matrix_instance_f64 * src,
  arm_matrix_instance_f64 * dst);
# 4968 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline void arm_clarke_f32(
  float32_t Ia,
  float32_t Ib,
  float32_t * pIalpha,
  float32_t * pIbeta)
  {

    *pIalpha = Ia;


    *pIbeta = ((float32_t) 0.57735026919 * Ia + (float32_t) 1.15470053838 * Ib);
  }
# 4995 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline void arm_clarke_q31(
  q31_t Ia,
  q31_t Ib,
  q31_t * pIalpha,
  q31_t * pIbeta)
  {
    q31_t product1, product2;


    *pIalpha = Ia;


    product1 = (q31_t) (((q63_t) Ia * 0x24F34E8B) >> 30);


    product2 = (q31_t) (((q63_t) Ib * 0x49E69D16) >> 30);


    *pIbeta = __QADD(product1, product2);
  }
# 5026 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_q7_to_q31(
  q7_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 5065 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_clarke_f32(
  float32_t Ialpha,
  float32_t Ibeta,
  float32_t * pIa,
  float32_t * pIb)
  {

    *pIa = Ialpha;


    *pIb = -0.5f * Ialpha + 0.8660254039f * Ibeta;
  }
# 5092 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_clarke_q31(
  q31_t Ialpha,
  q31_t Ibeta,
  q31_t * pIa,
  q31_t * pIb)
  {
    q31_t product1, product2;


    *pIa = Ialpha;


    product1 = (q31_t) (((q63_t) (Ialpha) * (0x40000000)) >> 31);


    product2 = (q31_t) (((q63_t) (Ibeta) * (0x6ED9EBA1)) >> 31);


    *pIb = __QSUB(product2, product1);
  }
# 5123 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_q7_to_q15(
  q7_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 5175 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline void arm_park_f32(
  float32_t Ialpha,
  float32_t Ibeta,
  float32_t * pId,
  float32_t * pIq,
  float32_t sinVal,
  float32_t cosVal)
  {

    *pId = Ialpha * cosVal + Ibeta * sinVal;


    *pIq = -Ialpha * sinVal + Ibeta * cosVal;
  }
# 5206 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline void arm_park_q31(
  q31_t Ialpha,
  q31_t Ibeta,
  q31_t * pId,
  q31_t * pIq,
  q31_t sinVal,
  q31_t cosVal)
  {
    q31_t product1, product2;
    q31_t product3, product4;


    product1 = (q31_t) (((q63_t) (Ialpha) * (cosVal)) >> 31);


    product2 = (q31_t) (((q63_t) (Ibeta) * (sinVal)) >> 31);



    product3 = (q31_t) (((q63_t) (Ialpha) * (sinVal)) >> 31);


    product4 = (q31_t) (((q63_t) (Ibeta) * (cosVal)) >> 31);


    *pId = __QADD(product1, product2);


    *pIq = __QSUB(product4, product3);
  }
# 5247 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_q7_to_float(
  q7_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 5288 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_park_f32(
  float32_t Id,
  float32_t Iq,
  float32_t * pIalpha,
  float32_t * pIbeta,
  float32_t sinVal,
  float32_t cosVal)
  {

    *pIalpha = Id * cosVal - Iq * sinVal;


    *pIbeta = Id * sinVal + Iq * cosVal;
  }
# 5319 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline void arm_inv_park_q31(
  q31_t Id,
  q31_t Iq,
  q31_t * pIalpha,
  q31_t * pIbeta,
  q31_t sinVal,
  q31_t cosVal)
  {
    q31_t product1, product2;
    q31_t product3, product4;


    product1 = (q31_t) (((q63_t) (Id) * (cosVal)) >> 31);


    product2 = (q31_t) (((q63_t) (Iq) * (sinVal)) >> 31);



    product3 = (q31_t) (((q63_t) (Id) * (sinVal)) >> 31);


    product4 = (q31_t) (((q63_t) (Iq) * (cosVal)) >> 31);


    *pIalpha = __QSUB(product1, product2);


    *pIbeta = __QADD(product4, product3);
  }
# 5361 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_q31_to_float(
  q31_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 5414 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline float32_t arm_linear_interp_f32(
  arm_linear_interp_instance_f32 * S,
  float32_t x)
  {
    float32_t y;
    float32_t x0, x1;
    float32_t y0, y1;
    float32_t xSpacing = S->xSpacing;
    int32_t i;
    float32_t *pYData = S->pYData;


    i = (int32_t) ((x - S->x1) / xSpacing);

    if (i < 0)
    {

      y = pYData[0];
    }
    else if ((uint32_t)i >= S->nValues)
    {

      y = pYData[S->nValues - 1];
    }
    else
    {

      x0 = S->x1 + i * xSpacing;
      x1 = S->x1 + (i + 1) * xSpacing;


      y0 = pYData[i];
      y1 = pYData[i + 1];


      y = y0 + (x - x0) * ((y1 - y0) / (x1 - x0));

    }


    return (y);
  }
# 5471 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline q31_t arm_linear_interp_q31(
  q31_t * pYData,
  q31_t x,
  uint32_t nValues)
  {
    q31_t y;
    q31_t y0, y1;
    q31_t fract;
    int32_t index;




    index = ((x & (q31_t)0xFFF00000) >> 20);

    if (index >= (int32_t)(nValues - 1))
    {
      return (pYData[nValues - 1]);
    }
    else if (index < 0)
    {
      return (pYData[0]);
    }
    else
    {


      fract = (x & 0x000FFFFF) << 11;


      y0 = pYData[index];
      y1 = pYData[index + 1];


      y = ((q31_t) ((q63_t) y0 * (0x7FFFFFFF - fract) >> 32));


      y += ((q31_t) (((q63_t) y1 * fract) >> 32));


      return (y << 1U);
    }
  }
# 5529 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline q15_t arm_linear_interp_q15(
  q15_t * pYData,
  q31_t x,
  uint32_t nValues)
  {
    q63_t y;
    q15_t y0, y1;
    q31_t fract;
    int32_t index;




    index = ((x & (int32_t)0xFFF00000) >> 20);

    if (index >= (int32_t)(nValues - 1))
    {
      return (pYData[nValues - 1]);
    }
    else if (index < 0)
    {
      return (pYData[0]);
    }
    else
    {


      fract = (x & 0x000FFFFF);


      y0 = pYData[index];
      y1 = pYData[index + 1];


      y = ((q63_t) y0 * (0xFFFFF - fract));


      y += ((q63_t) y1 * (fract));


      return (q15_t) (y >> 20);
    }
  }
# 5586 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline q7_t arm_linear_interp_q7(
  q7_t * pYData,
  q31_t x,
  uint32_t nValues)
  {
    q31_t y;
    q7_t y0, y1;
    q31_t fract;
    uint32_t index;




    if (x < 0)
    {
      return (pYData[0]);
    }
    index = (x >> 20) & 0xfff;

    if (index >= (nValues - 1))
    {
      return (pYData[nValues - 1]);
    }
    else
    {


      fract = (x & 0x000FFFFF);


      y0 = pYData[index];
      y1 = pYData[index + 1];


      y = ((y0 * (0xFFFFF - fract)));


      y += (y1 * fract);


      return (q7_t) (y >> 20);
     }
  }
# 5639 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  float32_t arm_sin_f32(
  float32_t x);







  q31_t arm_sin_q31(
  q31_t x);







  q15_t arm_sin_q15(
  q15_t x);







  float32_t arm_cos_f32(
  float32_t x);







  q31_t arm_cos_q31(
  q31_t x);







  q15_t arm_cos_q15(
  q15_t x);
# 5726 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
    {






      *pOut = __builtin_sqrtf(in);






      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
      return (ARM_MATH_ARGUMENT_ERROR);
    }
  }
# 5762 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_sqrt_q31(
  q31_t in,
  q31_t * pOut);
# 5774 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  arm_status arm_sqrt_q15(
  q15_t in,
  q15_t * pOut);
# 5786 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline void arm_circularWrite_f32(
  int32_t * circBuffer,
  int32_t L,
  uint16_t * writeOffset,
  int32_t bufferInc,
  const int32_t * src,
  int32_t srcInc,
  uint32_t blockSize)
  {
    uint32_t i = 0U;
    int32_t wOffset;



    wOffset = *writeOffset;


    i = blockSize;

    while (i > 0U)
    {

      circBuffer[wOffset] = *src;


      src += srcInc;


      wOffset += bufferInc;
      if (wOffset >= L)
        wOffset -= L;


      i--;
    }


    *writeOffset = (uint16_t)wOffset;
  }






  __attribute__((always_inline)) static inline void arm_circularRead_f32(
  int32_t * circBuffer,
  int32_t L,
  int32_t * readOffset,
  int32_t bufferInc,
  int32_t * dst,
  int32_t * dst_base,
  int32_t dst_length,
  int32_t dstInc,
  uint32_t blockSize)
  {
    uint32_t i = 0U;
    int32_t rOffset, dst_end;



    rOffset = *readOffset;
    dst_end = (int32_t) (dst_base + dst_length);


    i = blockSize;

    while (i > 0U)
    {

      *dst = circBuffer[rOffset];


      dst += dstInc;

      if (dst == (int32_t *) dst_end)
      {
        dst = dst_base;
      }


      rOffset += bufferInc;

      if (rOffset >= L)
      {
        rOffset -= L;
      }


      i--;
    }


    *readOffset = rOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularWrite_q15(
  q15_t * circBuffer,
  int32_t L,
  uint16_t * writeOffset,
  int32_t bufferInc,
  const q15_t * src,
  int32_t srcInc,
  uint32_t blockSize)
  {
    uint32_t i = 0U;
    int32_t wOffset;



    wOffset = *writeOffset;


    i = blockSize;

    while (i > 0U)
    {

      circBuffer[wOffset] = *src;


      src += srcInc;


      wOffset += bufferInc;
      if (wOffset >= L)
        wOffset -= L;


      i--;
    }


    *writeOffset = (uint16_t)wOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularRead_q15(
  q15_t * circBuffer,
  int32_t L,
  int32_t * readOffset,
  int32_t bufferInc,
  q15_t * dst,
  q15_t * dst_base,
  int32_t dst_length,
  int32_t dstInc,
  uint32_t blockSize)
  {
    uint32_t i = 0;
    int32_t rOffset, dst_end;



    rOffset = *readOffset;

    dst_end = (int32_t) (dst_base + dst_length);


    i = blockSize;

    while (i > 0U)
    {

      *dst = circBuffer[rOffset];


      dst += dstInc;

      if (dst == (q15_t *) dst_end)
      {
        dst = dst_base;
      }


      rOffset += bufferInc;

      if (rOffset >= L)
      {
        rOffset -= L;
      }


      i--;
    }


    *readOffset = rOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularWrite_q7(
  q7_t * circBuffer,
  int32_t L,
  uint16_t * writeOffset,
  int32_t bufferInc,
  const q7_t * src,
  int32_t srcInc,
  uint32_t blockSize)
  {
    uint32_t i = 0U;
    int32_t wOffset;



    wOffset = *writeOffset;


    i = blockSize;

    while (i > 0U)
    {

      circBuffer[wOffset] = *src;


      src += srcInc;


      wOffset += bufferInc;
      if (wOffset >= L)
        wOffset -= L;


      i--;
    }


    *writeOffset = (uint16_t)wOffset;
  }





  __attribute__((always_inline)) static inline void arm_circularRead_q7(
  q7_t * circBuffer,
  int32_t L,
  int32_t * readOffset,
  int32_t bufferInc,
  q7_t * dst,
  q7_t * dst_base,
  int32_t dst_length,
  int32_t dstInc,
  uint32_t blockSize)
  {
    uint32_t i = 0;
    int32_t rOffset, dst_end;



    rOffset = *readOffset;

    dst_end = (int32_t) (dst_base + dst_length);


    i = blockSize;

    while (i > 0U)
    {

      *dst = circBuffer[rOffset];


      dst += dstInc;

      if (dst == (q7_t *) dst_end)
      {
        dst = dst_base;
      }


      rOffset += bufferInc;

      if (rOffset >= L)
      {
        rOffset -= L;
      }


      i--;
    }


    *readOffset = rOffset;
  }
# 6089 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_power_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q63_t * pResult);
# 6101 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_power_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6113 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_power_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q63_t * pResult);
# 6125 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_power_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6137 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_mean_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q7_t * pResult);
# 6149 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_mean_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6161 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_mean_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6173 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6185 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_var_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6197 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_var_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6209 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_var_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6221 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6233 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_rms_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6245 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_rms_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6257 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_std_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult);
# 6269 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_std_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult);
# 6281 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_std_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult);
# 6293 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples);
# 6305 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_mag_q31(
  q31_t * pSrc,
  q31_t * pDst,
  uint32_t numSamples);
# 6317 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_mag_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t numSamples);
# 6331 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_dot_prod_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  uint32_t numSamples,
  q31_t * realResult,
  q31_t * imagResult);
# 6347 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_dot_prod_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  uint32_t numSamples,
  q63_t * realResult,
  q63_t * imagResult);
# 6363 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t numSamples,
  float32_t * realResult,
  float32_t * imagResult);
# 6378 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_mult_real_q15(
  q15_t * pSrcCmplx,
  q15_t * pSrcReal,
  q15_t * pCmplxDst,
  uint32_t numSamples);
# 6392 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_mult_real_q31(
  q31_t * pSrcCmplx,
  q31_t * pSrcReal,
  q31_t * pCmplxDst,
  uint32_t numSamples);
# 6406 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_mult_real_f32(
  float32_t * pSrcCmplx,
  float32_t * pSrcReal,
  float32_t * pCmplxDst,
  uint32_t numSamples);
# 6420 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_min_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q7_t * result,
  uint32_t * index);
# 6434 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_min_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult,
  uint32_t * pIndex);
# 6448 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_min_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult,
  uint32_t * pIndex);
# 6462 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex);
# 6476 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_max_q7(
  q7_t * pSrc,
  uint32_t blockSize,
  q7_t * pResult,
  uint32_t * pIndex);
# 6490 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_max_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult,
  uint32_t * pIndex);
# 6504 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_max_q31(
  q31_t * pSrc,
  uint32_t blockSize,
  q31_t * pResult,
  uint32_t * pIndex);
# 6518 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex);
# 6532 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_mult_cmplx_q15(
  q15_t * pSrcA,
  q15_t * pSrcB,
  q15_t * pDst,
  uint32_t numSamples);
# 6546 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_mult_cmplx_q31(
  q31_t * pSrcA,
  q31_t * pSrcB,
  q31_t * pDst,
  uint32_t numSamples);
# 6560 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_cmplx_mult_cmplx_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t numSamples);
# 6573 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_float_to_q31(
  float32_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 6585 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_float_to_q15(
  float32_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 6597 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_float_to_q7(
  float32_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 6609 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_q31_to_q15(
  q31_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize);
# 6621 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_q31_to_q7(
  q31_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 6633 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_q15_to_float(
  q15_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize);
# 6645 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_q15_to_q31(
  q15_t * pSrc,
  q31_t * pDst,
  uint32_t blockSize);
# 6657 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  void arm_q15_to_q7(
  q15_t * pSrc,
  q7_t * pDst,
  uint32_t blockSize);
# 6733 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline float32_t arm_bilinear_interp_f32(
  const arm_bilinear_interp_instance_f32 * S,
  float32_t X,
  float32_t Y)
  {
    float32_t out;
    float32_t f00, f01, f10, f11;
    float32_t *pData = S->pData;
    int32_t xIndex, yIndex, index;
    float32_t xdiff, ydiff;
    float32_t b1, b2, b3, b4;

    xIndex = (int32_t) X;
    yIndex = (int32_t) Y;



    if (xIndex < 0 || xIndex > (S->numRows - 1) || yIndex < 0 || yIndex > (S->numCols - 1))
    {
      return (0);
    }


    index = (xIndex - 1) + (yIndex - 1) * S->numCols;



    f00 = pData[index];
    f01 = pData[index + 1];


    index = (xIndex - 1) + (yIndex) * S->numCols;



    f10 = pData[index];
    f11 = pData[index + 1];


    b1 = f00;
    b2 = f01 - f00;
    b3 = f10 - f00;
    b4 = f00 - f01 - f10 + f11;


    xdiff = X - xIndex;


    ydiff = Y - yIndex;


    out = b1 + b2 * xdiff + b3 * ydiff + b4 * xdiff * ydiff;


    return (out);
  }
# 6799 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline q31_t arm_bilinear_interp_q31(
  arm_bilinear_interp_instance_q31 * S,
  q31_t X,
  q31_t Y)
  {
    q31_t out;
    q31_t acc = 0;
    q31_t xfract, yfract;
    q31_t x1, x2, y1, y2;
    int32_t rI, cI;
    q31_t *pYData = S->pData;
    uint32_t nCols = S->numCols;




    rI = ((X & (q31_t)0xFFF00000) >> 20);




    cI = ((Y & (q31_t)0xFFF00000) >> 20);



    if (rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
    {
      return (0);
    }



    xfract = (X & 0x000FFFFF) << 11U;


    x1 = pYData[(rI) + (int32_t)nCols * (cI) ];
    x2 = pYData[(rI) + (int32_t)nCols * (cI) + 1];



    yfract = (Y & 0x000FFFFF) << 11U;


    y1 = pYData[(rI) + (int32_t)nCols * (cI + 1) ];
    y2 = pYData[(rI) + (int32_t)nCols * (cI + 1) + 1];


    out = ((q31_t) (((q63_t) x1 * (0x7FFFFFFF - xfract)) >> 32));
    acc = ((q31_t) (((q63_t) out * (0x7FFFFFFF - yfract)) >> 32));


    out = ((q31_t) ((q63_t) x2 * (0x7FFFFFFF - yfract) >> 32));
    acc += ((q31_t) ((q63_t) out * (xfract) >> 32));


    out = ((q31_t) ((q63_t) y1 * (0x7FFFFFFF - xfract) >> 32));
    acc += ((q31_t) ((q63_t) out * (yfract) >> 32));


    out = ((q31_t) ((q63_t) y2 * (xfract) >> 32));
    acc += ((q31_t) ((q63_t) out * (yfract) >> 32));


    return ((q31_t)(acc << 2));
  }
# 6873 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline q15_t arm_bilinear_interp_q15(
  arm_bilinear_interp_instance_q15 * S,
  q31_t X,
  q31_t Y)
  {
    q63_t acc = 0;
    q31_t out;
    q15_t x1, x2, y1, y2;
    q31_t xfract, yfract;
    int32_t rI, cI;
    q15_t *pYData = S->pData;
    uint32_t nCols = S->numCols;




    rI = ((X & (q31_t)0xFFF00000) >> 20);




    cI = ((Y & (q31_t)0xFFF00000) >> 20);



    if (rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
    {
      return (0);
    }



    xfract = (X & 0x000FFFFF);


    x1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) ];
    x2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) + 1];



    yfract = (Y & 0x000FFFFF);


    y1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) ];
    y2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) + 1];





    out = (q31_t) (((q63_t) x1 * (0xFFFFF - xfract)) >> 4U);
    acc = ((q63_t) out * (0xFFFFF - yfract));


    out = (q31_t) (((q63_t) x2 * (0xFFFFF - yfract)) >> 4U);
    acc += ((q63_t) out * (xfract));


    out = (q31_t) (((q63_t) y1 * (0xFFFFF - xfract)) >> 4U);
    acc += ((q63_t) out * (yfract));


    out = (q31_t) (((q63_t) y2 * (xfract)) >> 4U);
    acc += ((q63_t) out * (yfract));



    return ((q15_t)(acc >> 36));
  }
# 6951 "./lib/main/CMSIS/DSP/Include/arm_math.h"
  __attribute__((always_inline)) static inline q7_t arm_bilinear_interp_q7(
  arm_bilinear_interp_instance_q7 * S,
  q31_t X,
  q31_t Y)
  {
    q63_t acc = 0;
    q31_t out;
    q31_t xfract, yfract;
    q7_t x1, x2, y1, y2;
    int32_t rI, cI;
    q7_t *pYData = S->pData;
    uint32_t nCols = S->numCols;




    rI = ((X & (q31_t)0xFFF00000) >> 20);




    cI = ((Y & (q31_t)0xFFF00000) >> 20);



    if (rI < 0 || rI > (S->numRows - 1) || cI < 0 || cI > (S->numCols - 1))
    {
      return (0);
    }



    xfract = (X & (q31_t)0x000FFFFF);


    x1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) ];
    x2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI) + 1];



    yfract = (Y & (q31_t)0x000FFFFF);


    y1 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) ];
    y2 = pYData[((uint32_t)rI) + nCols * ((uint32_t)cI + 1) + 1];


    out = ((x1 * (0xFFFFF - xfract)));
    acc = (((q63_t) out * (0xFFFFF - yfract)));


    out = ((x2 * (0xFFFFF - yfract)));
    acc += (((q63_t) out * (xfract)));


    out = ((y1 * (0xFFFFF - xfract)));
    acc += (((q63_t) out * (yfract)));


    out = ((y2 * (yfract)));
    acc += (((q63_t) out * (xfract)));


    return ((q7_t)(acc >> 40));
  }
# 7138 "./lib/main/CMSIS/DSP/Include/arm_math.h"
#pragma GCC diagnostic pop
# 24 "./src/main/flight/gyroanalyse.h" 2





typedef struct gyroAnalyseState_s {

    uint8_t sampleCount;
    uint8_t maxSampleCount;
    float maxSampleCountRcp;
    float oversampledGyroAccumulator[3];


    uint8_t circularBufferIdx;
    float downsampledGyroData[3][32];


    uint8_t updateTicks;
    uint8_t updateStep;
    uint8_t updateAxis;

    arm_rfft_fast_instance_f32 fftInstance;
    float fftData[32];
    float rfftData[32];

    float centerFreq[3];

} gyroAnalyseState_t;

_Static_assert((32 <= (uint8_t) -1), "window_size_greater_than_underlying_type");

void gyroDataAnalyseStateInit(gyroAnalyseState_t *state, uint32_t targetLooptimeUs);
void gyroDataAnalysePush(gyroAnalyseState_t *state, const int axis, const float sample);
void gyroDataAnalyse(gyroAnalyseState_t *state, biquadFilter_t *notchFilterDyn, biquadFilter_t *notchFilterDyn2);
uint16_t getMaxFFT(void);
void resetMaxFFT(void);
# 33 "./src/main/sensors/gyro.h" 2
# 51 "./src/main/sensors/gyro.h"
typedef union gyroLowpassFilter_u {
    pt1Filter_t pt1FilterState;
    biquadFilter_t biquadFilterState;
} gyroLowpassFilter_t;

typedef enum gyroDetectionFlags_e {
    GYRO_NONE_MASK = 0,
    GYRO_1_MASK = (1 << (0)),

    GYRO_2_MASK = (1 << (1)),
    GYRO_ALL_MASK = (GYRO_1_MASK | GYRO_2_MASK),
    GYRO_IDENTICAL_MASK = (1 << (7)),

} gyroDetectionFlags_t;

typedef struct gyroCalibration_s {
    float sum[3];
    stdev_t var[3];
    int32_t cyclesRemaining;
} gyroCalibration_t;

typedef struct gyroSensor_s {
    gyroDev_t gyroDev;
    gyroCalibration_t calibration;
} gyroSensor_t;

typedef struct gyro_s {
    uint16_t sampleRateHz;
    uint32_t targetLooptime;
    uint32_t sampleLooptime;
    float scale;
    float gyroADC[3];
    float gyroADCf[3];
    uint8_t sampleCount;
    float sampleSum[3];
    
# 86 "./src/main/sensors/gyro.h" 3 4
   _Bool 
# 86 "./src/main/sensors/gyro.h"
        downsampleFilterEnabled;

    gyroSensor_t gyroSensor1;

    gyroSensor_t gyroSensor2;


    gyroDev_t *rawSensorDev;


    filterApplyFnPtr lowpassFilterApplyFn;
    gyroLowpassFilter_t lowpassFilter[3];


    filterApplyFnPtr lowpass2FilterApplyFn;
    gyroLowpassFilter_t lowpass2Filter[3];


    filterApplyFnPtr notchFilter1ApplyFn;
    biquadFilter_t notchFilter1[3];

    filterApplyFnPtr notchFilter2ApplyFn;
    biquadFilter_t notchFilter2[3];

    filterApplyFnPtr notchFilterDynApplyFn;
    filterApplyFnPtr notchFilterDynApplyFn2;
    biquadFilter_t notchFilterDyn[3];
    biquadFilter_t notchFilterDyn2[3];


    gyroAnalyseState_t gyroAnalyseState;


    uint16_t accSampleRateHz;
    uint8_t gyroToUse;
    uint8_t gyroDebugMode;
    
# 122 "./src/main/sensors/gyro.h" 3 4
   _Bool 
# 122 "./src/main/sensors/gyro.h"
        gyroHasOverflowProtection;
    
# 123 "./src/main/sensors/gyro.h" 3 4
   _Bool 
# 123 "./src/main/sensors/gyro.h"
        useDualGyroDebugging;
    flight_dynamics_index_t gyroDebugAxis;


    uint8_t dynLpfFilter;
    uint16_t dynLpfMin;
    uint16_t dynLpfMax;
    uint8_t dynLpfCurveExpo;



    uint8_t overflowAxisMask;


} gyro_t;

extern gyro_t gyro;
extern uint8_t activePidLoopDenom;

enum {
    GYRO_OVERFLOW_CHECK_NONE = 0,
    GYRO_OVERFLOW_CHECK_YAW,
    GYRO_OVERFLOW_CHECK_ALL_AXES
};

enum {
    DYN_LPF_NONE = 0,
    DYN_LPF_PT1,
    DYN_LPF_BIQUAD
};

typedef enum {
    YAW_SPIN_RECOVERY_OFF,
    YAW_SPIN_RECOVERY_ON,
    YAW_SPIN_RECOVERY_AUTO
} yawSpinRecoveryMode_e;





enum {
    FILTER_LOWPASS = 0,
    FILTER_LOWPASS2
};

typedef struct gyroConfig_s {
    uint8_t gyroMovementCalibrationThreshold;
    uint8_t gyro_hardware_lpf;

    uint8_t gyro_high_fsr;
    uint8_t gyro_to_use;

    uint16_t gyro_lowpass_hz;
    uint16_t gyro_lowpass2_hz;

    uint16_t gyro_soft_notch_hz_1;
    uint16_t gyro_soft_notch_cutoff_1;
    uint16_t gyro_soft_notch_hz_2;
    uint16_t gyro_soft_notch_cutoff_2;
    int16_t gyro_offset_yaw;
    uint8_t checkOverflow;


    uint8_t gyro_lowpass_type;
    uint8_t gyro_lowpass2_type;

    uint8_t yaw_spin_recovery;
    int16_t yaw_spin_threshold;

    uint16_t gyroCalibrationDuration;

    uint16_t dyn_lpf_gyro_min_hz;
    uint16_t dyn_lpf_gyro_max_hz;

    uint16_t dyn_notch_max_hz;
    uint8_t dyn_notch_width_percent;
    uint16_t dyn_notch_q;
    uint16_t dyn_notch_min_hz;

    uint8_t gyro_filter_debug_axis;

    uint8_t gyrosDetected;
    uint8_t dyn_lpf_curve_expo;
    uint8_t simplified_gyro_filter;
    uint8_t simplified_gyro_filter_multiplier;
} gyroConfig_t;

extern gyroConfig_t gyroConfig_System; extern gyroConfig_t gyroConfig_Copy; static inline const gyroConfig_t* gyroConfig(void) { return &gyroConfig_System; } static inline gyroConfig_t* gyroConfigMutable(void) { return &gyroConfig_System; } struct _dummy;

void gyroUpdate(void);
void gyroFiltering(timeUs_t currentTimeUs);

# 215 "./src/main/sensors/gyro.h" 3 4
_Bool 
# 215 "./src/main/sensors/gyro.h"
    gyroGetAccumulationAverage(float *accumulation);
void gyroStartCalibration(
# 216 "./src/main/sensors/gyro.h" 3 4
                         _Bool 
# 216 "./src/main/sensors/gyro.h"
                              isFirstArmingCalibration);

# 217 "./src/main/sensors/gyro.h" 3 4
_Bool 
# 217 "./src/main/sensors/gyro.h"
    isFirstArmingGyroCalibrationRunning(void);

# 218 "./src/main/sensors/gyro.h" 3 4
_Bool 
# 218 "./src/main/sensors/gyro.h"
    gyroIsCalibrationComplete(void);
void gyroReadTemperature(void);
int16_t gyroGetTemperature(void);

# 221 "./src/main/sensors/gyro.h" 3 4
_Bool 
# 221 "./src/main/sensors/gyro.h"
    gyroOverflowDetected(void);

# 222 "./src/main/sensors/gyro.h" 3 4
_Bool 
# 222 "./src/main/sensors/gyro.h"
    gyroYawSpinDetected(void);
uint16_t gyroAbsRateDps(int axis);

float dynThrottle(float throttle);
void dynLpfGyroUpdate(float throttle);


void initYawSpinRecovery(int maxYawRate);



# 232 "./src/main/sensors/gyro.h" 3 4
_Bool 
# 232 "./src/main/sensors/gyro.h"
    isDynamicFilterActive(void);
# 67 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/barometer.h" 1
# 21 "./src/main/sensors/barometer.h"
       


# 1 "./src/main/drivers/barometer/barometer.h" 1
# 21 "./src/main/drivers/barometer/barometer.h"
       




struct baroDev_s;

typedef void (*baroOpFuncPtr)(struct baroDev_s *baro);
typedef 
# 29 "./src/main/drivers/barometer/barometer.h" 3 4
       _Bool 
# 29 "./src/main/drivers/barometer/barometer.h"
            (*baroGetFuncPtr)(struct baroDev_s *baro);
typedef void (*baroCalculateFuncPtr)(int32_t *pressure, int32_t *temperature);


typedef struct baroDev_s {
    busDevice_t busdev;

    extiCallbackRec_t exti;

    
# 38 "./src/main/drivers/barometer/barometer.h" 3 4
   _Bool 
# 38 "./src/main/drivers/barometer/barometer.h"
        combined_read;
    uint16_t ut_delay;
    uint16_t up_delay;
    baroOpFuncPtr start_ut;
    baroGetFuncPtr read_ut;
    baroGetFuncPtr get_ut;
    baroOpFuncPtr start_up;
    baroGetFuncPtr read_up;
    baroGetFuncPtr get_up;
    baroCalculateFuncPtr calculate;
} baroDev_t;
# 25 "./src/main/sensors/barometer.h" 2

typedef enum {
    BARO_DEFAULT = 0,
    BARO_NONE = 1,
    BARO_BMP085 = 2,
    BARO_MS5611 = 3,
    BARO_BMP280 = 4,
    BARO_LPS = 5,
    BARO_QMP6988 = 6,
    BARO_BMP388 = 7,
    BARO_DPS310 = 8,
} baroSensor_e;



typedef struct barometerConfig_s {
    uint8_t baro_bustype;
    uint8_t baro_spi_device;
    ioTag_t baro_spi_csn;
    uint8_t baro_i2c_device;
    uint8_t baro_i2c_address;
    uint8_t baro_hardware;
    uint8_t baro_sample_count;
    uint16_t baro_noise_lpf;
    uint16_t baro_cf_vel;
    ioTag_t baro_eoc_tag;
    ioTag_t baro_xclr_tag;
} barometerConfig_t;

extern barometerConfig_t barometerConfig_System; extern barometerConfig_t barometerConfig_Copy; static inline const barometerConfig_t* barometerConfig(void) { return &barometerConfig_System; } static inline barometerConfig_t* barometerConfigMutable(void) { return &barometerConfig_System; } struct _dummy;

typedef struct baro_s {
    baroDev_t dev;
    int32_t BaroAlt;
    int32_t baroTemperature;
    int32_t baroPressure;
} baro_t;

extern baro_t baro;

void baroPreInit(void);

# 66 "./src/main/sensors/barometer.h" 3 4
_Bool 
# 66 "./src/main/sensors/barometer.h"
    baroDetect(baroDev_t *dev, baroSensor_e baroHardwareToUse);

# 67 "./src/main/sensors/barometer.h" 3 4
_Bool 
# 67 "./src/main/sensors/barometer.h"
    baroIsCalibrationComplete(void);
void baroStartCalibration(void);
void baroSetGroundLevel(void);
uint32_t baroUpdate(void);

# 71 "./src/main/sensors/barometer.h" 3 4
_Bool 
# 71 "./src/main/sensors/barometer.h"
    isBaroReady(void);
int32_t baroCalculateAltitude(void);
void performBaroCalibrationCycle(void);
# 68 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/boardalignment.h" 1
# 21 "./src/main/sensors/boardalignment.h"
       






typedef struct boardAlignment_s {
    int32_t rollDegrees;
    int32_t pitchDegrees;
    int32_t yawDegrees;
} boardAlignment_t;

extern boardAlignment_t boardAlignment_System; extern boardAlignment_t boardAlignment_Copy; static inline const boardAlignment_t* boardAlignment(void) { return &boardAlignment_System; } static inline boardAlignment_t* boardAlignmentMutable(void) { return &boardAlignment_System; } struct _dummy;

void alignSensorViaMatrix(float *dest, fp_rotationMatrix_t* rotationMatrix);
void alignSensorViaRotation(float *dest, uint8_t rotation);

void initBoardAlignment(const boardAlignment_t *boardAlignment);
# 69 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/sensors/battery.h" 1
# 21 "./src/main/sensors/battery.h"
       





# 1 "./src/main/sensors/current.h" 1
# 21 "./src/main/sensors/current.h"
       


# 1 "./src/main/sensors/current_ids.h" 1
# 21 "./src/main/sensors/current_ids.h"
       





typedef enum {
    CURRENT_METER_ID_NONE = 0,

    CURRENT_METER_ID_BATTERY_1 = 10,
    CURRENT_METER_ID_BATTERY_2,

    CURRENT_METER_ID_BATTERY_10 = 19,

    CURRENT_METER_ID_5V_1 = 20,
    CURRENT_METER_ID_5V_2,

    CURRENT_METER_ID_5V_10 = 29,

    CURRENT_METER_ID_9V_1 = 30,
    CURRENT_METER_ID_9V_2,

    CURRENT_METER_ID_9V_10 = 39,

    CURRENT_METER_ID_12V_1 = 40,
    CURRENT_METER_ID_12V_2,

    CURRENT_METER_ID_12V_10 = 49,

    CURRENT_METER_ID_ESC_COMBINED_1 = 50,

    CURRENT_METER_ID_ESC_COMBINED_10 = 59,

    CURRENT_METER_ID_ESC_MOTOR_1 = 60,
    CURRENT_METER_ID_ESC_MOTOR_2,
    CURRENT_METER_ID_ESC_MOTOR_3,
    CURRENT_METER_ID_ESC_MOTOR_4,
    CURRENT_METER_ID_ESC_MOTOR_5,
    CURRENT_METER_ID_ESC_MOTOR_6,
    CURRENT_METER_ID_ESC_MOTOR_7,
    CURRENT_METER_ID_ESC_MOTOR_8,
    CURRENT_METER_ID_ESC_MOTOR_9,
    CURRENT_METER_ID_ESC_MOTOR_10,
    CURRENT_METER_ID_ESC_MOTOR_11,
    CURRENT_METER_ID_ESC_MOTOR_12,

    CURRENT_METER_ID_ESC_MOTOR_20 = 79,

    CURRENT_METER_ID_VIRTUAL_1 = 80,
    CURRENT_METER_ID_VIRTUAL_2,

    CURRENT_METER_ID_MSP_1 = 90,
    CURRENT_METER_ID_MSP_2,

} currentMeterId_e;
# 25 "./src/main/sensors/current.h" 2

typedef enum {
    CURRENT_METER_NONE = 0,
    CURRENT_METER_ADC,
    CURRENT_METER_VIRTUAL,
    CURRENT_METER_ESC,
    CURRENT_METER_MSP,
    CURRENT_METER_COUNT
} currentMeterSource_e;

extern const char * const currentMeterSourceNames[CURRENT_METER_COUNT];

typedef struct currentMeter_s {
    int32_t amperage;
    int32_t amperageLatest;
    int32_t mAhDrawn;
} currentMeter_t;



typedef struct currentMeterMAhDrawnState_s {
    int32_t mAhDrawn;
    float mAhDrawnF;
} currentMeterMAhDrawnState_t;





typedef enum {
    CURRENT_SENSOR_VIRTUAL = 0,
    CURRENT_SENSOR_ADC,
    CURRENT_SENSOR_ESC,
    CURRENT_SENSOR_MSP
} currentSensor_e;






typedef struct currentMeterADCState_s {
    currentMeterMAhDrawnState_t mahDrawnState;
    int32_t amperage;
    int32_t amperageLatest;
} currentMeterADCState_t;

typedef struct currentSensorADCConfig_s {
    int16_t scale;
    int16_t offset;
} currentSensorADCConfig_t;

extern currentSensorADCConfig_t currentSensorADCConfig_System; extern currentSensorADCConfig_t currentSensorADCConfig_Copy; static inline const currentSensorADCConfig_t* currentSensorADCConfig(void) { return &currentSensorADCConfig_System; } static inline currentSensorADCConfig_t* currentSensorADCConfigMutable(void) { return &currentSensorADCConfig_System; } struct _dummy;





typedef struct currentMeterVirtualState_s {
    currentMeterMAhDrawnState_t mahDrawnState;
    int32_t amperage;
} currentSensorVirtualState_t;

typedef struct currentSensorVirtualConfig_s {
    int16_t scale;
    uint16_t offset;
} currentSensorVirtualConfig_t;

extern currentSensorVirtualConfig_t currentSensorVirtualConfig_System; extern currentSensorVirtualConfig_t currentSensorVirtualConfig_Copy; static inline const currentSensorVirtualConfig_t* currentSensorVirtualConfig(void) { return &currentSensorVirtualConfig_System; } static inline currentSensorVirtualConfig_t* currentSensorVirtualConfigMutable(void) { return &currentSensorVirtualConfig_System; } struct _dummy;





typedef struct currentMeterESCState_s {
    int32_t mAhDrawn;
    int32_t amperage;
} currentMeterESCState_t;






typedef struct currentMeterMSPState_s {
    int32_t mAhDrawn;
    int32_t amperage;
} currentMeterMSPState_t;






void currentMeterReset(currentMeter_t *meter);

void currentMeterADCInit(void);
void currentMeterADCRefresh(int32_t lastUpdateAt);
void currentMeterADCRead(currentMeter_t *meter);

void currentMeterVirtualInit(void);
void currentMeterVirtualRefresh(int32_t lastUpdateAt, 
# 126 "./src/main/sensors/current.h" 3 4
                                                     _Bool 
# 126 "./src/main/sensors/current.h"
                                                          armed, 
# 126 "./src/main/sensors/current.h" 3 4
                                                                 _Bool 
# 126 "./src/main/sensors/current.h"
                                                                      throttleLowAndMotorStop, int32_t throttleOffset);
void currentMeterVirtualRead(currentMeter_t *meter);

void currentMeterESCInit(void);
void currentMeterESCRefresh(int32_t lastUpdateAt);
void currentMeterESCReadCombined(currentMeter_t *meter);
void currentMeterESCReadMotor(uint8_t motorNumber, currentMeter_t *meter);

void currentMeterMSPInit(void);
void currentMeterMSPRefresh(timeUs_t currentTimeUs);
void currentMeterMSPRead(currentMeter_t *meter);
void currentMeterMSPSet(uint16_t amperage, uint16_t mAhDrawn);




extern const uint8_t supportedCurrentMeterCount;
extern const uint8_t currentMeterIds[];
void currentMeterRead(currentMeterId_e id, currentMeter_t *currentMeter);
# 28 "./src/main/sensors/battery.h" 2
# 1 "./src/main/sensors/voltage.h" 1
# 21 "./src/main/sensors/voltage.h"
       

# 1 "./src/main/sensors/voltage_ids.h" 1
# 21 "./src/main/sensors/voltage_ids.h"
       





typedef enum {
    VOLTAGE_METER_ID_NONE = 0,

    VOLTAGE_METER_ID_BATTERY_1 = 10,
    VOLTAGE_METER_ID_BATTERY_2,

    VOLTAGE_METER_ID_BATTERY_10 = 19,

    VOLTAGE_METER_ID_5V_1 = 20,
    VOLTAGE_METER_ID_5V_2,

    VOLTAGE_METER_ID_5V_10 = 29,

    VOLTAGE_METER_ID_9V_1 = 30,
    VOLTAGE_METER_ID_9V_2,

    VOLTAGE_METER_ID_9V_10 = 39,

    VOLTAGE_METER_ID_12V_1 = 40,
    VOLTAGE_METER_ID_12V_2,

    VOLTAGE_METER_ID_12V_10 = 49,

    VOLTAGE_METER_ID_ESC_COMBINED_1 = 50,

    VOLTAGE_METER_ID_ESC_COMBINED_10 = 59,

    VOLTAGE_METER_ID_ESC_MOTOR_1 = 60,
    VOLTAGE_METER_ID_ESC_MOTOR_2,
    VOLTAGE_METER_ID_ESC_MOTOR_3,
    VOLTAGE_METER_ID_ESC_MOTOR_4,
    VOLTAGE_METER_ID_ESC_MOTOR_5,
    VOLTAGE_METER_ID_ESC_MOTOR_6,
    VOLTAGE_METER_ID_ESC_MOTOR_7,
    VOLTAGE_METER_ID_ESC_MOTOR_8,
    VOLTAGE_METER_ID_ESC_MOTOR_9,
    VOLTAGE_METER_ID_ESC_MOTOR_10,
    VOLTAGE_METER_ID_ESC_MOTOR_11,
    VOLTAGE_METER_ID_ESC_MOTOR_12,

    VOLTAGE_METER_ID_ESC_MOTOR_20 = 79,

    VOLTAGE_METER_ID_CELL_1 = 80,
    VOLTAGE_METER_ID_CELL_2,

    VOLTAGE_METER_ID_CELL_40 = 119,

} voltageMeterId_e;
# 24 "./src/main/sensors/voltage.h" 2
# 32 "./src/main/sensors/voltage.h"
typedef enum {
    VOLTAGE_METER_NONE = 0,
    VOLTAGE_METER_ADC,
    VOLTAGE_METER_ESC,
    VOLTAGE_METER_COUNT
} voltageMeterSource_e;

extern const char * const voltageMeterSourceNames[VOLTAGE_METER_COUNT];



typedef struct voltageMeter_s {
    uint16_t displayFiltered;
    uint16_t unfiltered;



    
# 49 "./src/main/sensors/voltage.h" 3 4
   _Bool 
# 49 "./src/main/sensors/voltage.h"
        lowVoltageCutoff;
} voltageMeter_t;






typedef enum {
    VOLTAGE_SENSOR_TYPE_ADC_RESISTOR_DIVIDER = 0,
    VOLTAGE_SENSOR_TYPE_ESC
} voltageSensorType_e;
# 82 "./src/main/sensors/voltage.h"
typedef enum {
    VOLTAGE_SENSOR_ADC_VBAT = 0,
    VOLTAGE_SENSOR_ADC_12V = 1,
    VOLTAGE_SENSOR_ADC_9V = 2,
    VOLTAGE_SENSOR_ADC_5V = 3
} voltageSensorADC_e;


typedef struct voltageSensorADCConfig_s {
    uint8_t vbatscale;
    uint8_t vbatresdivval;
    uint8_t vbatresdivmultiplier;
} voltageSensorADCConfig_t;

extern voltageSensorADCConfig_t voltageSensorADCConfig_SystemArray[1]; extern voltageSensorADCConfig_t voltageSensorADCConfig_CopyArray[1]; static inline const voltageSensorADCConfig_t* voltageSensorADCConfig(int _index) { return &voltageSensorADCConfig_SystemArray[_index]; } static inline voltageSensorADCConfig_t* voltageSensorADCConfigMutable(int _index) { return &voltageSensorADCConfig_SystemArray[_index]; } static inline voltageSensorADCConfig_t (* voltageSensorADCConfig_array(void))[1] { return &voltageSensorADCConfig_SystemArray; } struct _dummy;




void voltageMeterReset(voltageMeter_t *voltageMeter);

void voltageMeterGenericInit(void);

void voltageMeterADCInit(void);
void voltageMeterADCRefresh(void);
void voltageMeterADCRead(voltageSensorADC_e adcChannel, voltageMeter_t *voltageMeter);

void voltageMeterESCInit(void);
void voltageMeterESCRefresh(void);
void voltageMeterESCReadCombined(voltageMeter_t *voltageMeter);
void voltageMeterESCReadMotor(uint8_t motor, voltageMeter_t *voltageMeter);





extern const uint8_t voltageMeterADCtoIDMap[1];

extern const uint8_t supportedVoltageMeterCount;
extern const uint8_t voltageMeterIds[];
void voltageMeterRead(voltageMeterId_e id, voltageMeter_t *voltageMeter);


# 124 "./src/main/sensors/voltage.h" 3 4
_Bool 
# 124 "./src/main/sensors/voltage.h"
    isSagCompensationConfigured(void);
# 29 "./src/main/sensors/battery.h" 2
# 42 "./src/main/sensors/battery.h"
enum {
    AUTO_PROFILE_CELL_COUNT_STAY = 0,
    AUTO_PROFILE_CELL_COUNT_CHANGE = -1,
};

typedef struct batteryConfig_s {

    uint16_t vbatmaxcellvoltage;
    uint16_t vbatmincellvoltage;
    uint16_t vbatwarningcellvoltage;
    uint16_t vbatnotpresentcellvoltage;
    uint8_t lvcPercentage;
    voltageMeterSource_e voltageMeterSource;


    currentMeterSource_e currentMeterSource;
    uint16_t batteryCapacity;


    
# 61 "./src/main/sensors/battery.h" 3 4
   _Bool 
# 61 "./src/main/sensors/battery.h"
        useVBatAlerts;
    
# 62 "./src/main/sensors/battery.h" 3 4
   _Bool 
# 62 "./src/main/sensors/battery.h"
        useConsumptionAlerts;
    uint8_t consumptionWarningPercentage;
    uint8_t vbathysteresis;

    uint16_t vbatfullcellvoltage;

    uint8_t forceBatteryCellCount;
    uint8_t vbatDisplayLpfPeriod;
    uint8_t ibatLpfPeriod;
    uint8_t vbatDurationForWarning;
    uint8_t vbatDurationForCritical;
    uint8_t vbatSagLpfPeriod;
} batteryConfig_t;

extern batteryConfig_t batteryConfig_System; extern batteryConfig_t batteryConfig_Copy; static inline const batteryConfig_t* batteryConfig(void) { return &batteryConfig_System; } static inline batteryConfig_t* batteryConfigMutable(void) { return &batteryConfig_System; } struct _dummy;

typedef struct lowVoltageCutoff_s {
    
# 79 "./src/main/sensors/battery.h" 3 4
   _Bool 
# 79 "./src/main/sensors/battery.h"
        enabled;
    uint8_t percentage;
    timeUs_t startTime;
} lowVoltageCutoff_t;

typedef enum {
    BATTERY_OK = 0,
    BATTERY_WARNING,
    BATTERY_CRITICAL,
    BATTERY_NOT_PRESENT,
    BATTERY_INIT
} batteryState_e;

void batteryInit(void);
void batteryUpdateVoltage(timeUs_t currentTimeUs);
void batteryUpdatePresence(void);

batteryState_e getBatteryState(void);
batteryState_e getVoltageState(void);
batteryState_e getConsumptionState(void);
const char * getBatteryStateString(void);

void batteryUpdateStates(timeUs_t currentTimeUs);
void batteryUpdateAlarms(void);

struct rxConfig_s;

uint8_t calculateBatteryPercentageRemaining(void);

# 107 "./src/main/sensors/battery.h" 3 4
_Bool 
# 107 "./src/main/sensors/battery.h"
    isBatteryVoltageConfigured(void);
uint16_t getBatteryVoltage(void);
uint16_t getLegacyBatteryVoltage(void);
uint16_t getBatteryVoltageLatest(void);
uint8_t getBatteryCellCount(void);
uint16_t getBatteryAverageCellVoltage(void);
uint16_t getBatterySagCellVoltage(void);


# 115 "./src/main/sensors/battery.h" 3 4
_Bool 
# 115 "./src/main/sensors/battery.h"
    isAmperageConfigured(void);
int32_t getAmperage(void);
int32_t getAmperageLatest(void);
int32_t getMAhDrawn(void);

void batteryUpdateCurrentMeter(timeUs_t currentTimeUs);

const lowVoltageCutoff_t *getLowVoltageCutoff(void);
# 70 "./src/main/telemetry/mavlink.c" 2

# 1 "./src/main/telemetry/telemetry.h" 1
# 28 "./src/main/telemetry/telemetry.h"
       

# 1 "./src/main/common/unit.h" 1
# 21 "./src/main/common/unit.h"
       

typedef enum {
    UNIT_IMPERIAL = 0,
    UNIT_METRIC,
    UNIT_BRITISH
} unit_e;
# 31 "./src/main/telemetry/telemetry.h" 2







# 1 "./src/main/telemetry/ibus_shared.h" 1
# 29 "./src/main/telemetry/ibus_shared.h"
       







typedef enum {
    IBUS_SENSOR_TYPE_NONE = 0x00,
    IBUS_SENSOR_TYPE_TEMPERATURE = 0x01,
    IBUS_SENSOR_TYPE_RPM_FLYSKY = 0x02,
    IBUS_SENSOR_TYPE_EXTERNAL_VOLTAGE = 0x03,
    IBUS_SENSOR_TYPE_CELL = 0x04,
    IBUS_SENSOR_TYPE_BAT_CURR = 0x05,
    IBUS_SENSOR_TYPE_FUEL = 0x06,
    IBUS_SENSOR_TYPE_RPM = 0x07,
    IBUS_SENSOR_TYPE_CMP_HEAD = 0x08,
    IBUS_SENSOR_TYPE_CLIMB_RATE = 0x09,
    IBUS_SENSOR_TYPE_COG = 0x0a,
    IBUS_SENSOR_TYPE_GPS_STATUS = 0x0b,
    IBUS_SENSOR_TYPE_ACC_X = 0x0c,
    IBUS_SENSOR_TYPE_ACC_Y = 0x0d,
    IBUS_SENSOR_TYPE_ACC_Z = 0x0e,
    IBUS_SENSOR_TYPE_ROLL = 0x0f,
    IBUS_SENSOR_TYPE_PITCH = 0x10,
    IBUS_SENSOR_TYPE_YAW = 0x11,
    IBUS_SENSOR_TYPE_VERTICAL_SPEED = 0x12,
    IBUS_SENSOR_TYPE_GROUND_SPEED = 0x13,
    IBUS_SENSOR_TYPE_GPS_DIST = 0x14,
    IBUS_SENSOR_TYPE_ARMED = 0x15,
    IBUS_SENSOR_TYPE_FLIGHT_MODE = 0x16,
    IBUS_SENSOR_TYPE_PRES = 0x41,
    IBUS_SENSOR_TYPE_ODO1 = 0x7c,
    IBUS_SENSOR_TYPE_ODO2 = 0x7d,
    IBUS_SENSOR_TYPE_SPE = 0x7e,

    IBUS_SENSOR_TYPE_GPS_LAT = 0x80,
    IBUS_SENSOR_TYPE_GPS_LON = 0x81,
    IBUS_SENSOR_TYPE_GPS_ALT = 0x82,
    IBUS_SENSOR_TYPE_ALT = 0x83,
    IBUS_SENSOR_TYPE_ALT_MAX = 0x84,

    IBUS_SENSOR_TYPE_ALT_FLYSKY = 0xf9,

    IBUS_SENSOR_TYPE_GPS_FULL = 0xfd,
    IBUS_SENSOR_TYPE_VOLT_FULL = 0xf0,
    IBUS_SENSOR_TYPE_ACC_FULL = 0xef,

    IBUS_SENSOR_TYPE_UNKNOWN = 0xff
} ibusSensorType_e;



uint8_t respondToIbusRequest(uint8_t const * const ibusPacket);
void initSharedIbusTelemetry(serialPort_t * port);





# 89 "./src/main/telemetry/ibus_shared.h" 3 4
_Bool 
# 89 "./src/main/telemetry/ibus_shared.h"
    isChecksumOkIa6b(const uint8_t *ibusPacket, const uint8_t length);
# 39 "./src/main/telemetry/telemetry.h" 2

typedef enum {
    FRSKY_FORMAT_DMS = 0,
    FRSKY_FORMAT_NMEA
} frskyGpsCoordFormat_e;

typedef enum {
    SENSOR_VOLTAGE = 1 << 0,
    SENSOR_CURRENT = 1 << 1,
    SENSOR_FUEL = 1 << 2,
    SENSOR_MODE = 1 << 3,
    SENSOR_ACC_X = 1 << 4,
    SENSOR_ACC_Y = 1 << 5,
    SENSOR_ACC_Z = 1 << 6,
    SENSOR_PITCH = 1 << 7,
    SENSOR_ROLL = 1 << 8,
    SENSOR_HEADING = 1 << 9,
    SENSOR_ALTITUDE = 1 << 10,
    SENSOR_VARIO = 1 << 11,
    SENSOR_LAT_LONG = 1 << 12,
    SENSOR_GROUND_SPEED = 1 << 13,
    SENSOR_DISTANCE = 1 << 14,
    ESC_SENSOR_CURRENT = 1 << 15,
    ESC_SENSOR_VOLTAGE = 1 << 16,
    ESC_SENSOR_RPM = 1 << 17,
    ESC_SENSOR_TEMPERATURE = 1 << 18,
    ESC_SENSOR_ALL = ESC_SENSOR_CURRENT
                            | ESC_SENSOR_VOLTAGE
                            | ESC_SENSOR_RPM
                            | ESC_SENSOR_TEMPERATURE,
    SENSOR_TEMPERATURE = 1 << 19,
    SENSOR_CAP_USED = 1 << 20,
    SENSOR_ALL = (1 << 21) - 1,
} sensor_e;

typedef struct telemetryConfig_s {
    int16_t gpsNoFixLatitude;
    int16_t gpsNoFixLongitude;
    uint8_t telemetry_inverted;
    uint8_t halfDuplex;
    uint8_t frsky_coordinate_format;
    uint8_t frsky_unit;
    uint8_t frsky_vfas_precision;
    uint8_t hottAlarmSoundInterval;
    uint8_t pidValuesAsTelemetry;
    uint8_t report_cell_voltage;
    uint8_t flysky_sensors[15];
    uint16_t mavlink_mah_as_heading_divisor;
    uint32_t disabledSensors;
} telemetryConfig_t;

extern telemetryConfig_t telemetryConfig_System; extern telemetryConfig_t telemetryConfig_Copy; static inline const telemetryConfig_t* telemetryConfig(void) { return &telemetryConfig_System; } static inline telemetryConfig_t* telemetryConfigMutable(void) { return &telemetryConfig_System; } struct _dummy;

extern serialPort_t *telemetrySharedPort;

void telemetryInit(void);

# 95 "./src/main/telemetry/telemetry.h" 3 4
_Bool 
# 95 "./src/main/telemetry/telemetry.h"
    telemetryCheckRxPortShared(const serialPortConfig_t *portConfig, const SerialRXType serialrxProvider);

void telemetryCheckState(void);
void telemetryProcess(uint32_t currentTime);


# 100 "./src/main/telemetry/telemetry.h" 3 4
_Bool 
# 100 "./src/main/telemetry/telemetry.h"
    telemetryDetermineEnabledState(portSharing_e portSharing);


# 102 "./src/main/telemetry/telemetry.h" 3 4
_Bool 
# 102 "./src/main/telemetry/telemetry.h"
    telemetryIsSensorEnabled(sensor_e sensor);
# 72 "./src/main/telemetry/mavlink.c" 2
# 1 "./src/main/telemetry/mavlink.h" 1
# 21 "./src/main/telemetry/mavlink.h"
       

void initMAVLinkTelemetry(void);
void handleMAVLinkTelemetry(void);
void checkMAVLinkTelemetryState(void);

void freeMAVLinkTelemetryPort(void);
void configureMAVLinkTelemetryPort(void);
# 73 "./src/main/telemetry/mavlink.c" 2



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
# 1 "./lib/main/MAVLink/common/mavlink.h" 1
# 24 "./lib/main/MAVLink/common/mavlink.h"
# 1 "./lib/main/MAVLink/common/version.h" 1
# 25 "./lib/main/MAVLink/common/mavlink.h" 2
# 1 "./lib/main/MAVLink/common/common.h" 1
# 30 "./lib/main/MAVLink/common/common.h"
# 1 "./lib/main/MAVLink/common/../protocol.h" 1




# 1 "./lib/main/MAVLink/common/../mavlink_types.h" 1
# 53 "./lib/main/MAVLink/common/../mavlink_types.h"
typedef struct param_union { union { float param_float; int32_t param_int32; uint32_t param_uint32; int16_t param_int16; uint16_t param_uint16; int8_t param_int8; uint8_t param_uint8; uint8_t bytes[4]; }; uint8_t type; } __attribute__((packed))
# 66 "./lib/main/MAVLink/common/../mavlink_types.h"
   mavlink_param_union_t;
# 82 "./lib/main/MAVLink/common/../mavlink_types.h"
typedef struct param_union_extended { union { struct { uint8_t is_double:1; uint8_t mavlink_type:7; union { char c; uint8_t uint8; int8_t int8; uint16_t uint16; int16_t int16; uint32_t uint32; int32_t int32; float f; uint8_t align[7]; }; }; uint8_t data[8]; }; } __attribute__((packed))
# 102 "./lib/main/MAVLink/common/../mavlink_types.h"
   mavlink_param_union_double_t;





typedef struct __mavlink_system { uint8_t sysid; uint8_t compid; } __attribute__((packed))



   mavlink_system_t;

typedef struct __mavlink_message { uint16_t checksum; uint8_t magic; uint8_t len; uint8_t seq; uint8_t sysid; uint8_t compid; uint8_t msgid; uint64_t payload64[(255 +2 +7)/8]; } __attribute__((packed))
# 124 "./lib/main/MAVLink/common/../mavlink_types.h"
   mavlink_message_t;

typedef struct __mavlink_extended_message { mavlink_message_t base_msg; int32_t extended_payload_len; uint8_t extended_payload[(2048 - 14 - ((5 + 1) + 2))]; } __attribute__((packed))




   mavlink_extended_message_t;

typedef enum {
 MAVLINK_TYPE_CHAR = 0,
 MAVLINK_TYPE_UINT8_T = 1,
 MAVLINK_TYPE_INT8_T = 2,
 MAVLINK_TYPE_UINT16_T = 3,
 MAVLINK_TYPE_INT16_T = 4,
 MAVLINK_TYPE_UINT32_T = 5,
 MAVLINK_TYPE_INT32_T = 6,
 MAVLINK_TYPE_UINT64_T = 7,
 MAVLINK_TYPE_INT64_T = 8,
 MAVLINK_TYPE_FLOAT = 9,
 MAVLINK_TYPE_DOUBLE = 10
} mavlink_message_type_t;



typedef struct __mavlink_field_info {
        const char *name;
        const char *print_format;
        mavlink_message_type_t type;
        unsigned int array_length;
        unsigned int wire_offset;
        unsigned int structure_offset;
} mavlink_field_info_t;



typedef struct __mavlink_message_info {
 const char *name;
 unsigned num_fields;
 mavlink_field_info_t fields[64];
} mavlink_message_info_t;
# 173 "./lib/main/MAVLink/common/../mavlink_types.h"
typedef enum {
    MAVLINK_COMM_0,
    MAVLINK_COMM_1,
    MAVLINK_COMM_2,
    MAVLINK_COMM_3
} mavlink_channel_t;
# 193 "./lib/main/MAVLink/common/../mavlink_types.h"
typedef enum {
    MAVLINK_PARSE_STATE_UNINIT=0,
    MAVLINK_PARSE_STATE_IDLE,
    MAVLINK_PARSE_STATE_GOT_STX,
    MAVLINK_PARSE_STATE_GOT_SEQ,
    MAVLINK_PARSE_STATE_GOT_LENGTH,
    MAVLINK_PARSE_STATE_GOT_SYSID,
    MAVLINK_PARSE_STATE_GOT_COMPID,
    MAVLINK_PARSE_STATE_GOT_MSGID,
    MAVLINK_PARSE_STATE_GOT_PAYLOAD,
    MAVLINK_PARSE_STATE_GOT_CRC1
} mavlink_parse_state_t;

typedef struct __mavlink_status {
    uint8_t msg_received;
    uint8_t buffer_overrun;
    uint8_t parse_error;
    mavlink_parse_state_t parse_state;
    uint8_t packet_idx;
    uint8_t current_rx_seq;
    uint8_t current_tx_seq;
    uint16_t packet_rx_success_count;
    uint16_t packet_rx_drop_count;
} mavlink_status_t;
# 6 "./lib/main/MAVLink/common/../protocol.h" 2
# 79 "./lib/main/MAVLink/common/../protocol.h"
# 1 "./lib/main/MAVLink/common/../mavlink_helpers.h" 1




# 1 "./lib/main/MAVLink/common/../checksum.h" 1
# 34 "./lib/main/MAVLink/common/../checksum.h"
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{

        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
        tmp ^= (tmp<<4);
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
}
# 51 "./lib/main/MAVLink/common/../checksum.h"
static inline void crc_init(uint16_t* crcAccum)
{
        *crcAccum = 0xffff;
}
# 64 "./lib/main/MAVLink/common/../checksum.h"
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
 while (length--) {
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
}
# 84 "./lib/main/MAVLink/common/../checksum.h"
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 const uint8_t *p = (const uint8_t *)pBuffer;
 while (length--) {
                crc_accumulate(*p++, crcAccum);
        }
}
# 6 "./lib/main/MAVLink/common/../mavlink_helpers.h" 2

# 1 "./lib/main/MAVLink/common/../mavlink_conversions.h" 1
# 38 "./lib/main/MAVLink/common/../mavlink_conversions.h"
static inline void mavlink_quaternion_to_dcm(const float quaternion[4], float dcm[3][3])
{
    double a = quaternion[0];
    double b = quaternion[1];
    double c = quaternion[2];
    double d = quaternion[3];
    double aSq = a * a;
    double bSq = b * b;
    double cSq = c * c;
    double dSq = d * d;
    dcm[0][0] = aSq + bSq - cSq - dSq;
    dcm[0][1] = 2 * (b * c - a * d);
    dcm[0][2] = 2 * (a * c + b * d);
    dcm[1][0] = 2 * (b * c + a * d);
    dcm[1][1] = aSq - bSq + cSq - dSq;
    dcm[1][2] = 2 * (c * d - a * b);
    dcm[2][0] = 2 * (b * d - a * c);
    dcm[2][1] = 2 * (a * b + c * d);
    dcm[2][2] = aSq - bSq - cSq + dSq;
}
# 68 "./lib/main/MAVLink/common/../mavlink_conversions.h"
static inline void mavlink_dcm_to_euler(const float dcm[3][3], float* roll, float* pitch, float* yaw)
{
    float phi, theta, psi;
    theta = asin(-dcm[2][0]);

    if (fabsf(theta - (float)
# 73 "./lib/main/MAVLink/common/../mavlink_conversions.h" 3
                            1.57079632679489661923
# 73 "./lib/main/MAVLink/common/../mavlink_conversions.h"
                                  ) < 1.0e-3f) {
        phi = 0.0f;
        psi = (atan2f(dcm[1][2] - dcm[0][1],
                dcm[0][2] + dcm[1][1]) + phi);

    } else if (fabsf(theta + (float)
# 78 "./lib/main/MAVLink/common/../mavlink_conversions.h" 3
                                   1.57079632679489661923
# 78 "./lib/main/MAVLink/common/../mavlink_conversions.h"
                                         ) < 1.0e-3f) {
        phi = 0.0f;
        psi = atan2f(dcm[1][2] - dcm[0][1],
                  dcm[0][2] + dcm[1][1] - phi);

    } else {
        phi = atan2f(dcm[2][1], dcm[2][2]);
        psi = atan2f(dcm[1][0], dcm[0][0]);
    }

    *roll = phi;
    *pitch = theta;
    *yaw = psi;
}
# 102 "./lib/main/MAVLink/common/../mavlink_conversions.h"
static inline void mavlink_quaternion_to_euler(const float quaternion[4], float* roll, float* pitch, float* yaw)
{
    float dcm[3][3];
    mavlink_quaternion_to_dcm(quaternion, dcm);
    mavlink_dcm_to_euler((const float(*)[3])dcm, roll, pitch, yaw);
}
# 118 "./lib/main/MAVLink/common/../mavlink_conversions.h"
static inline void mavlink_euler_to_quaternion(float roll, float pitch, float yaw, float quaternion[4])
{
    float cosPhi_2 = cos_approx(roll / 2);
    float sinPhi_2 = sin_approx(roll / 2);
    float cosTheta_2 = cos_approx(pitch / 2);
    float sinTheta_2 = sin_approx(pitch / 2);
    float cosPsi_2 = cos_approx(yaw / 2);
    float sinPsi_2 = sin_approx(yaw / 2);
    quaternion[0] = (cosPhi_2 * cosTheta_2 * cosPsi_2 +
            sinPhi_2 * sinTheta_2 * sinPsi_2);
    quaternion[1] = (sinPhi_2 * cosTheta_2 * cosPsi_2 -
            cosPhi_2 * sinTheta_2 * sinPsi_2);
    quaternion[2] = (cosPhi_2 * sinTheta_2 * cosPsi_2 +
            sinPhi_2 * cosTheta_2 * sinPsi_2);
    quaternion[3] = (cosPhi_2 * cosTheta_2 * sinPsi_2 -
            sinPhi_2 * sinTheta_2 * cosPsi_2);
}
# 146 "./lib/main/MAVLink/common/../mavlink_conversions.h"
static inline void mavlink_dcm_to_quaternion(const float dcm[3][3], float quaternion[4])
{
    float tr = dcm[0][0] + dcm[1][1] + dcm[2][2];
    if (tr > 0.0f) {
        float s = sqrtf(tr + 1.0f);
        quaternion[0] = s * 0.5f;
        s = 0.5f / s;
        quaternion[1] = (dcm[2][1] - dcm[1][2]) * s;
        quaternion[2] = (dcm[0][2] - dcm[2][0]) * s;
        quaternion[3] = (dcm[1][0] - dcm[0][1]) * s;
    } else {


        int dcm_i = 0;
        int i;
        for (i = 1; i < 3; i++) {
            if (dcm[i][i] > dcm[dcm_i][dcm_i]) {
                dcm_i = i;
            }
        }

        int dcm_j = (dcm_i + 1) % 3;
        int dcm_k = (dcm_i + 2) % 3;

        float s = sqrtf((dcm[dcm_i][dcm_i] - dcm[dcm_j][dcm_j] -
                    dcm[dcm_k][dcm_k]) + 1.0f);
        quaternion[dcm_i + 1] = s * 0.5f;
        s = 0.5f / s;
        quaternion[dcm_j + 1] = (dcm[dcm_i][dcm_j] + dcm[dcm_j][dcm_i]) * s;
        quaternion[dcm_k + 1] = (dcm[dcm_k][dcm_i] + dcm[dcm_i][dcm_k]) * s;
        quaternion[0] = (dcm[dcm_k][dcm_j] - dcm[dcm_j][dcm_k]) * s;
    }
}
# 189 "./lib/main/MAVLink/common/../mavlink_conversions.h"
static inline void mavlink_euler_to_dcm(float roll, float pitch, float yaw, float dcm[3][3])
{
    float cosPhi = cos_approx(roll);
    float sinPhi = sin_approx(roll);
    float cosThe = cos_approx(pitch);
    float sinThe = sin_approx(pitch);
    float cosPsi = cos_approx(yaw);
    float sinPsi = sin_approx(yaw);

    dcm[0][0] = cosThe * cosPsi;
    dcm[0][1] = -cosPhi * sinPsi + sinPhi * sinThe * cosPsi;
    dcm[0][2] = sinPhi * sinPsi + cosPhi * sinThe * cosPsi;

    dcm[1][0] = cosThe * sinPsi;
    dcm[1][1] = cosPhi * cosPsi + sinPhi * sinThe * sinPsi;
    dcm[1][2] = -sinPhi * cosPsi + cosPhi * sinThe * sinPsi;

    dcm[2][0] = -sinThe;
    dcm[2][1] = sinPhi * cosThe;
    dcm[2][2] = cosPhi * cosThe;
}
# 8 "./lib/main/MAVLink/common/../mavlink_helpers.h" 2
# 17 "./lib/main/MAVLink/common/../mavlink_helpers.h"
static inline mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{




 static mavlink_status_t m_mavlink_status[4];

 return &m_mavlink_status[chan];
}






static inline mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{





 static mavlink_message_t m_mavlink_buffer[4];

 return &m_mavlink_buffer[chan];
}





static inline void mavlink_reset_channel_status(uint8_t chan)
{
 mavlink_status_t *status = mavlink_get_channel_status(chan);
 status->parse_state = MAVLINK_PARSE_STATE_IDLE;
}
# 68 "./lib/main/MAVLink/common/../mavlink_helpers.h"
static inline uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
            uint8_t chan, uint8_t length, uint8_t crc_extra)




{

 msg->magic = 254;
 msg->len = length;
 msg->sysid = system_id;
 msg->compid = component_id;

 msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, 5);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Waddress-of-packed-member"
 crc_accumulate_buffer(&msg->checksum, ((const char *)(&((msg)->payload64[0]))), msg->len);
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Waddress-of-packed-member"
 crc_accumulate(crc_extra, &msg->checksum);
#pragma GCC diagnostic pop

 *((msg)->len + (uint8_t *)((char *)(&((msg)->payload64[0])))) = (uint8_t)(msg->checksum & 0xFF);
 *(((msg)->len+(uint16_t)1) + (uint8_t *)((char *)(&((msg)->payload64[0])))) = (uint8_t)(msg->checksum >> 8);

 return length + ((5 + 1) + 2);
}






static inline uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
       uint8_t length, uint8_t crc_extra)
{
 return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
}
# 183 "./lib/main/MAVLink/common/../mavlink_helpers.h"
static inline uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 memcpy(buffer, (const uint8_t *)&msg->magic, (5 + 1) + (uint16_t)msg->len);

 uint8_t *ck = buffer + ((5 + 1) + (uint16_t)msg->len);

 ck[0] = (uint8_t)(msg->checksum & 0xFF);
 ck[1] = (uint8_t)(msg->checksum >> 8);

 return ((5 + 1) + 2) + (uint16_t)msg->len;
}

union __mavlink_bitfield {
 uint8_t uint8;
 int8_t int8;
 uint16_t uint16;
 int16_t int16;
 uint32_t uint32;
 int32_t int32;
};


static inline void mavlink_start_checksum(mavlink_message_t* msg)
{

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Waddress-of-packed-member"
 crc_init(&msg->checksum);
#pragma GCC diagnostic pop
}

static inline void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Waddress-of-packed-member"
 crc_accumulate(c, &msg->checksum);
#pragma GCC diagnostic pop
}
# 264 "./lib/main/MAVLink/common/../mavlink_helpers.h"
static inline uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{






 static const uint8_t mavlink_message_crcs[256] = {50, 124, 137, 0, 237, 217, 104, 119, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 214, 159, 220, 168, 24, 23, 170, 144, 67, 115, 39, 246, 185, 104, 237, 244, 222, 212, 9, 254, 230, 28, 28, 132, 221, 232, 11, 153, 41, 39, 78, 0, 0, 0, 15, 3, 0, 0, 0, 0, 0, 153, 183, 51, 59, 118, 148, 21, 0, 243, 124, 0, 0, 38, 20, 158, 152, 143, 0, 0, 0, 106, 49, 22, 143, 140, 5, 150, 0, 231, 183, 63, 54, 0, 0, 0, 0, 0, 0, 0, 175, 102, 158, 208, 56, 93, 138, 108, 32, 185, 84, 34, 174, 124, 237, 4, 76, 128, 56, 116, 134, 237, 203, 250, 87, 203, 220, 25, 226, 46, 29, 223, 85, 6, 229, 203, 1, 195, 109, 168, 181, 0, 0, 0, 0, 0, 0, 154, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 204, 49, 170, 44, 83, 46, 0};
# 290 "./lib/main/MAVLink/common/../mavlink_helpers.h"
 mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 mavlink_status_t* status = mavlink_get_channel_status(chan);
 int bufferIndex = 0;

 status->msg_received = 0;

 switch (status->parse_state)
 {
 case MAVLINK_PARSE_STATE_UNINIT:
 case MAVLINK_PARSE_STATE_IDLE:
  if (c == 254)
  {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
   rxmsg->len = 0;
   rxmsg->magic = c;
   mavlink_start_checksum(rxmsg);
  }
  break;

 case MAVLINK_PARSE_STATE_GOT_STX:
   if (status->msg_received





    )
  {
   status->buffer_overrun++;
   status->parse_error++;
   status->msg_received = 0;
   status->parse_state = MAVLINK_PARSE_STATE_IDLE;
  }
  else
  {

   rxmsg->len = c;
   status->packet_idx = 0;
   mavlink_update_checksum(rxmsg, c);
   status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
  }
  break;

 case MAVLINK_PARSE_STATE_GOT_LENGTH:
  rxmsg->seq = c;
  mavlink_update_checksum(rxmsg, c);
  status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
  break;

 case MAVLINK_PARSE_STATE_GOT_SEQ:
  rxmsg->sysid = c;
  mavlink_update_checksum(rxmsg, c);
  status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
  break;

 case MAVLINK_PARSE_STATE_GOT_SYSID:
  rxmsg->compid = c;
  mavlink_update_checksum(rxmsg, c);
  status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
  break;

 case MAVLINK_PARSE_STATE_GOT_COMPID:
# 360 "./lib/main/MAVLink/common/../mavlink_helpers.h"
  rxmsg->msgid = c;
  mavlink_update_checksum(rxmsg, c);
  if (rxmsg->len == 0)
  {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
  }
  else
  {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
  }
  break;

 case MAVLINK_PARSE_STATE_GOT_MSGID:
  ((char *)(&((rxmsg)->payload64[0])))[status->packet_idx++] = (char)c;
  mavlink_update_checksum(rxmsg, c);
  if (status->packet_idx == rxmsg->len)
  {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
  }
  break;

 case MAVLINK_PARSE_STATE_GOT_PAYLOAD:

  mavlink_update_checksum(rxmsg, mavlink_message_crcs[rxmsg->msgid]);

  if (c != (rxmsg->checksum & 0xFF)) {

   status->parse_error++;
   status->msg_received = 0;
   status->parse_state = MAVLINK_PARSE_STATE_IDLE;
   if (c == 254)
   {
    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
    rxmsg->len = 0;
    mavlink_start_checksum(rxmsg);
   }
  }
  else
  {
   status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
   ((char *)(&((rxmsg)->payload64[0])))[status->packet_idx] = (char)c;
  }
  break;

 case MAVLINK_PARSE_STATE_GOT_CRC1:
  if (c != (rxmsg->checksum >> 8)) {

   status->parse_error++;
   status->msg_received = 0;
   status->parse_state = MAVLINK_PARSE_STATE_IDLE;
   if (c == 254)
   {
    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
    rxmsg->len = 0;
    mavlink_start_checksum(rxmsg);
   }
  }
  else
  {

   status->msg_received = 1;
   status->parse_state = MAVLINK_PARSE_STATE_IDLE;
   ((char *)(&((rxmsg)->payload64[0])))[status->packet_idx+1] = (char)c;
   memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
  }
  break;
 }

 bufferIndex++;

 if (status->msg_received == 1)
 {





  status->current_rx_seq = rxmsg->seq;

  if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;

  status->packet_rx_success_count++;
 }

 r_message->len = rxmsg->len;
 r_mavlink_status->parse_state = status->parse_state;
 r_mavlink_status->packet_idx = status->packet_idx;
 r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 r_mavlink_status->packet_rx_drop_count = status->parse_error;
 status->parse_error = 0;
 return status->msg_received;
}
# 464 "./lib/main/MAVLink/common/../mavlink_helpers.h"
static inline uint8_t put_bitfield_n_by_index(int32_t b, uint8_t bits, uint8_t packet_index, uint8_t bit_index, uint8_t* r_bit_index, uint8_t* buffer)
{
 uint16_t bits_remain = bits;

 int32_t v;
 uint8_t i_bit_index, i_byte_index, curr_bits_n;
# 482 "./lib/main/MAVLink/common/../mavlink_helpers.h"
 v = b;
# 501 "./lib/main/MAVLink/common/../mavlink_helpers.h"
 i_bit_index = bit_index;
 i_byte_index = packet_index;
 if (bit_index > 0)
 {


  i_byte_index--;
 }


 while (bits_remain > 0)
 {







  if (bits_remain <= (uint8_t)(8 - i_bit_index))
  {

   curr_bits_n = (uint8_t)bits_remain;
  }
  else
  {
   curr_bits_n = (8 - i_bit_index);
  }



  buffer[i_byte_index] &= (0xFF >> (8 - curr_bits_n));

  buffer[i_byte_index] |= ((0x00 << curr_bits_n) & v);


  i_bit_index += curr_bits_n;


  bits_remain -= curr_bits_n;
  if (bits_remain > 0)
  {

   i_byte_index++;
   i_bit_index = 0;
  }
 }

 *r_bit_index = i_bit_index;

 if (i_bit_index != 7) i_byte_index++;
 return i_byte_index - packet_index;
}
# 80 "./lib/main/MAVLink/common/../protocol.h" 2






static inline uint16_t mavlink_msg_get_send_buffer_length(const mavlink_message_t* msg)
{
 return msg->len + ((5 + 1) + 2);
}
# 170 "./lib/main/MAVLink/common/../protocol.h"
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
 if (src == 
# 172 "./lib/main/MAVLink/common/../protocol.h" 3 4
           ((void *)0)
# 172 "./lib/main/MAVLink/common/../protocol.h"
               ) {
  memset(dest, 0, n);
 } else {
  memcpy(dest, src, n);
 }
}




static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
 mav_array_memcpy(&buf[wire_offset], b, array_length);

}




static inline void _mav_put_uint8_t_array(char *buf, uint8_t wire_offset, const uint8_t *b, uint8_t array_length)
{
 mav_array_memcpy(&buf[wire_offset], b, array_length);

}




static inline void _mav_put_int8_t_array(char *buf, uint8_t wire_offset, const int8_t *b, uint8_t array_length)
{
 mav_array_memcpy(&buf[wire_offset], b, array_length);

}
# 227 "./lib/main/MAVLink/common/../protocol.h"
static inline void _mav_put_uint16_t_array(char *buf, uint8_t wire_offset, const uint16_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(uint16_t)); }
static inline void _mav_put_uint32_t_array(char *buf, uint8_t wire_offset, const uint32_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(uint32_t)); }
static inline void _mav_put_uint64_t_array(char *buf, uint8_t wire_offset, const uint64_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(uint64_t)); }
static inline void _mav_put_int16_t_array(char *buf, uint8_t wire_offset, const int16_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(int16_t)); }
static inline void _mav_put_int32_t_array(char *buf, uint8_t wire_offset, const int32_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(int32_t)); }
static inline void _mav_put_int64_t_array(char *buf, uint8_t wire_offset, const int64_t *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(int64_t)); }
static inline void _mav_put_float_array(char *buf, uint8_t wire_offset, const float *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(float)); }
static inline void _mav_put_double_array(char *buf, uint8_t wire_offset, const double *b, uint8_t array_length) { mav_array_memcpy(&buf[wire_offset], b, array_length*sizeof(double)); }
# 272 "./lib/main/MAVLink/common/../protocol.h"
static inline uint16_t _MAV_RETURN_uint16_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const uint16_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline int16_t _MAV_RETURN_int16_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const int16_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline uint32_t _MAV_RETURN_uint32_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const uint32_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline int32_t _MAV_RETURN_int32_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const int32_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline uint64_t _MAV_RETURN_uint64_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const uint64_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline int64_t _MAV_RETURN_int64_t(const mavlink_message_t *msg, uint8_t ofs) { return *(const int64_t *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline float _MAV_RETURN_float(const mavlink_message_t *msg, uint8_t ofs) { return *(const float *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}
static inline double _MAV_RETURN_double(const mavlink_message_t *msg, uint8_t ofs) { return *(const double *)(&((const char *)(&((msg)->payload64[0])))[ofs]);}


static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value,
           uint8_t array_length, uint8_t wire_offset)
{
 memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length);
 return array_length;
}

static inline uint16_t _MAV_RETURN_uint8_t_array(const mavlink_message_t *msg, uint8_t *value,
       uint8_t array_length, uint8_t wire_offset)
{
 memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length);
 return array_length;
}

static inline uint16_t _MAV_RETURN_int8_t_array(const mavlink_message_t *msg, int8_t *value,
             uint8_t array_length, uint8_t wire_offset)
{
 memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length);
 return array_length;
}
# 324 "./lib/main/MAVLink/common/../protocol.h"
static inline uint16_t _MAV_RETURN_uint16_t_array(const mavlink_message_t *msg, uint16_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(uint16_t)); return array_length*sizeof(uint16_t); }
static inline uint16_t _MAV_RETURN_uint32_t_array(const mavlink_message_t *msg, uint32_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(uint32_t)); return array_length*sizeof(uint32_t); }
static inline uint16_t _MAV_RETURN_uint64_t_array(const mavlink_message_t *msg, uint64_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(uint64_t)); return array_length*sizeof(uint64_t); }
static inline uint16_t _MAV_RETURN_int16_t_array(const mavlink_message_t *msg, int16_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(int16_t)); return array_length*sizeof(int16_t); }
static inline uint16_t _MAV_RETURN_int32_t_array(const mavlink_message_t *msg, int32_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(int32_t)); return array_length*sizeof(int32_t); }
static inline uint16_t _MAV_RETURN_int64_t_array(const mavlink_message_t *msg, int64_t *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(int64_t)); return array_length*sizeof(int64_t); }
static inline uint16_t _MAV_RETURN_float_array(const mavlink_message_t *msg, float *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(float)); return array_length*sizeof(float); }
static inline uint16_t _MAV_RETURN_double_array(const mavlink_message_t *msg, double *value, uint8_t array_length, uint8_t wire_offset) { memcpy(value, &((const char *)(&((msg)->payload64[0])))[wire_offset], array_length*sizeof(double)); return array_length*sizeof(double); }
# 31 "./lib/main/MAVLink/common/common.h" 2
# 40 "./lib/main/MAVLink/common/common.h"
typedef enum MAV_AUTOPILOT
{
 MAV_AUTOPILOT_GENERIC=0,
 MAV_AUTOPILOT_PIXHAWK=1,
 MAV_AUTOPILOT_SLUGS=2,
 MAV_AUTOPILOT_ARDUPILOTMEGA=3,
 MAV_AUTOPILOT_OPENPILOT=4,
 MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY=5,
 MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY=6,
 MAV_AUTOPILOT_GENERIC_MISSION_FULL=7,
 MAV_AUTOPILOT_INVALID=8,
 MAV_AUTOPILOT_PPZ=9,
 MAV_AUTOPILOT_UDB=10,
 MAV_AUTOPILOT_FP=11,
 MAV_AUTOPILOT_PX4=12,
 MAV_AUTOPILOT_SMACCMPILOT=13,
 MAV_AUTOPILOT_AUTOQUAD=14,
 MAV_AUTOPILOT_ARMAZILA=15,
 MAV_AUTOPILOT_AEROB=16,
 MAV_AUTOPILOT_ASLUAV=17,
 MAV_AUTOPILOT_ENUM_END=18,
} MAV_AUTOPILOT;





typedef enum MAV_TYPE
{
 MAV_TYPE_GENERIC=0,
 MAV_TYPE_FIXED_WING=1,
 MAV_TYPE_QUADROTOR=2,
 MAV_TYPE_COAXIAL=3,
 MAV_TYPE_HELICOPTER=4,
 MAV_TYPE_ANTENNA_TRACKER=5,
 MAV_TYPE_GCS=6,
 MAV_TYPE_AIRSHIP=7,
 MAV_TYPE_FREE_BALLOON=8,
 MAV_TYPE_ROCKET=9,
 MAV_TYPE_GROUND_ROVER=10,
 MAV_TYPE_SURFACE_BOAT=11,
 MAV_TYPE_SUBMARINE=12,
 MAV_TYPE_HEXAROTOR=13,
 MAV_TYPE_OCTOROTOR=14,
 MAV_TYPE_TRICOPTER=15,
 MAV_TYPE_FLAPPING_WING=16,
 MAV_TYPE_KITE=17,
 MAV_TYPE_ONBOARD_CONTROLLER=18,
 MAV_TYPE_VTOL_DUOROTOR=19,
 MAV_TYPE_VTOL_QUADROTOR=20,
 MAV_TYPE_VTOL_RESERVED1=21,
 MAV_TYPE_VTOL_RESERVED2=22,
 MAV_TYPE_VTOL_RESERVED3=23,
 MAV_TYPE_VTOL_RESERVED4=24,
 MAV_TYPE_VTOL_RESERVED5=25,
 MAV_TYPE_GIMBAL=26,
 MAV_TYPE_ENUM_END=27,
} MAV_TYPE;





typedef enum MAV_MODE_FLAG
{
 MAV_MODE_FLAG_CUSTOM_MODE_ENABLED=1,
 MAV_MODE_FLAG_TEST_ENABLED=2,
 MAV_MODE_FLAG_AUTO_ENABLED=4,
 MAV_MODE_FLAG_GUIDED_ENABLED=8,
 MAV_MODE_FLAG_STABILIZE_ENABLED=16,
 MAV_MODE_FLAG_HIL_ENABLED=32,
 MAV_MODE_FLAG_MANUAL_INPUT_ENABLED=64,
 MAV_MODE_FLAG_SAFETY_ARMED=128,
 MAV_MODE_FLAG_ENUM_END=129,
} MAV_MODE_FLAG;





typedef enum MAV_MODE_FLAG_DECODE_POSITION
{
 MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE=1,
 MAV_MODE_FLAG_DECODE_POSITION_TEST=2,
 MAV_MODE_FLAG_DECODE_POSITION_AUTO=4,
 MAV_MODE_FLAG_DECODE_POSITION_GUIDED=8,
 MAV_MODE_FLAG_DECODE_POSITION_STABILIZE=16,
 MAV_MODE_FLAG_DECODE_POSITION_HIL=32,
 MAV_MODE_FLAG_DECODE_POSITION_MANUAL=64,
 MAV_MODE_FLAG_DECODE_POSITION_SAFETY=128,
 MAV_MODE_FLAG_DECODE_POSITION_ENUM_END=129,
} MAV_MODE_FLAG_DECODE_POSITION;





typedef enum MAV_GOTO
{
 MAV_GOTO_DO_HOLD=0,
 MAV_GOTO_DO_CONTINUE=1,
 MAV_GOTO_HOLD_AT_CURRENT_POSITION=2,
 MAV_GOTO_HOLD_AT_SPECIFIED_POSITION=3,
 MAV_GOTO_ENUM_END=4,
} MAV_GOTO;






typedef enum MAV_MODE
{
 MAV_MODE_PREFLIGHT=0,
 MAV_MODE_MANUAL_DISARMED=64,
 MAV_MODE_TEST_DISARMED=66,
 MAV_MODE_STABILIZE_DISARMED=80,
 MAV_MODE_GUIDED_DISARMED=88,
 MAV_MODE_AUTO_DISARMED=92,
 MAV_MODE_MANUAL_ARMED=192,
 MAV_MODE_TEST_ARMED=194,
 MAV_MODE_STABILIZE_ARMED=208,
 MAV_MODE_GUIDED_ARMED=216,
 MAV_MODE_AUTO_ARMED=220,
 MAV_MODE_ENUM_END=221,
} MAV_MODE;





typedef enum MAV_STATE
{
 MAV_STATE_UNINIT=0,
 MAV_STATE_BOOT=1,
 MAV_STATE_CALIBRATING=2,
 MAV_STATE_STANDBY=3,
 MAV_STATE_ACTIVE=4,
 MAV_STATE_CRITICAL=5,
 MAV_STATE_EMERGENCY=6,
 MAV_STATE_POWEROFF=7,
 MAV_STATE_ENUM_END=8,
} MAV_STATE;





typedef enum MAV_COMPONENT
{
 MAV_COMP_ID_ALL=0,
 MAV_COMP_ID_CAMERA=100,
 MAV_COMP_ID_SERVO1=140,
 MAV_COMP_ID_SERVO2=141,
 MAV_COMP_ID_SERVO3=142,
 MAV_COMP_ID_SERVO4=143,
 MAV_COMP_ID_SERVO5=144,
 MAV_COMP_ID_SERVO6=145,
 MAV_COMP_ID_SERVO7=146,
 MAV_COMP_ID_SERVO8=147,
 MAV_COMP_ID_SERVO9=148,
 MAV_COMP_ID_SERVO10=149,
 MAV_COMP_ID_SERVO11=150,
 MAV_COMP_ID_SERVO12=151,
 MAV_COMP_ID_SERVO13=152,
 MAV_COMP_ID_SERVO14=153,
 MAV_COMP_ID_GIMBAL=154,
 MAV_COMP_ID_MAPPER=180,
 MAV_COMP_ID_MISSIONPLANNER=190,
 MAV_COMP_ID_PATHPLANNER=195,
 MAV_COMP_ID_IMU=200,
 MAV_COMP_ID_IMU_2=201,
 MAV_COMP_ID_IMU_3=202,
 MAV_COMP_ID_GPS=220,
 MAV_COMP_ID_UDP_BRIDGE=240,
 MAV_COMP_ID_UART_BRIDGE=241,
 MAV_COMP_ID_SYSTEM_CONTROL=250,
 MAV_COMPONENT_ENUM_END=251,
} MAV_COMPONENT;





typedef enum MAV_SYS_STATUS_SENSOR
{
 MAV_SYS_STATUS_SENSOR_3D_GYRO=1,
 MAV_SYS_STATUS_SENSOR_3D_ACCEL=2,
 MAV_SYS_STATUS_SENSOR_3D_MAG=4,
 MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE=8,
 MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE=16,
 MAV_SYS_STATUS_SENSOR_GPS=32,
 MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW=64,
 MAV_SYS_STATUS_SENSOR_VISION_POSITION=128,
 MAV_SYS_STATUS_SENSOR_LASER_POSITION=256,
 MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH=512,
 MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL=1024,
 MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION=2048,
 MAV_SYS_STATUS_SENSOR_YAW_POSITION=4096,
 MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL=8192,
 MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL=16384,
 MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS=32768,
 MAV_SYS_STATUS_SENSOR_RC_RECEIVER=65536,
 MAV_SYS_STATUS_SENSOR_3D_GYRO2=131072,
 MAV_SYS_STATUS_SENSOR_3D_ACCEL2=262144,
 MAV_SYS_STATUS_SENSOR_3D_MAG2=524288,
 MAV_SYS_STATUS_GEOFENCE=1048576,
 MAV_SYS_STATUS_AHRS=2097152,
 MAV_SYS_STATUS_TERRAIN=4194304,
 MAV_SYS_STATUS_SENSOR_ENUM_END=4194305,
} MAV_SYS_STATUS_SENSOR;





typedef enum MAV_FRAME
{
 MAV_FRAME_GLOBAL=0,
 MAV_FRAME_LOCAL_NED=1,
 MAV_FRAME_MISSION=2,
 MAV_FRAME_GLOBAL_RELATIVE_ALT=3,
 MAV_FRAME_LOCAL_ENU=4,
 MAV_FRAME_GLOBAL_INT=5,
 MAV_FRAME_GLOBAL_RELATIVE_ALT_INT=6,
 MAV_FRAME_LOCAL_OFFSET_NED=7,
 MAV_FRAME_BODY_NED=8,
 MAV_FRAME_BODY_OFFSET_NED=9,
 MAV_FRAME_GLOBAL_TERRAIN_ALT=10,
 MAV_FRAME_GLOBAL_TERRAIN_ALT_INT=11,
 MAV_FRAME_ENUM_END=12,
} MAV_FRAME;





typedef enum MAVLINK_DATA_STREAM_TYPE
{
 MAVLINK_DATA_STREAM_IMG_JPEG=1,
 MAVLINK_DATA_STREAM_IMG_BMP=2,
 MAVLINK_DATA_STREAM_IMG_RAW8U=3,
 MAVLINK_DATA_STREAM_IMG_RAW32U=4,
 MAVLINK_DATA_STREAM_IMG_PGM=5,
 MAVLINK_DATA_STREAM_IMG_PNG=6,
 MAVLINK_DATA_STREAM_TYPE_ENUM_END=7,
} MAVLINK_DATA_STREAM_TYPE;





typedef enum FENCE_ACTION
{
 FENCE_ACTION_NONE=0,
 FENCE_ACTION_GUIDED=1,
 FENCE_ACTION_REPORT=2,
 FENCE_ACTION_GUIDED_THR_PASS=3,
 FENCE_ACTION_ENUM_END=4,
} FENCE_ACTION;





typedef enum FENCE_BREACH
{
 FENCE_BREACH_NONE=0,
 FENCE_BREACH_MINALT=1,
 FENCE_BREACH_MAXALT=2,
 FENCE_BREACH_BOUNDARY=3,
 FENCE_BREACH_ENUM_END=4,
} FENCE_BREACH;





typedef enum MAV_MOUNT_MODE
{
 MAV_MOUNT_MODE_RETRACT=0,
 MAV_MOUNT_MODE_NEUTRAL=1,
 MAV_MOUNT_MODE_MAVLINK_TARGETING=2,
 MAV_MOUNT_MODE_RC_TARGETING=3,
 MAV_MOUNT_MODE_GPS_POINT=4,
 MAV_MOUNT_MODE_ENUM_END=5,
} MAV_MOUNT_MODE;





typedef enum MAV_CMD
{
 MAV_CMD_NAV_WAYPOINT=16,
 MAV_CMD_NAV_LOITER_UNLIM=17,
 MAV_CMD_NAV_LOITER_TURNS=18,
 MAV_CMD_NAV_LOITER_TIME=19,
 MAV_CMD_NAV_RETURN_TO_LAUNCH=20,
 MAV_CMD_NAV_LAND=21,
 MAV_CMD_NAV_TAKEOFF=22,
 MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT=30,
 MAV_CMD_NAV_ROI=80,
 MAV_CMD_NAV_PATHPLANNING=81,
 MAV_CMD_NAV_SPLINE_WAYPOINT=82,
 MAV_CMD_NAV_GUIDED_ENABLE=92,
 MAV_CMD_NAV_LAST=95,
 MAV_CMD_CONDITION_DELAY=112,
 MAV_CMD_CONDITION_CHANGE_ALT=113,
 MAV_CMD_CONDITION_DISTANCE=114,
 MAV_CMD_CONDITION_YAW=115,
 MAV_CMD_CONDITION_LAST=159,
 MAV_CMD_DO_SET_MODE=176,
 MAV_CMD_DO_JUMP=177,
 MAV_CMD_DO_CHANGE_SPEED=178,
 MAV_CMD_DO_SET_HOME=179,
 MAV_CMD_DO_SET_PARAMETER=180,
 MAV_CMD_DO_SET_RELAY=181,
 MAV_CMD_DO_REPEAT_RELAY=182,
 MAV_CMD_DO_SET_SERVO=183,
 MAV_CMD_DO_REPEAT_SERVO=184,
 MAV_CMD_DO_FLIGHTTERMINATION=185,
 MAV_CMD_DO_LAND_START=189,
 MAV_CMD_DO_RALLY_LAND=190,
 MAV_CMD_DO_GO_AROUND=191,
 MAV_CMD_DO_CONTROL_VIDEO=200,
 MAV_CMD_DO_SET_ROI=201,
 MAV_CMD_DO_DIGICAM_CONFIGURE=202,
 MAV_CMD_DO_DIGICAM_CONTROL=203,
 MAV_CMD_DO_MOUNT_CONFIGURE=204,
 MAV_CMD_DO_MOUNT_CONTROL=205,
 MAV_CMD_DO_SET_CAM_TRIGG_DIST=206,
 MAV_CMD_DO_FENCE_ENABLE=207,
 MAV_CMD_DO_PARACHUTE=208,
 MAV_CMD_DO_INVERTED_FLIGHT=210,
 MAV_CMD_DO_MOUNT_CONTROL_QUAT=220,
 MAV_CMD_DO_GUIDED_MASTER=221,
 MAV_CMD_DO_GUIDED_LIMITS=222,
 MAV_CMD_DO_LAST=240,
 MAV_CMD_PREFLIGHT_CALIBRATION=241,
 MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS=242,
 MAV_CMD_PREFLIGHT_STORAGE=245,
 MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN=246,
 MAV_CMD_OVERRIDE_GOTO=252,
 MAV_CMD_MISSION_START=300,
 MAV_CMD_COMPONENT_ARM_DISARM=400,
 MAV_CMD_START_RX_PAIR=500,
 MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES=520,
 MAV_CMD_IMAGE_START_CAPTURE=2000,
 MAV_CMD_IMAGE_STOP_CAPTURE=2001,
 MAV_CMD_DO_TRIGGER_CONTROL=2003,
 MAV_CMD_VIDEO_START_CAPTURE=2500,
 MAV_CMD_VIDEO_STOP_CAPTURE=2501,
 MAV_CMD_PANORAMA_CREATE=2800,
 MAV_CMD_PAYLOAD_PREPARE_DEPLOY=30001,
 MAV_CMD_PAYLOAD_CONTROL_DEPLOY=30002,
 MAV_CMD_ENUM_END=30003,
} MAV_CMD;







typedef enum MAV_DATA_STREAM
{
 MAV_DATA_STREAM_ALL=0,
 MAV_DATA_STREAM_RAW_SENSORS=1,
 MAV_DATA_STREAM_EXTENDED_STATUS=2,
 MAV_DATA_STREAM_RC_CHANNELS=3,
 MAV_DATA_STREAM_RAW_CONTROLLER=4,
 MAV_DATA_STREAM_POSITION=6,
 MAV_DATA_STREAM_EXTRA1=10,
 MAV_DATA_STREAM_EXTRA2=11,
 MAV_DATA_STREAM_EXTRA3=12,
 MAV_DATA_STREAM_ENUM_END=13,
} MAV_DATA_STREAM;







typedef enum MAV_ROI
{
 MAV_ROI_NONE=0,
 MAV_ROI_WPNEXT=1,
 MAV_ROI_WPINDEX=2,
 MAV_ROI_LOCATION=3,
 MAV_ROI_TARGET=4,
 MAV_ROI_ENUM_END=5,
} MAV_ROI;





typedef enum MAV_CMD_ACK
{
 MAV_CMD_ACK_OK=1,
 MAV_CMD_ACK_ERR_FAIL=2,
 MAV_CMD_ACK_ERR_ACCESS_DENIED=3,
 MAV_CMD_ACK_ERR_NOT_SUPPORTED=4,
 MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED=5,
 MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE=6,
 MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE=7,
 MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE=8,
 MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE=9,
 MAV_CMD_ACK_ENUM_END=10,
} MAV_CMD_ACK;





typedef enum MAV_PARAM_TYPE
{
 MAV_PARAM_TYPE_UINT8=1,
 MAV_PARAM_TYPE_INT8=2,
 MAV_PARAM_TYPE_UINT16=3,
 MAV_PARAM_TYPE_INT16=4,
 MAV_PARAM_TYPE_UINT32=5,
 MAV_PARAM_TYPE_INT32=6,
 MAV_PARAM_TYPE_UINT64=7,
 MAV_PARAM_TYPE_INT64=8,
 MAV_PARAM_TYPE_REAL32=9,
 MAV_PARAM_TYPE_REAL64=10,
 MAV_PARAM_TYPE_ENUM_END=11,
} MAV_PARAM_TYPE;





typedef enum MAV_RESULT
{
 MAV_RESULT_ACCEPTED=0,
 MAV_RESULT_TEMPORARILY_REJECTED=1,
 MAV_RESULT_DENIED=2,
 MAV_RESULT_UNSUPPORTED=3,
 MAV_RESULT_FAILED=4,
 MAV_RESULT_ENUM_END=5,
} MAV_RESULT;





typedef enum MAV_MISSION_RESULT
{
 MAV_MISSION_ACCEPTED=0,
 MAV_MISSION_ERROR=1,
 MAV_MISSION_UNSUPPORTED_FRAME=2,
 MAV_MISSION_UNSUPPORTED=3,
 MAV_MISSION_NO_SPACE=4,
 MAV_MISSION_INVALID=5,
 MAV_MISSION_INVALID_PARAM1=6,
 MAV_MISSION_INVALID_PARAM2=7,
 MAV_MISSION_INVALID_PARAM3=8,
 MAV_MISSION_INVALID_PARAM4=9,
 MAV_MISSION_INVALID_PARAM5_X=10,
 MAV_MISSION_INVALID_PARAM6_Y=11,
 MAV_MISSION_INVALID_PARAM7=12,
 MAV_MISSION_INVALID_SEQUENCE=13,
 MAV_MISSION_DENIED=14,
 MAV_MISSION_RESULT_ENUM_END=15,
} MAV_MISSION_RESULT;





typedef enum MAV_SEVERITY
{
 MAV_SEVERITY_EMERGENCY=0,
 MAV_SEVERITY_ALERT=1,
 MAV_SEVERITY_CRITICAL=2,
 MAV_SEVERITY_ERROR=3,
 MAV_SEVERITY_WARNING=4,
 MAV_SEVERITY_NOTICE=5,
 MAV_SEVERITY_INFO=6,
 MAV_SEVERITY_DEBUG=7,
 MAV_SEVERITY_ENUM_END=8,
} MAV_SEVERITY;





typedef enum MAV_POWER_STATUS
{
 MAV_POWER_STATUS_BRICK_VALID=1,
 MAV_POWER_STATUS_SERVO_VALID=2,
 MAV_POWER_STATUS_USB_CONNECTED=4,
 MAV_POWER_STATUS_PERIPH_OVERCURRENT=8,
 MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT=16,
 MAV_POWER_STATUS_CHANGED=32,
 MAV_POWER_STATUS_ENUM_END=33,
} MAV_POWER_STATUS;





typedef enum SERIAL_CONTROL_DEV
{
 SERIAL_CONTROL_DEV_TELEM1=0,
 SERIAL_CONTROL_DEV_TELEM2=1,
 SERIAL_CONTROL_DEV_GPS1=2,
 SERIAL_CONTROL_DEV_GPS2=3,
 SERIAL_CONTROL_DEV_ENUM_END=4,
} SERIAL_CONTROL_DEV;





typedef enum SERIAL_CONTROL_FLAG
{
 SERIAL_CONTROL_FLAG_REPLY=1,
 SERIAL_CONTROL_FLAG_RESPOND=2,
 SERIAL_CONTROL_FLAG_EXCLUSIVE=4,
 SERIAL_CONTROL_FLAG_BLOCKING=8,
 SERIAL_CONTROL_FLAG_MULTI=16,
 SERIAL_CONTROL_FLAG_ENUM_END=17,
} SERIAL_CONTROL_FLAG;





typedef enum MAV_DISTANCE_SENSOR
{
 MAV_DISTANCE_SENSOR_LASER=0,
 MAV_DISTANCE_SENSOR_ULTRASOUND=1,
 MAV_DISTANCE_SENSOR_ENUM_END=2,
} MAV_DISTANCE_SENSOR;





typedef enum MAV_PROTOCOL_CAPABILITY
{
 MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT=1,
 MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT=2,
 MAV_PROTOCOL_CAPABILITY_MISSION_INT=4,
 MAV_PROTOCOL_CAPABILITY_COMMAND_INT=8,
 MAV_PROTOCOL_CAPABILITY_PARAM_UNION=16,
 MAV_PROTOCOL_CAPABILITY_FTP=32,
 MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET=64,
 MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED=128,
 MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT=256,
 MAV_PROTOCOL_CAPABILITY_TERRAIN=512,
 MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET=1024,
 MAV_PROTOCOL_CAPABILITY_ENUM_END=1025,
} MAV_PROTOCOL_CAPABILITY;





typedef enum MAV_ESTIMATOR_TYPE
{
 MAV_ESTIMATOR_TYPE_NAIVE=1,
 MAV_ESTIMATOR_TYPE_VISION=2,
 MAV_ESTIMATOR_TYPE_VIO=3,
 MAV_ESTIMATOR_TYPE_GPS=4,
 MAV_ESTIMATOR_TYPE_GPS_INS=5,
 MAV_ESTIMATOR_TYPE_ENUM_END=6,
} MAV_ESTIMATOR_TYPE;





typedef enum MAV_BATTERY_TYPE
{
 MAV_BATTERY_TYPE_UNKNOWN=0,
 MAV_BATTERY_TYPE_LIPO=1,
 MAV_BATTERY_TYPE_LIFE=2,
 MAV_BATTERY_TYPE_LION=3,
 MAV_BATTERY_TYPE_NIMH=4,
 MAV_BATTERY_TYPE_ENUM_END=5,
} MAV_BATTERY_TYPE;





typedef enum MAV_BATTERY_FUNCTION
{
 MAV_BATTERY_FUNCTION_UNKNOWN=0,
 MAV_BATTERY_FUNCTION_ALL=1,
 MAV_BATTERY_FUNCTION_PROPULSION=2,
 MAV_BATTERY_FUNCTION_AVIONICS=3,
 MAV_BATTERY_TYPE_PAYLOAD=4,
 MAV_BATTERY_FUNCTION_ENUM_END=5,
} MAV_BATTERY_FUNCTION;
# 657 "./lib/main/MAVLink/common/common.h"
# 1 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h" 1




typedef struct __mavlink_heartbeat_t
{
 uint32_t custom_mode;
 uint8_t type;
 uint8_t autopilot;
 uint8_t base_mode;
 uint8_t system_status;
 uint8_t mavlink_version;
} mavlink_heartbeat_t;
# 49 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
# 63 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
 mavlink_heartbeat_t packet;
 packet.custom_mode = custom_mode;
 packet.type = type;
 packet.autopilot = autopilot;
 packet.base_mode = base_mode;
 packet.system_status = system_status;
 packet.mavlink_version = 3;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


 msg->msgid = 0;

    return mavlink_finalize_message(msg, system_id, component_id, 9, 50);



}
# 95 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t type,uint8_t autopilot,uint8_t base_mode,uint32_t custom_mode,uint8_t system_status)
{
# 110 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
 mavlink_heartbeat_t packet;
 packet.custom_mode = custom_mode;
 packet.type = type;
 packet.autopilot = autopilot;
 packet.base_mode = base_mode;
 packet.system_status = system_status;
 packet.mavlink_version = 3;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


 msg->msgid = 0;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 9, 50);



}
# 137 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
 return mavlink_msg_heartbeat_pack(system_id, component_id, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
}
# 151 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
static inline uint16_t mavlink_msg_heartbeat_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_heartbeat_t* heartbeat)
{
 return mavlink_msg_heartbeat_pack_chan(system_id, component_id, chan, msg, heartbeat->type, heartbeat->autopilot, heartbeat->base_mode, heartbeat->custom_mode, heartbeat->system_status);
}
# 253 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
static inline uint8_t mavlink_msg_heartbeat_get_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_heartbeat_get_autopilot(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint8_t mavlink_msg_heartbeat_get_base_mode(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint32_t mavlink_msg_heartbeat_get_custom_mode(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_heartbeat_get_system_status(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint8_t mavlink_msg_heartbeat_get_mavlink_version(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}







static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
# 324 "./lib/main/MAVLink/common/./mavlink_msg_heartbeat.h"
 memcpy(heartbeat, ((const char *)(&((msg)->payload64[0]))), 9);

}
# 658 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h" 1




typedef struct __mavlink_sys_status_t
{
 uint32_t onboard_control_sensors_present;
 uint32_t onboard_control_sensors_enabled;
 uint32_t onboard_control_sensors_health;
 uint16_t load;
 uint16_t voltage_battery;
 int16_t current_battery;
 uint16_t drop_rate_comm;
 uint16_t errors_comm;
 uint16_t errors_count1;
 uint16_t errors_count2;
 uint16_t errors_count3;
 uint16_t errors_count4;
 int8_t battery_remaining;
} mavlink_sys_status_t;
# 71 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t onboard_control_sensors_present, uint32_t onboard_control_sensors_enabled, uint32_t onboard_control_sensors_health, uint16_t load, uint16_t voltage_battery, int16_t current_battery, int8_t battery_remaining, uint16_t drop_rate_comm, uint16_t errors_comm, uint16_t errors_count1, uint16_t errors_count2, uint16_t errors_count3, uint16_t errors_count4)
{
# 92 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
 mavlink_sys_status_t packet;
 packet.onboard_control_sensors_present = onboard_control_sensors_present;
 packet.onboard_control_sensors_enabled = onboard_control_sensors_enabled;
 packet.onboard_control_sensors_health = onboard_control_sensors_health;
 packet.load = load;
 packet.voltage_battery = voltage_battery;
 packet.current_battery = current_battery;
 packet.drop_rate_comm = drop_rate_comm;
 packet.errors_comm = errors_comm;
 packet.errors_count1 = errors_count1;
 packet.errors_count2 = errors_count2;
 packet.errors_count3 = errors_count3;
 packet.errors_count4 = errors_count4;
 packet.battery_remaining = battery_remaining;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 31);


 msg->msgid = 1;

    return mavlink_finalize_message(msg, system_id, component_id, 31, 124);



}
# 139 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t onboard_control_sensors_present,uint32_t onboard_control_sensors_enabled,uint32_t onboard_control_sensors_health,uint16_t load,uint16_t voltage_battery,int16_t current_battery,int8_t battery_remaining,uint16_t drop_rate_comm,uint16_t errors_comm,uint16_t errors_count1,uint16_t errors_count2,uint16_t errors_count3,uint16_t errors_count4)
{
# 161 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
 mavlink_sys_status_t packet;
 packet.onboard_control_sensors_present = onboard_control_sensors_present;
 packet.onboard_control_sensors_enabled = onboard_control_sensors_enabled;
 packet.onboard_control_sensors_health = onboard_control_sensors_health;
 packet.load = load;
 packet.voltage_battery = voltage_battery;
 packet.current_battery = current_battery;
 packet.drop_rate_comm = drop_rate_comm;
 packet.errors_comm = errors_comm;
 packet.errors_count1 = errors_count1;
 packet.errors_count2 = errors_count2;
 packet.errors_count3 = errors_count3;
 packet.errors_count4 = errors_count4;
 packet.battery_remaining = battery_remaining;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 31);


 msg->msgid = 1;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 31, 124);



}
# 195 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_sys_status_t* sys_status)
{
 return mavlink_msg_sys_status_pack(system_id, component_id, msg, sys_status->onboard_control_sensors_present, sys_status->onboard_control_sensors_enabled, sys_status->onboard_control_sensors_health, sys_status->load, sys_status->voltage_battery, sys_status->current_battery, sys_status->battery_remaining, sys_status->drop_rate_comm, sys_status->errors_comm, sys_status->errors_count1, sys_status->errors_count2, sys_status->errors_count3, sys_status->errors_count4);
}
# 209 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
static inline uint16_t mavlink_msg_sys_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_sys_status_t* sys_status)
{
 return mavlink_msg_sys_status_pack_chan(system_id, component_id, chan, msg, sys_status->onboard_control_sensors_present, sys_status->onboard_control_sensors_enabled, sys_status->onboard_control_sensors_health, sys_status->load, sys_status->voltage_battery, sys_status->current_battery, sys_status->battery_remaining, sys_status->drop_rate_comm, sys_status->errors_comm, sys_status->errors_count1, sys_status->errors_count2, sys_status->errors_count3, sys_status->errors_count4);
}
# 347 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
static inline uint32_t mavlink_msg_sys_status_get_onboard_control_sensors_present(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint32_t mavlink_msg_sys_status_get_onboard_control_sensors_enabled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 4);
}






static inline uint32_t mavlink_msg_sys_status_get_onboard_control_sensors_health(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint16_t mavlink_msg_sys_status_get_load(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_sys_status_get_voltage_battery(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 14);
}






static inline int16_t mavlink_msg_sys_status_get_current_battery(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline int8_t mavlink_msg_sys_status_get_battery_remaining(const mavlink_message_t* msg)
{
 return (const int8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint16_t mavlink_msg_sys_status_get_drop_rate_comm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_comm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_sys_status_get_errors_count4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}







static inline void mavlink_msg_sys_status_decode(const mavlink_message_t* msg, mavlink_sys_status_t* sys_status)
{
# 495 "./lib/main/MAVLink/common/./mavlink_msg_sys_status.h"
 memcpy(sys_status, ((const char *)(&((msg)->payload64[0]))), 31);

}
# 659 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_system_time.h" 1




typedef struct __mavlink_system_time_t
{
 uint64_t time_unix_usec;
 uint32_t time_boot_ms;
} mavlink_system_time_t;
# 38 "./lib/main/MAVLink/common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_unix_usec, uint32_t time_boot_ms)
{







 mavlink_system_time_t packet;
 packet.time_unix_usec = time_unix_usec;
 packet.time_boot_ms = time_boot_ms;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 2;

    return mavlink_finalize_message(msg, system_id, component_id, 12, 137);



}
# 73 "./lib/main/MAVLink/common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_unix_usec,uint32_t time_boot_ms)
{







 mavlink_system_time_t packet;
 packet.time_unix_usec = time_unix_usec;
 packet.time_boot_ms = time_boot_ms;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 2;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 137);



}
# 107 "./lib/main/MAVLink/common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_system_time_t* system_time)
{
 return mavlink_msg_system_time_pack(system_id, component_id, msg, system_time->time_unix_usec, system_time->time_boot_ms);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_system_time.h"
static inline uint16_t mavlink_msg_system_time_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_system_time_t* system_time)
{
 return mavlink_msg_system_time_pack_chan(system_id, component_id, chan, msg, system_time->time_unix_usec, system_time->time_boot_ms);
}
# 204 "./lib/main/MAVLink/common/./mavlink_msg_system_time.h"
static inline uint64_t mavlink_msg_system_time_get_time_unix_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_system_time_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}







static inline void mavlink_msg_system_time_decode(const mavlink_message_t* msg, mavlink_system_time_t* system_time)
{




 memcpy(system_time, ((const char *)(&((msg)->payload64[0]))), 12);

}
# 660 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_ping.h" 1




typedef struct __mavlink_ping_t
{
 uint64_t time_usec;
 uint32_t seq;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_ping_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint32_t seq, uint8_t target_system, uint8_t target_component)
{
# 56 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
 mavlink_ping_t packet;
 packet.time_usec = time_usec;
 packet.seq = seq;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 4;

    return mavlink_finalize_message(msg, system_id, component_id, 14, 237);



}
# 85 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint32_t seq,uint8_t target_system,uint8_t target_component)
{
# 98 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
 mavlink_ping_t packet;
 packet.time_usec = time_usec;
 packet.seq = seq;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 4;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 237);



}
# 123 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_ping_t* ping)
{
 return mavlink_msg_ping_pack(system_id, component_id, msg, ping->time_usec, ping->seq, ping->target_system, ping->target_component);
}
# 137 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
static inline uint16_t mavlink_msg_ping_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_ping_t* ping)
{
 return mavlink_msg_ping_pack_chan(system_id, component_id, chan, msg, ping->time_usec, ping->seq, ping->target_system, ping->target_component);
}
# 230 "./lib/main/MAVLink/common/./mavlink_msg_ping.h"
static inline uint64_t mavlink_msg_ping_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_ping_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint8_t mavlink_msg_ping_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline uint8_t mavlink_msg_ping_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[13];
}







static inline void mavlink_msg_ping_decode(const mavlink_message_t* msg, mavlink_ping_t* ping)
{






 memcpy(ping, ((const char *)(&((msg)->payload64[0]))), 14);

}
# 661 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h" 1




typedef struct __mavlink_change_operator_control_t
{
 uint8_t target_system;
 uint8_t control_request;
 uint8_t version;
 char passkey[25];
} mavlink_change_operator_control_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t control_request, uint8_t version, const char *passkey)
{
# 55 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
 mavlink_change_operator_control_t packet;
 packet.target_system = target_system;
 packet.control_request = control_request;
 packet.version = version;
 mav_array_memcpy(packet.passkey, passkey, sizeof(char)*25);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 5;

    return mavlink_finalize_message(msg, system_id, component_id, 28, 217);



}
# 83 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t control_request,uint8_t version,const char *passkey)
{
# 95 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
 mavlink_change_operator_control_t packet;
 packet.target_system = target_system;
 packet.control_request = control_request;
 packet.version = version;
 mav_array_memcpy(packet.passkey, passkey, sizeof(char)*25);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 5;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 217);



}
# 119 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_change_operator_control_t* change_operator_control)
{
 return mavlink_msg_change_operator_control_pack(system_id, component_id, msg, change_operator_control->target_system, change_operator_control->control_request, change_operator_control->version, change_operator_control->passkey);
}
# 133 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
static inline uint16_t mavlink_msg_change_operator_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_change_operator_control_t* change_operator_control)
{
 return mavlink_msg_change_operator_control_pack_chan(system_id, component_id, chan, msg, change_operator_control->target_system, change_operator_control->control_request, change_operator_control->version, change_operator_control->passkey);
}
# 222 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control.h"
static inline uint8_t mavlink_msg_change_operator_control_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_change_operator_control_get_control_request(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_change_operator_control_get_version(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_change_operator_control_get_passkey(const mavlink_message_t* msg, char *passkey)
{
 return _MAV_RETURN_char_array(msg, passkey, 25, 3);
}







static inline void mavlink_msg_change_operator_control_decode(const mavlink_message_t* msg, mavlink_change_operator_control_t* change_operator_control)
{






 memcpy(change_operator_control, ((const char *)(&((msg)->payload64[0]))), 28);

}
# 662 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h" 1




typedef struct __mavlink_change_operator_control_ack_t
{
 uint8_t gcs_system_id;
 uint8_t control_request;
 uint8_t ack;
} mavlink_change_operator_control_ack_t;
# 41 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t gcs_system_id, uint8_t control_request, uint8_t ack)
{
# 52 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
 mavlink_change_operator_control_ack_t packet;
 packet.gcs_system_id = gcs_system_id;
 packet.control_request = control_request;
 packet.ack = ack;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


 msg->msgid = 6;

    return mavlink_finalize_message(msg, system_id, component_id, 3, 104);



}
# 79 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t gcs_system_id,uint8_t control_request,uint8_t ack)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
 mavlink_change_operator_control_ack_t packet;
 packet.gcs_system_id = gcs_system_id;
 packet.control_request = control_request;
 packet.ack = ack;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


 msg->msgid = 6;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 104);



}
# 115 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_change_operator_control_ack_t* change_operator_control_ack)
{
 return mavlink_msg_change_operator_control_ack_pack(system_id, component_id, msg, change_operator_control_ack->gcs_system_id, change_operator_control_ack->control_request, change_operator_control_ack->ack);
}
# 129 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint16_t mavlink_msg_change_operator_control_ack_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_change_operator_control_ack_t* change_operator_control_ack)
{
 return mavlink_msg_change_operator_control_ack_pack_chan(system_id, component_id, chan, msg, change_operator_control_ack->gcs_system_id, change_operator_control_ack->control_request, change_operator_control_ack->ack);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_change_operator_control_ack.h"
static inline uint8_t mavlink_msg_change_operator_control_ack_get_gcs_system_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_change_operator_control_ack_get_control_request(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_change_operator_control_ack_get_ack(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_change_operator_control_ack_decode(const mavlink_message_t* msg, mavlink_change_operator_control_ack_t* change_operator_control_ack)
{





 memcpy(change_operator_control_ack, ((const char *)(&((msg)->payload64[0]))), 3);

}
# 663 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_auth_key.h" 1




typedef struct __mavlink_auth_key_t
{
 char key[32];
} mavlink_auth_key_t;
# 35 "./lib/main/MAVLink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             const char *key)
{






 mavlink_auth_key_t packet;

 mav_array_memcpy(packet.key, key, sizeof(char)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 7;

    return mavlink_finalize_message(msg, system_id, component_id, 32, 119);



}
# 67 "./lib/main/MAVLink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 const char *key)
{






 mavlink_auth_key_t packet;

 mav_array_memcpy(packet.key, key, sizeof(char)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 7;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 119);



}
# 99 "./lib/main/MAVLink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_auth_key_t* auth_key)
{
 return mavlink_msg_auth_key_pack(system_id, component_id, msg, auth_key->key);
}
# 113 "./lib/main/MAVLink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_auth_key_t* auth_key)
{
 return mavlink_msg_auth_key_pack_chan(system_id, component_id, chan, msg, auth_key->key);
}
# 191 "./lib/main/MAVLink/common/./mavlink_msg_auth_key.h"
static inline uint16_t mavlink_msg_auth_key_get_key(const mavlink_message_t* msg, char *key)
{
 return _MAV_RETURN_char_array(msg, key, 32, 0);
}







static inline void mavlink_msg_auth_key_decode(const mavlink_message_t* msg, mavlink_auth_key_t* auth_key)
{



 memcpy(auth_key, ((const char *)(&((msg)->payload64[0]))), 32);

}
# 664 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h" 1




typedef struct __mavlink_set_mode_t
{
 uint32_t custom_mode;
 uint8_t target_system;
 uint8_t base_mode;
} mavlink_set_mode_t;
# 41 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t base_mode, uint32_t custom_mode)
{
# 52 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
 mavlink_set_mode_t packet;
 packet.custom_mode = custom_mode;
 packet.target_system = target_system;
 packet.base_mode = base_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 11;

    return mavlink_finalize_message(msg, system_id, component_id, 6, 89);



}
# 79 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t base_mode,uint32_t custom_mode)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
 mavlink_set_mode_t packet;
 packet.custom_mode = custom_mode;
 packet.target_system = target_system;
 packet.base_mode = base_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 11;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 89);



}
# 115 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_mode_t* set_mode)
{
 return mavlink_msg_set_mode_pack(system_id, component_id, msg, set_mode->target_system, set_mode->base_mode, set_mode->custom_mode);
}
# 129 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
static inline uint16_t mavlink_msg_set_mode_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_mode_t* set_mode)
{
 return mavlink_msg_set_mode_pack_chan(system_id, component_id, chan, msg, set_mode->target_system, set_mode->base_mode, set_mode->custom_mode);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_set_mode.h"
static inline uint8_t mavlink_msg_set_mode_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_set_mode_get_base_mode(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint32_t mavlink_msg_set_mode_get_custom_mode(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}







static inline void mavlink_msg_set_mode_decode(const mavlink_message_t* msg, mavlink_set_mode_t* set_mode)
{





 memcpy(set_mode, ((const char *)(&((msg)->payload64[0]))), 6);

}
# 665 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h" 1




typedef struct __mavlink_param_request_read_t
{
 int16_t param_index;
 uint8_t target_system;
 uint8_t target_component;
 char param_id[16];
} mavlink_param_request_read_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, const char *param_id, int16_t param_index)
{
# 55 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
 mavlink_param_request_read_t packet;
 packet.param_index = param_index;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


 msg->msgid = 20;

    return mavlink_finalize_message(msg, system_id, component_id, 20, 214);



}
# 83 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,const char *param_id,int16_t param_index)
{
# 95 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
 mavlink_param_request_read_t packet;
 packet.param_index = param_index;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


 msg->msgid = 20;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 20, 214);



}
# 119 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_request_read_t* param_request_read)
{
 return mavlink_msg_param_request_read_pack(system_id, component_id, msg, param_request_read->target_system, param_request_read->target_component, param_request_read->param_id, param_request_read->param_index);
}
# 133 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
static inline uint16_t mavlink_msg_param_request_read_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_request_read_t* param_request_read)
{
 return mavlink_msg_param_request_read_pack_chan(system_id, component_id, chan, msg, param_request_read->target_system, param_request_read->target_component, param_request_read->param_id, param_request_read->param_index);
}
# 222 "./lib/main/MAVLink/common/./mavlink_msg_param_request_read.h"
static inline uint8_t mavlink_msg_param_request_read_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_param_request_read_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_param_request_read_get_param_id(const mavlink_message_t* msg, char *param_id)
{
 return _MAV_RETURN_char_array(msg, param_id, 16, 4);
}






static inline int16_t mavlink_msg_param_request_read_get_param_index(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 0);
}







static inline void mavlink_msg_param_request_read_decode(const mavlink_message_t* msg, mavlink_param_request_read_t* param_request_read)
{






 memcpy(param_request_read, ((const char *)(&((msg)->payload64[0]))), 20);

}
# 666 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_param_request_list.h" 1




typedef struct __mavlink_param_request_list_t
{
 uint8_t target_system;
 uint8_t target_component;
} mavlink_param_request_list_t;
# 38 "./lib/main/MAVLink/common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component)
{







 mavlink_param_request_list_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 21;

    return mavlink_finalize_message(msg, system_id, component_id, 2, 159);



}
# 73 "./lib/main/MAVLink/common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component)
{







 mavlink_param_request_list_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 21;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 159);



}
# 107 "./lib/main/MAVLink/common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_request_list_t* param_request_list)
{
 return mavlink_msg_param_request_list_pack(system_id, component_id, msg, param_request_list->target_system, param_request_list->target_component);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_param_request_list.h"
static inline uint16_t mavlink_msg_param_request_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_request_list_t* param_request_list)
{
 return mavlink_msg_param_request_list_pack_chan(system_id, component_id, chan, msg, param_request_list->target_system, param_request_list->target_component);
}
# 204 "./lib/main/MAVLink/common/./mavlink_msg_param_request_list.h"
static inline uint8_t mavlink_msg_param_request_list_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_param_request_list_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_param_request_list_decode(const mavlink_message_t* msg, mavlink_param_request_list_t* param_request_list)
{




 memcpy(param_request_list, ((const char *)(&((msg)->payload64[0]))), 2);

}
# 667 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h" 1




typedef struct __mavlink_param_value_t
{
 float param_value;
 uint16_t param_count;
 uint16_t param_index;
 char param_id[16];
 uint8_t param_type;
} mavlink_param_value_t;
# 47 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             const char *param_id, float param_value, uint8_t param_type, uint16_t param_count, uint16_t param_index)
{
# 59 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
 mavlink_param_value_t packet;
 packet.param_value = param_value;
 packet.param_count = param_count;
 packet.param_index = param_index;
 packet.param_type = param_type;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


 msg->msgid = 22;

    return mavlink_finalize_message(msg, system_id, component_id, 25, 220);



}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 const char *param_id,float param_value,uint8_t param_type,uint16_t param_count,uint16_t param_index)
{
# 102 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
 mavlink_param_value_t packet;
 packet.param_value = param_value;
 packet.param_count = param_count;
 packet.param_index = param_index;
 packet.param_type = param_type;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


 msg->msgid = 22;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 25, 220);



}
# 127 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_value_t* param_value)
{
 return mavlink_msg_param_value_pack(system_id, component_id, msg, param_value->param_id, param_value->param_value, param_value->param_type, param_value->param_count, param_value->param_index);
}
# 141 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_value_t* param_value)
{
 return mavlink_msg_param_value_pack_chan(system_id, component_id, chan, msg, param_value->param_id, param_value->param_value, param_value->param_type, param_value->param_count, param_value->param_index);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_param_value.h"
static inline uint16_t mavlink_msg_param_value_get_param_id(const mavlink_message_t* msg, char *param_id)
{
 return _MAV_RETURN_char_array(msg, param_id, 16, 8);
}






static inline float mavlink_msg_param_value_get_param_value(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline uint8_t mavlink_msg_param_value_get_param_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline uint16_t mavlink_msg_param_value_get_param_count(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_param_value_get_param_index(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 6);
}







static inline void mavlink_msg_param_value_decode(const mavlink_message_t* msg, mavlink_param_value_t* param_value)
{







 memcpy(param_value, ((const char *)(&((msg)->payload64[0]))), 25);

}
# 668 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h" 1




typedef struct __mavlink_param_set_t
{
 float param_value;
 uint8_t target_system;
 uint8_t target_component;
 char param_id[16];
 uint8_t param_type;
} mavlink_param_set_t;
# 47 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, const char *param_id, float param_value, uint8_t param_type)
{
# 59 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
 mavlink_param_set_t packet;
 packet.param_value = param_value;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.param_type = param_type;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 23);


 msg->msgid = 23;

    return mavlink_finalize_message(msg, system_id, component_id, 23, 168);



}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,const char *param_id,float param_value,uint8_t param_type)
{
# 102 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
 mavlink_param_set_t packet;
 packet.param_value = param_value;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.param_type = param_type;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 23);


 msg->msgid = 23;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 23, 168);



}
# 127 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_set_t* param_set)
{
 return mavlink_msg_param_set_pack(system_id, component_id, msg, param_set->target_system, param_set->target_component, param_set->param_id, param_set->param_value, param_set->param_type);
}
# 141 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
static inline uint16_t mavlink_msg_param_set_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_set_t* param_set)
{
 return mavlink_msg_param_set_pack_chan(system_id, component_id, chan, msg, param_set->target_system, param_set->target_component, param_set->param_id, param_set->param_value, param_set->param_type);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_param_set.h"
static inline uint8_t mavlink_msg_param_set_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_param_set_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint16_t mavlink_msg_param_set_get_param_id(const mavlink_message_t* msg, char *param_id)
{
 return _MAV_RETURN_char_array(msg, param_id, 16, 6);
}






static inline float mavlink_msg_param_set_get_param_value(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline uint8_t mavlink_msg_param_set_get_param_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[22];
}







static inline void mavlink_msg_param_set_decode(const mavlink_message_t* msg, mavlink_param_set_t* param_set)
{







 memcpy(param_set, ((const char *)(&((msg)->payload64[0]))), 23);

}
# 669 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h" 1




typedef struct __mavlink_gps_raw_int_t
{
 uint64_t time_usec;
 int32_t lat;
 int32_t lon;
 int32_t alt;
 uint16_t eph;
 uint16_t epv;
 uint16_t vel;
 uint16_t cog;
 uint8_t fix_type;
 uint8_t satellites_visible;
} mavlink_gps_raw_int_t;
# 62 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
{
# 80 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
 mavlink_gps_raw_int_t packet;
 packet.time_usec = time_usec;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.eph = eph;
 packet.epv = epv;
 packet.vel = vel;
 packet.cog = cog;
 packet.fix_type = fix_type;
 packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


 msg->msgid = 24;

    return mavlink_finalize_message(msg, system_id, component_id, 30, 24);



}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t fix_type,int32_t lat,int32_t lon,int32_t alt,uint16_t eph,uint16_t epv,uint16_t vel,uint16_t cog,uint8_t satellites_visible)
{
# 140 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
 mavlink_gps_raw_int_t packet;
 packet.time_usec = time_usec;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.eph = eph;
 packet.epv = epv;
 packet.vel = vel;
 packet.cog = cog;
 packet.fix_type = fix_type;
 packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


 msg->msgid = 24;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 30, 24);



}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_raw_int_t* gps_raw_int)
{
 return mavlink_msg_gps_raw_int_pack(system_id, component_id, msg, gps_raw_int->time_usec, gps_raw_int->fix_type, gps_raw_int->lat, gps_raw_int->lon, gps_raw_int->alt, gps_raw_int->eph, gps_raw_int->epv, gps_raw_int->vel, gps_raw_int->cog, gps_raw_int->satellites_visible);
}
# 185 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
static inline uint16_t mavlink_msg_gps_raw_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_raw_int_t* gps_raw_int)
{
 return mavlink_msg_gps_raw_int_pack_chan(system_id, component_id, chan, msg, gps_raw_int->time_usec, gps_raw_int->fix_type, gps_raw_int->lat, gps_raw_int->lon, gps_raw_int->alt, gps_raw_int->eph, gps_raw_int->epv, gps_raw_int->vel, gps_raw_int->cog, gps_raw_int->satellites_visible);
}
# 308 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
static inline uint64_t mavlink_msg_gps_raw_int_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps_raw_int_get_fix_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[28];
}






static inline int32_t mavlink_msg_gps_raw_int_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps_raw_int_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps_raw_int_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_eph(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_epv(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_vel(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_gps_raw_int_get_cog(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint8_t mavlink_msg_gps_raw_int_get_satellites_visible(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[29];
}







static inline void mavlink_msg_gps_raw_int_decode(const mavlink_message_t* msg, mavlink_gps_raw_int_t* gps_raw_int)
{
# 423 "./lib/main/MAVLink/common/./mavlink_msg_gps_raw_int.h"
 memcpy(gps_raw_int, ((const char *)(&((msg)->payload64[0]))), 30);

}
# 670 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h" 1




typedef struct __mavlink_gps_status_t
{
 uint8_t satellites_visible;
 uint8_t satellite_prn[20];
 uint8_t satellite_used[20];
 uint8_t satellite_elevation[20];
 uint8_t satellite_azimuth[20];
 uint8_t satellite_snr[20];
} mavlink_gps_status_t;
# 54 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t satellites_visible, const uint8_t *satellite_prn, const uint8_t *satellite_used, const uint8_t *satellite_elevation, const uint8_t *satellite_azimuth, const uint8_t *satellite_snr)
{
# 67 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
 mavlink_gps_status_t packet;
 packet.satellites_visible = satellites_visible;
 mav_array_memcpy(packet.satellite_prn, satellite_prn, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_used, satellite_used, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_elevation, satellite_elevation, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_azimuth, satellite_azimuth, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_snr, satellite_snr, sizeof(uint8_t)*20);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 101);


 msg->msgid = 25;

    return mavlink_finalize_message(msg, system_id, component_id, 101, 23);



}
# 99 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t satellites_visible,const uint8_t *satellite_prn,const uint8_t *satellite_used,const uint8_t *satellite_elevation,const uint8_t *satellite_azimuth,const uint8_t *satellite_snr)
{
# 113 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
 mavlink_gps_status_t packet;
 packet.satellites_visible = satellites_visible;
 mav_array_memcpy(packet.satellite_prn, satellite_prn, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_used, satellite_used, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_elevation, satellite_elevation, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_azimuth, satellite_azimuth, sizeof(uint8_t)*20);
 mav_array_memcpy(packet.satellite_snr, satellite_snr, sizeof(uint8_t)*20);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 101);


 msg->msgid = 25;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 101, 23);



}
# 139 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_status_t* gps_status)
{
 return mavlink_msg_gps_status_pack(system_id, component_id, msg, gps_status->satellites_visible, gps_status->satellite_prn, gps_status->satellite_used, gps_status->satellite_elevation, gps_status->satellite_azimuth, gps_status->satellite_snr);
}
# 153 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
static inline uint16_t mavlink_msg_gps_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_status_t* gps_status)
{
 return mavlink_msg_gps_status_pack_chan(system_id, component_id, chan, msg, gps_status->satellites_visible, gps_status->satellite_prn, gps_status->satellite_used, gps_status->satellite_elevation, gps_status->satellite_azimuth, gps_status->satellite_snr);
}
# 252 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
static inline uint8_t mavlink_msg_gps_status_get_satellites_visible(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_prn(const mavlink_message_t* msg, uint8_t *satellite_prn)
{
 return _MAV_RETURN_uint8_t_array(msg, satellite_prn, 20, 1);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_used(const mavlink_message_t* msg, uint8_t *satellite_used)
{
 return _MAV_RETURN_uint8_t_array(msg, satellite_used, 20, 21);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_elevation(const mavlink_message_t* msg, uint8_t *satellite_elevation)
{
 return _MAV_RETURN_uint8_t_array(msg, satellite_elevation, 20, 41);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_azimuth(const mavlink_message_t* msg, uint8_t *satellite_azimuth)
{
 return _MAV_RETURN_uint8_t_array(msg, satellite_azimuth, 20, 61);
}






static inline uint16_t mavlink_msg_gps_status_get_satellite_snr(const mavlink_message_t* msg, uint8_t *satellite_snr)
{
 return _MAV_RETURN_uint8_t_array(msg, satellite_snr, 20, 81);
}







static inline void mavlink_msg_gps_status_decode(const mavlink_message_t* msg, mavlink_gps_status_t* gps_status)
{
# 323 "./lib/main/MAVLink/common/./mavlink_msg_gps_status.h"
 memcpy(gps_status, ((const char *)(&((msg)->payload64[0]))), 101);

}
# 671 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h" 1




typedef struct __mavlink_scaled_imu_t
{
 uint32_t time_boot_ms;
 int16_t xacc;
 int16_t yacc;
 int16_t zacc;
 int16_t xgyro;
 int16_t ygyro;
 int16_t zgyro;
 int16_t xmag;
 int16_t ymag;
 int16_t zmag;
} mavlink_scaled_imu_t;
# 62 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 80 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
 mavlink_scaled_imu_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 26;

    return mavlink_finalize_message(msg, system_id, component_id, 22, 170);



}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 140 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
 mavlink_scaled_imu_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 26;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 170);



}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_imu_t* scaled_imu)
{
 return mavlink_msg_scaled_imu_pack(system_id, component_id, msg, scaled_imu->time_boot_ms, scaled_imu->xacc, scaled_imu->yacc, scaled_imu->zacc, scaled_imu->xgyro, scaled_imu->ygyro, scaled_imu->zgyro, scaled_imu->xmag, scaled_imu->ymag, scaled_imu->zmag);
}
# 185 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
static inline uint16_t mavlink_msg_scaled_imu_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_imu_t* scaled_imu)
{
 return mavlink_msg_scaled_imu_pack_chan(system_id, component_id, chan, msg, scaled_imu->time_boot_ms, scaled_imu->xacc, scaled_imu->yacc, scaled_imu->zacc, scaled_imu->xgyro, scaled_imu->ygyro, scaled_imu->zgyro, scaled_imu->xmag, scaled_imu->ymag, scaled_imu->zmag);
}
# 308 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
static inline uint32_t mavlink_msg_scaled_imu_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int16_t mavlink_msg_scaled_imu_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_scaled_imu_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_scaled_imu_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_scaled_imu_get_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_scaled_imu_get_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_scaled_imu_get_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_scaled_imu_get_xmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_scaled_imu_get_ymag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_scaled_imu_get_zmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 20);
}







static inline void mavlink_msg_scaled_imu_decode(const mavlink_message_t* msg, mavlink_scaled_imu_t* scaled_imu)
{
# 423 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu.h"
 memcpy(scaled_imu, ((const char *)(&((msg)->payload64[0]))), 22);

}
# 672 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h" 1




typedef struct __mavlink_raw_imu_t
{
 uint64_t time_usec;
 int16_t xacc;
 int16_t yacc;
 int16_t zacc;
 int16_t xgyro;
 int16_t ygyro;
 int16_t zgyro;
 int16_t xmag;
 int16_t ymag;
 int16_t zmag;
} mavlink_raw_imu_t;
# 62 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 80 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
 mavlink_raw_imu_t packet;
 packet.time_usec = time_usec;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


 msg->msgid = 27;

    return mavlink_finalize_message(msg, system_id, component_id, 26, 144);



}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 140 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
 mavlink_raw_imu_t packet;
 packet.time_usec = time_usec;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


 msg->msgid = 27;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 26, 144);



}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_imu_t* raw_imu)
{
 return mavlink_msg_raw_imu_pack(system_id, component_id, msg, raw_imu->time_usec, raw_imu->xacc, raw_imu->yacc, raw_imu->zacc, raw_imu->xgyro, raw_imu->ygyro, raw_imu->zgyro, raw_imu->xmag, raw_imu->ymag, raw_imu->zmag);
}
# 185 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
static inline uint16_t mavlink_msg_raw_imu_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_raw_imu_t* raw_imu)
{
 return mavlink_msg_raw_imu_pack_chan(system_id, component_id, chan, msg, raw_imu->time_usec, raw_imu->xacc, raw_imu->yacc, raw_imu->zacc, raw_imu->xgyro, raw_imu->ygyro, raw_imu->zgyro, raw_imu->xmag, raw_imu->ymag, raw_imu->zmag);
}
# 308 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
static inline uint64_t mavlink_msg_raw_imu_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline int16_t mavlink_msg_raw_imu_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_raw_imu_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_raw_imu_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_raw_imu_get_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_raw_imu_get_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_raw_imu_get_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_raw_imu_get_xmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_raw_imu_get_ymag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 22);
}






static inline int16_t mavlink_msg_raw_imu_get_zmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 24);
}







static inline void mavlink_msg_raw_imu_decode(const mavlink_message_t* msg, mavlink_raw_imu_t* raw_imu)
{
# 423 "./lib/main/MAVLink/common/./mavlink_msg_raw_imu.h"
 memcpy(raw_imu, ((const char *)(&((msg)->payload64[0]))), 26);

}
# 673 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h" 1




typedef struct __mavlink_raw_pressure_t
{
 uint64_t time_usec;
 int16_t press_abs;
 int16_t press_diff1;
 int16_t press_diff2;
 int16_t temperature;
} mavlink_raw_pressure_t;
# 47 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, int16_t press_abs, int16_t press_diff1, int16_t press_diff2, int16_t temperature)
{
# 60 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
 mavlink_raw_pressure_t packet;
 packet.time_usec = time_usec;
 packet.press_abs = press_abs;
 packet.press_diff1 = press_diff1;
 packet.press_diff2 = press_diff2;
 packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


 msg->msgid = 28;

    return mavlink_finalize_message(msg, system_id, component_id, 16, 67);



}
# 91 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,int16_t press_abs,int16_t press_diff1,int16_t press_diff2,int16_t temperature)
{
# 105 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
 mavlink_raw_pressure_t packet;
 packet.time_usec = time_usec;
 packet.press_abs = press_abs;
 packet.press_diff1 = press_diff1;
 packet.press_diff2 = press_diff2;
 packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


 msg->msgid = 28;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 16, 67);



}
# 131 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_raw_pressure_t* raw_pressure)
{
 return mavlink_msg_raw_pressure_pack(system_id, component_id, msg, raw_pressure->time_usec, raw_pressure->press_abs, raw_pressure->press_diff1, raw_pressure->press_diff2, raw_pressure->temperature);
}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
static inline uint16_t mavlink_msg_raw_pressure_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_raw_pressure_t* raw_pressure)
{
 return mavlink_msg_raw_pressure_pack_chan(system_id, component_id, chan, msg, raw_pressure->time_usec, raw_pressure->press_abs, raw_pressure->press_diff1, raw_pressure->press_diff2, raw_pressure->temperature);
}
# 243 "./lib/main/MAVLink/common/./mavlink_msg_raw_pressure.h"
static inline uint64_t mavlink_msg_raw_pressure_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline int16_t mavlink_msg_raw_pressure_get_press_abs(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_raw_pressure_get_press_diff1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_raw_pressure_get_press_diff2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_raw_pressure_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 14);
}







static inline void mavlink_msg_raw_pressure_decode(const mavlink_message_t* msg, mavlink_raw_pressure_t* raw_pressure)
{







 memcpy(raw_pressure, ((const char *)(&((msg)->payload64[0]))), 16);

}
# 674 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h" 1




typedef struct __mavlink_scaled_pressure_t
{
 uint32_t time_boot_ms;
 float press_abs;
 float press_diff;
 int16_t temperature;
} mavlink_scaled_pressure_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 56 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
 mavlink_scaled_pressure_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.press_abs = press_abs;
 packet.press_diff = press_diff;
 packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 29;

    return mavlink_finalize_message(msg, system_id, component_id, 14, 115);



}
# 85 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,float press_abs,float press_diff,int16_t temperature)
{
# 98 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
 mavlink_scaled_pressure_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.press_abs = press_abs;
 packet.press_diff = press_diff;
 packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 29;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 115);



}
# 123 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_pressure_t* scaled_pressure)
{
 return mavlink_msg_scaled_pressure_pack(system_id, component_id, msg, scaled_pressure->time_boot_ms, scaled_pressure->press_abs, scaled_pressure->press_diff, scaled_pressure->temperature);
}
# 137 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
static inline uint16_t mavlink_msg_scaled_pressure_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_pressure_t* scaled_pressure)
{
 return mavlink_msg_scaled_pressure_pack_chan(system_id, component_id, chan, msg, scaled_pressure->time_boot_ms, scaled_pressure->press_abs, scaled_pressure->press_diff, scaled_pressure->temperature);
}
# 230 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure.h"
static inline uint32_t mavlink_msg_scaled_pressure_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_scaled_pressure_get_press_abs(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_scaled_pressure_get_press_diff(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline int16_t mavlink_msg_scaled_pressure_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}







static inline void mavlink_msg_scaled_pressure_decode(const mavlink_message_t* msg, mavlink_scaled_pressure_t* scaled_pressure)
{






 memcpy(scaled_pressure, ((const char *)(&((msg)->payload64[0]))), 14);

}
# 675 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h" 1




typedef struct __mavlink_attitude_t
{
 uint32_t time_boot_ms;
 float roll;
 float pitch;
 float yaw;
 float rollspeed;
 float pitchspeed;
 float yawspeed;
} mavlink_attitude_t;
# 53 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
# 68 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
 mavlink_attitude_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 30;

    return mavlink_finalize_message(msg, system_id, component_id, 28, 39);



}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,float roll,float pitch,float yaw,float rollspeed,float pitchspeed,float yawspeed)
{
# 119 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
 mavlink_attitude_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 30;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 39);



}
# 147 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_t* attitude)
{
 return mavlink_msg_attitude_pack(system_id, component_id, msg, attitude->time_boot_ms, attitude->roll, attitude->pitch, attitude->yaw, attitude->rollspeed, attitude->pitchspeed, attitude->yawspeed);
}
# 161 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
static inline uint16_t mavlink_msg_attitude_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_t* attitude)
{
 return mavlink_msg_attitude_pack_chan(system_id, component_id, chan, msg, attitude->time_boot_ms, attitude->roll, attitude->pitch, attitude->yaw, attitude->rollspeed, attitude->pitchspeed, attitude->yawspeed);
}
# 269 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
static inline uint32_t mavlink_msg_attitude_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_attitude_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_attitude_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_attitude_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_attitude_get_rollspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_attitude_get_pitchspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_attitude_get_yawspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_attitude_decode(const mavlink_message_t* msg, mavlink_attitude_t* attitude)
{
# 351 "./lib/main/MAVLink/common/./mavlink_msg_attitude.h"
 memcpy(attitude, ((const char *)(&((msg)->payload64[0]))), 28);

}
# 676 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h" 1




typedef struct __mavlink_attitude_quaternion_t
{
 uint32_t time_boot_ms;
 float q1;
 float q2;
 float q3;
 float q4;
 float rollspeed;
 float pitchspeed;
 float yawspeed;
} mavlink_attitude_quaternion_t;
# 56 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed)
{
# 72 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
 mavlink_attitude_quaternion_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.q1 = q1;
 packet.q2 = q2;
 packet.q3 = q3;
 packet.q4 = q4;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 31;

    return mavlink_finalize_message(msg, system_id, component_id, 32, 246);



}
# 109 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,float q1,float q2,float q3,float q4,float rollspeed,float pitchspeed,float yawspeed)
{
# 126 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
 mavlink_attitude_quaternion_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.q1 = q1;
 packet.q2 = q2;
 packet.q3 = q3;
 packet.q4 = q4;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 31;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 246);



}
# 155 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_quaternion_t* attitude_quaternion)
{
 return mavlink_msg_attitude_quaternion_pack(system_id, component_id, msg, attitude_quaternion->time_boot_ms, attitude_quaternion->q1, attitude_quaternion->q2, attitude_quaternion->q3, attitude_quaternion->q4, attitude_quaternion->rollspeed, attitude_quaternion->pitchspeed, attitude_quaternion->yawspeed);
}
# 169 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint16_t mavlink_msg_attitude_quaternion_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_quaternion_t* attitude_quaternion)
{
 return mavlink_msg_attitude_quaternion_pack_chan(system_id, component_id, chan, msg, attitude_quaternion->time_boot_ms, attitude_quaternion->q1, attitude_quaternion->q2, attitude_quaternion->q3, attitude_quaternion->q4, attitude_quaternion->rollspeed, attitude_quaternion->pitchspeed, attitude_quaternion->yawspeed);
}
# 282 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
static inline uint32_t mavlink_msg_attitude_quaternion_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_attitude_quaternion_get_q1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_attitude_quaternion_get_q2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_attitude_quaternion_get_q3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_attitude_quaternion_get_q4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_attitude_quaternion_get_rollspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_attitude_quaternion_get_pitchspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_attitude_quaternion_get_yawspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_attitude_quaternion_decode(const mavlink_message_t* msg, mavlink_attitude_quaternion_t* attitude_quaternion)
{
# 375 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion.h"
 memcpy(attitude_quaternion, ((const char *)(&((msg)->payload64[0]))), 32);

}
# 677 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h" 1




typedef struct __mavlink_local_position_ned_t
{
 uint32_t time_boot_ms;
 float x;
 float y;
 float z;
 float vx;
 float vy;
 float vz;
} mavlink_local_position_ned_t;
# 53 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
{
# 68 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
 mavlink_local_position_ned_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 32;

    return mavlink_finalize_message(msg, system_id, component_id, 28, 185);



}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,float x,float y,float z,float vx,float vy,float vz)
{
# 119 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
 mavlink_local_position_ned_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 32;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 185);



}
# 147 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_local_position_ned_t* local_position_ned)
{
 return mavlink_msg_local_position_ned_pack(system_id, component_id, msg, local_position_ned->time_boot_ms, local_position_ned->x, local_position_ned->y, local_position_ned->z, local_position_ned->vx, local_position_ned->vy, local_position_ned->vz);
}
# 161 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
static inline uint16_t mavlink_msg_local_position_ned_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_local_position_ned_t* local_position_ned)
{
 return mavlink_msg_local_position_ned_pack_chan(system_id, component_id, chan, msg, local_position_ned->time_boot_ms, local_position_ned->x, local_position_ned->y, local_position_ned->z, local_position_ned->vx, local_position_ned->vy, local_position_ned->vz);
}
# 269 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
static inline uint32_t mavlink_msg_local_position_ned_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_local_position_ned_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_local_position_ned_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_local_position_ned_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_local_position_ned_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_local_position_ned_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_local_position_ned_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_local_position_ned_decode(const mavlink_message_t* msg, mavlink_local_position_ned_t* local_position_ned)
{
# 351 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned.h"
 memcpy(local_position_ned, ((const char *)(&((msg)->payload64[0]))), 28);

}
# 678 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h" 1




typedef struct __mavlink_global_position_int_t
{
 uint32_t time_boot_ms;
 int32_t lat;
 int32_t lon;
 int32_t alt;
 int32_t relative_alt;
 int16_t vx;
 int16_t vy;
 int16_t vz;
 uint16_t hdg;
} mavlink_global_position_int_t;
# 59 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, int16_t vx, int16_t vy, int16_t vz, uint16_t hdg)
{
# 76 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
 mavlink_global_position_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.relative_alt = relative_alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.hdg = hdg;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 33;

    return mavlink_finalize_message(msg, system_id, component_id, 28, 104);



}
# 115 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,int32_t lat,int32_t lon,int32_t alt,int32_t relative_alt,int16_t vx,int16_t vy,int16_t vz,uint16_t hdg)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
 mavlink_global_position_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.relative_alt = relative_alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.hdg = hdg;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 33;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 104);



}
# 163 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_global_position_int_t* global_position_int)
{
 return mavlink_msg_global_position_int_pack(system_id, component_id, msg, global_position_int->time_boot_ms, global_position_int->lat, global_position_int->lon, global_position_int->alt, global_position_int->relative_alt, global_position_int->vx, global_position_int->vy, global_position_int->vz, global_position_int->hdg);
}
# 177 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
static inline uint16_t mavlink_msg_global_position_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_global_position_int_t* global_position_int)
{
 return mavlink_msg_global_position_int_pack_chan(system_id, component_id, chan, msg, global_position_int->time_boot_ms, global_position_int->lat, global_position_int->lon, global_position_int->alt, global_position_int->relative_alt, global_position_int->vx, global_position_int->vy, global_position_int->vz, global_position_int->hdg);
}
# 295 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
static inline uint32_t mavlink_msg_global_position_int_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int32_t mavlink_msg_global_position_int_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_global_position_int_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_global_position_int_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_global_position_int_get_relative_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline int16_t mavlink_msg_global_position_int_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_global_position_int_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 22);
}






static inline int16_t mavlink_msg_global_position_int_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 24);
}






static inline uint16_t mavlink_msg_global_position_int_get_hdg(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 26);
}







static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
# 399 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int.h"
 memcpy(global_position_int, ((const char *)(&((msg)->payload64[0]))), 28);

}
# 679 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h" 1




typedef struct __mavlink_rc_channels_scaled_t
{
 uint32_t time_boot_ms;
 int16_t chan1_scaled;
 int16_t chan2_scaled;
 int16_t chan3_scaled;
 int16_t chan4_scaled;
 int16_t chan5_scaled;
 int16_t chan6_scaled;
 int16_t chan7_scaled;
 int16_t chan8_scaled;
 uint8_t port;
 uint8_t rssi;
} mavlink_rc_channels_scaled_t;
# 65 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t port, int16_t chan1_scaled, int16_t chan2_scaled, int16_t chan3_scaled, int16_t chan4_scaled, int16_t chan5_scaled, int16_t chan6_scaled, int16_t chan7_scaled, int16_t chan8_scaled, uint8_t rssi)
{
# 84 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
 mavlink_rc_channels_scaled_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.chan1_scaled = chan1_scaled;
 packet.chan2_scaled = chan2_scaled;
 packet.chan3_scaled = chan3_scaled;
 packet.chan4_scaled = chan4_scaled;
 packet.chan5_scaled = chan5_scaled;
 packet.chan6_scaled = chan6_scaled;
 packet.chan7_scaled = chan7_scaled;
 packet.chan8_scaled = chan8_scaled;
 packet.port = port;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 34;

    return mavlink_finalize_message(msg, system_id, component_id, 22, 237);



}
# 127 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t port,int16_t chan1_scaled,int16_t chan2_scaled,int16_t chan3_scaled,int16_t chan4_scaled,int16_t chan5_scaled,int16_t chan6_scaled,int16_t chan7_scaled,int16_t chan8_scaled,uint8_t rssi)
{
# 147 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
 mavlink_rc_channels_scaled_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.chan1_scaled = chan1_scaled;
 packet.chan2_scaled = chan2_scaled;
 packet.chan3_scaled = chan3_scaled;
 packet.chan4_scaled = chan4_scaled;
 packet.chan5_scaled = chan5_scaled;
 packet.chan6_scaled = chan6_scaled;
 packet.chan7_scaled = chan7_scaled;
 packet.chan8_scaled = chan8_scaled;
 packet.port = port;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 34;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 237);



}
# 179 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_scaled_t* rc_channels_scaled)
{
 return mavlink_msg_rc_channels_scaled_pack(system_id, component_id, msg, rc_channels_scaled->time_boot_ms, rc_channels_scaled->port, rc_channels_scaled->chan1_scaled, rc_channels_scaled->chan2_scaled, rc_channels_scaled->chan3_scaled, rc_channels_scaled->chan4_scaled, rc_channels_scaled->chan5_scaled, rc_channels_scaled->chan6_scaled, rc_channels_scaled->chan7_scaled, rc_channels_scaled->chan8_scaled, rc_channels_scaled->rssi);
}
# 193 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint16_t mavlink_msg_rc_channels_scaled_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_scaled_t* rc_channels_scaled)
{
 return mavlink_msg_rc_channels_scaled_pack_chan(system_id, component_id, chan, msg, rc_channels_scaled->time_boot_ms, rc_channels_scaled->port, rc_channels_scaled->chan1_scaled, rc_channels_scaled->chan2_scaled, rc_channels_scaled->chan3_scaled, rc_channels_scaled->chan4_scaled, rc_channels_scaled->chan5_scaled, rc_channels_scaled->chan6_scaled, rc_channels_scaled->chan7_scaled, rc_channels_scaled->chan8_scaled, rc_channels_scaled->rssi);
}
# 321 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
static inline uint32_t mavlink_msg_rc_channels_scaled_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_rc_channels_scaled_get_port(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan1_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan2_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan3_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan4_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan5_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan6_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan7_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_rc_channels_scaled_get_chan8_scaled(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 18);
}






static inline uint8_t mavlink_msg_rc_channels_scaled_get_rssi(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[21];
}







static inline void mavlink_msg_rc_channels_scaled_decode(const mavlink_message_t* msg, mavlink_rc_channels_scaled_t* rc_channels_scaled)
{
# 447 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_scaled.h"
 memcpy(rc_channels_scaled, ((const char *)(&((msg)->payload64[0]))), 22);

}
# 680 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h" 1




typedef struct __mavlink_rc_channels_raw_t
{
 uint32_t time_boot_ms;
 uint16_t chan1_raw;
 uint16_t chan2_raw;
 uint16_t chan3_raw;
 uint16_t chan4_raw;
 uint16_t chan5_raw;
 uint16_t chan6_raw;
 uint16_t chan7_raw;
 uint16_t chan8_raw;
 uint8_t port;
 uint8_t rssi;
} mavlink_rc_channels_raw_t;
# 65 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
# 84 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
 mavlink_rc_channels_raw_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.port = port;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 35;

    return mavlink_finalize_message(msg, system_id, component_id, 22, 244);



}
# 127 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t port,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw,uint8_t rssi)
{
# 147 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
 mavlink_rc_channels_raw_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.port = port;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 35;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 244);



}
# 179 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_raw_t* rc_channels_raw)
{
 return mavlink_msg_rc_channels_raw_pack(system_id, component_id, msg, rc_channels_raw->time_boot_ms, rc_channels_raw->port, rc_channels_raw->chan1_raw, rc_channels_raw->chan2_raw, rc_channels_raw->chan3_raw, rc_channels_raw->chan4_raw, rc_channels_raw->chan5_raw, rc_channels_raw->chan6_raw, rc_channels_raw->chan7_raw, rc_channels_raw->chan8_raw, rc_channels_raw->rssi);
}
# 193 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint16_t mavlink_msg_rc_channels_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_raw_t* rc_channels_raw)
{
 return mavlink_msg_rc_channels_raw_pack_chan(system_id, component_id, chan, msg, rc_channels_raw->time_boot_ms, rc_channels_raw->port, rc_channels_raw->chan1_raw, rc_channels_raw->chan2_raw, rc_channels_raw->chan3_raw, rc_channels_raw->chan4_raw, rc_channels_raw->chan5_raw, rc_channels_raw->chan6_raw, rc_channels_raw->chan7_raw, rc_channels_raw->chan8_raw, rc_channels_raw->rssi);
}
# 321 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
static inline uint32_t mavlink_msg_rc_channels_raw_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_rc_channels_raw_get_port(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan1_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan2_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan3_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan4_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan5_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan6_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan7_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_rc_channels_raw_get_chan8_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint8_t mavlink_msg_rc_channels_raw_get_rssi(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[21];
}







static inline void mavlink_msg_rc_channels_raw_decode(const mavlink_message_t* msg, mavlink_rc_channels_raw_t* rc_channels_raw)
{
# 447 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_raw.h"
 memcpy(rc_channels_raw, ((const char *)(&((msg)->payload64[0]))), 22);

}
# 681 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h" 1




typedef struct __mavlink_servo_output_raw_t
{
 uint32_t time_usec;
 uint16_t servo1_raw;
 uint16_t servo2_raw;
 uint16_t servo3_raw;
 uint16_t servo4_raw;
 uint16_t servo5_raw;
 uint16_t servo6_raw;
 uint16_t servo7_raw;
 uint16_t servo8_raw;
 uint8_t port;
} mavlink_servo_output_raw_t;
# 62 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_usec, uint8_t port, uint16_t servo1_raw, uint16_t servo2_raw, uint16_t servo3_raw, uint16_t servo4_raw, uint16_t servo5_raw, uint16_t servo6_raw, uint16_t servo7_raw, uint16_t servo8_raw)
{
# 80 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
 mavlink_servo_output_raw_t packet;
 packet.time_usec = time_usec;
 packet.servo1_raw = servo1_raw;
 packet.servo2_raw = servo2_raw;
 packet.servo3_raw = servo3_raw;
 packet.servo4_raw = servo4_raw;
 packet.servo5_raw = servo5_raw;
 packet.servo6_raw = servo6_raw;
 packet.servo7_raw = servo7_raw;
 packet.servo8_raw = servo8_raw;
 packet.port = port;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 21);


 msg->msgid = 36;

    return mavlink_finalize_message(msg, system_id, component_id, 21, 222);



}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_usec,uint8_t port,uint16_t servo1_raw,uint16_t servo2_raw,uint16_t servo3_raw,uint16_t servo4_raw,uint16_t servo5_raw,uint16_t servo6_raw,uint16_t servo7_raw,uint16_t servo8_raw)
{
# 140 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
 mavlink_servo_output_raw_t packet;
 packet.time_usec = time_usec;
 packet.servo1_raw = servo1_raw;
 packet.servo2_raw = servo2_raw;
 packet.servo3_raw = servo3_raw;
 packet.servo4_raw = servo4_raw;
 packet.servo5_raw = servo5_raw;
 packet.servo6_raw = servo6_raw;
 packet.servo7_raw = servo7_raw;
 packet.servo8_raw = servo8_raw;
 packet.port = port;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 21);


 msg->msgid = 36;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 21, 222);



}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_servo_output_raw_t* servo_output_raw)
{
 return mavlink_msg_servo_output_raw_pack(system_id, component_id, msg, servo_output_raw->time_usec, servo_output_raw->port, servo_output_raw->servo1_raw, servo_output_raw->servo2_raw, servo_output_raw->servo3_raw, servo_output_raw->servo4_raw, servo_output_raw->servo5_raw, servo_output_raw->servo6_raw, servo_output_raw->servo7_raw, servo_output_raw->servo8_raw);
}
# 185 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
static inline uint16_t mavlink_msg_servo_output_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_servo_output_raw_t* servo_output_raw)
{
 return mavlink_msg_servo_output_raw_pack_chan(system_id, component_id, chan, msg, servo_output_raw->time_usec, servo_output_raw->port, servo_output_raw->servo1_raw, servo_output_raw->servo2_raw, servo_output_raw->servo3_raw, servo_output_raw->servo4_raw, servo_output_raw->servo5_raw, servo_output_raw->servo6_raw, servo_output_raw->servo7_raw, servo_output_raw->servo8_raw);
}
# 308 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
static inline uint32_t mavlink_msg_servo_output_raw_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_servo_output_raw_get_port(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo1_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo2_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo3_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo4_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo5_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo6_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo7_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_servo_output_raw_get_servo8_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 18);
}







static inline void mavlink_msg_servo_output_raw_decode(const mavlink_message_t* msg, mavlink_servo_output_raw_t* servo_output_raw)
{
# 423 "./lib/main/MAVLink/common/./mavlink_msg_servo_output_raw.h"
 memcpy(servo_output_raw, ((const char *)(&((msg)->payload64[0]))), 21);

}
# 682 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h" 1




typedef struct __mavlink_mission_request_partial_list_t
{
 int16_t start_index;
 int16_t end_index;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_mission_request_partial_list_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, int16_t start_index, int16_t end_index)
{
# 56 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
 mavlink_mission_request_partial_list_t packet;
 packet.start_index = start_index;
 packet.end_index = end_index;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 37;

    return mavlink_finalize_message(msg, system_id, component_id, 6, 212);



}
# 85 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,int16_t start_index,int16_t end_index)
{
# 98 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
 mavlink_mission_request_partial_list_t packet;
 packet.start_index = start_index;
 packet.end_index = end_index;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 37;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 212);



}
# 123 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_request_partial_list_t* mission_request_partial_list)
{
 return mavlink_msg_mission_request_partial_list_pack(system_id, component_id, msg, mission_request_partial_list->target_system, mission_request_partial_list->target_component, mission_request_partial_list->start_index, mission_request_partial_list->end_index);
}
# 137 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint16_t mavlink_msg_mission_request_partial_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_request_partial_list_t* mission_request_partial_list)
{
 return mavlink_msg_mission_request_partial_list_pack_chan(system_id, component_id, chan, msg, mission_request_partial_list->target_system, mission_request_partial_list->target_component, mission_request_partial_list->start_index, mission_request_partial_list->end_index);
}
# 230 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_partial_list.h"
static inline uint8_t mavlink_msg_mission_request_partial_list_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_mission_request_partial_list_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline int16_t mavlink_msg_mission_request_partial_list_get_start_index(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 0);
}






static inline int16_t mavlink_msg_mission_request_partial_list_get_end_index(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 2);
}







static inline void mavlink_msg_mission_request_partial_list_decode(const mavlink_message_t* msg, mavlink_mission_request_partial_list_t* mission_request_partial_list)
{






 memcpy(mission_request_partial_list, ((const char *)(&((msg)->payload64[0]))), 6);

}
# 683 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h" 1




typedef struct __mavlink_mission_write_partial_list_t
{
 int16_t start_index;
 int16_t end_index;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_mission_write_partial_list_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, int16_t start_index, int16_t end_index)
{
# 56 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
 mavlink_mission_write_partial_list_t packet;
 packet.start_index = start_index;
 packet.end_index = end_index;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 38;

    return mavlink_finalize_message(msg, system_id, component_id, 6, 9);



}
# 85 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,int16_t start_index,int16_t end_index)
{
# 98 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
 mavlink_mission_write_partial_list_t packet;
 packet.start_index = start_index;
 packet.end_index = end_index;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 38;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 9);



}
# 123 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_write_partial_list_t* mission_write_partial_list)
{
 return mavlink_msg_mission_write_partial_list_pack(system_id, component_id, msg, mission_write_partial_list->target_system, mission_write_partial_list->target_component, mission_write_partial_list->start_index, mission_write_partial_list->end_index);
}
# 137 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint16_t mavlink_msg_mission_write_partial_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_write_partial_list_t* mission_write_partial_list)
{
 return mavlink_msg_mission_write_partial_list_pack_chan(system_id, component_id, chan, msg, mission_write_partial_list->target_system, mission_write_partial_list->target_component, mission_write_partial_list->start_index, mission_write_partial_list->end_index);
}
# 230 "./lib/main/MAVLink/common/./mavlink_msg_mission_write_partial_list.h"
static inline uint8_t mavlink_msg_mission_write_partial_list_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_mission_write_partial_list_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline int16_t mavlink_msg_mission_write_partial_list_get_start_index(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 0);
}






static inline int16_t mavlink_msg_mission_write_partial_list_get_end_index(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 2);
}







static inline void mavlink_msg_mission_write_partial_list_decode(const mavlink_message_t* msg, mavlink_mission_write_partial_list_t* mission_write_partial_list)
{






 memcpy(mission_write_partial_list, ((const char *)(&((msg)->payload64[0]))), 6);

}
# 684 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h" 1




typedef struct __mavlink_mission_item_t
{
 float param1;
 float param2;
 float param3;
 float param4;
 float x;
 float y;
 float z;
 uint16_t seq;
 uint16_t command;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t frame;
 uint8_t current;
 uint8_t autocontinue;
} mavlink_mission_item_t;
# 74 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
{
# 96 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
 mavlink_mission_item_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.seq = seq;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;
 packet.current = current;
 packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 39;

    return mavlink_finalize_message(msg, system_id, component_id, 37, 254);



}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t seq,uint8_t frame,uint16_t command,uint8_t current,uint8_t autocontinue,float param1,float param2,float param3,float param4,float x,float y,float z)
{
# 168 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
 mavlink_mission_item_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.seq = seq;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;
 packet.current = current;
 packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 39;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 254);



}
# 203 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_item_t* mission_item)
{
 return mavlink_msg_mission_item_pack(system_id, component_id, msg, mission_item->target_system, mission_item->target_component, mission_item->seq, mission_item->frame, mission_item->command, mission_item->current, mission_item->autocontinue, mission_item->param1, mission_item->param2, mission_item->param3, mission_item->param4, mission_item->x, mission_item->y, mission_item->z);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
static inline uint16_t mavlink_msg_mission_item_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_item_t* mission_item)
{
 return mavlink_msg_mission_item_pack_chan(system_id, component_id, chan, msg, mission_item->target_system, mission_item->target_component, mission_item->seq, mission_item->frame, mission_item->command, mission_item->current, mission_item->autocontinue, mission_item->param1, mission_item->param2, mission_item->param3, mission_item->param4, mission_item->x, mission_item->y, mission_item->z);
}
# 360 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
static inline uint8_t mavlink_msg_mission_item_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_mission_item_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint16_t mavlink_msg_mission_item_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_mission_item_get_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline uint16_t mavlink_msg_mission_item_get_command(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_mission_item_get_current(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[35];
}






static inline uint8_t mavlink_msg_mission_item_get_autocontinue(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline float mavlink_msg_mission_item_get_param1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_mission_item_get_param2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_mission_item_get_param3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_mission_item_get_param4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_mission_item_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_mission_item_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_mission_item_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_mission_item_decode(const mavlink_message_t* msg, mavlink_mission_item_t* mission_item)
{
# 519 "./lib/main/MAVLink/common/./mavlink_msg_mission_item.h"
 memcpy(mission_item, ((const char *)(&((msg)->payload64[0]))), 37);

}
# 685 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h" 1




typedef struct __mavlink_mission_request_t
{
 uint16_t seq;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_mission_request_t;
# 41 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t seq)
{
# 52 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
 mavlink_mission_request_t packet;
 packet.seq = seq;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 40;

    return mavlink_finalize_message(msg, system_id, component_id, 4, 230);



}
# 79 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t seq)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
 mavlink_mission_request_t packet;
 packet.seq = seq;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 40;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 230);



}
# 115 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_request_t* mission_request)
{
 return mavlink_msg_mission_request_pack(system_id, component_id, msg, mission_request->target_system, mission_request->target_component, mission_request->seq);
}
# 129 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
static inline uint16_t mavlink_msg_mission_request_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_request_t* mission_request)
{
 return mavlink_msg_mission_request_pack_chan(system_id, component_id, chan, msg, mission_request->target_system, mission_request->target_component, mission_request->seq);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_mission_request.h"
static inline uint8_t mavlink_msg_mission_request_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_request_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_mission_request_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_request_decode(const mavlink_message_t* msg, mavlink_mission_request_t* mission_request)
{





 memcpy(mission_request, ((const char *)(&((msg)->payload64[0]))), 4);

}
# 686 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h" 1




typedef struct __mavlink_mission_set_current_t
{
 uint16_t seq;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_mission_set_current_t;
# 41 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t seq)
{
# 52 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
 mavlink_mission_set_current_t packet;
 packet.seq = seq;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 41;

    return mavlink_finalize_message(msg, system_id, component_id, 4, 28);



}
# 79 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t seq)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
 mavlink_mission_set_current_t packet;
 packet.seq = seq;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 41;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 28);



}
# 115 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_set_current_t* mission_set_current)
{
 return mavlink_msg_mission_set_current_pack(system_id, component_id, msg, mission_set_current->target_system, mission_set_current->target_component, mission_set_current->seq);
}
# 129 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
static inline uint16_t mavlink_msg_mission_set_current_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_set_current_t* mission_set_current)
{
 return mavlink_msg_mission_set_current_pack_chan(system_id, component_id, chan, msg, mission_set_current->target_system, mission_set_current->target_component, mission_set_current->seq);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_mission_set_current.h"
static inline uint8_t mavlink_msg_mission_set_current_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_set_current_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_mission_set_current_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_set_current_decode(const mavlink_message_t* msg, mavlink_mission_set_current_t* mission_set_current)
{





 memcpy(mission_set_current, ((const char *)(&((msg)->payload64[0]))), 4);

}
# 687 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_current.h" 1




typedef struct __mavlink_mission_current_t
{
 uint16_t seq;
} mavlink_mission_current_t;
# 35 "./lib/main/MAVLink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t seq)
{






 mavlink_mission_current_t packet;
 packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 42;

    return mavlink_finalize_message(msg, system_id, component_id, 2, 28);



}
# 67 "./lib/main/MAVLink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t seq)
{






 mavlink_mission_current_t packet;
 packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 42;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 28);



}
# 99 "./lib/main/MAVLink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_current_t* mission_current)
{
 return mavlink_msg_mission_current_pack(system_id, component_id, msg, mission_current->seq);
}
# 113 "./lib/main/MAVLink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_current_t* mission_current)
{
 return mavlink_msg_mission_current_pack_chan(system_id, component_id, chan, msg, mission_current->seq);
}
# 191 "./lib/main/MAVLink/common/./mavlink_msg_mission_current.h"
static inline uint16_t mavlink_msg_mission_current_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_current_decode(const mavlink_message_t* msg, mavlink_mission_current_t* mission_current)
{



 memcpy(mission_current, ((const char *)(&((msg)->payload64[0]))), 2);

}
# 688 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_list.h" 1




typedef struct __mavlink_mission_request_list_t
{
 uint8_t target_system;
 uint8_t target_component;
} mavlink_mission_request_list_t;
# 38 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component)
{







 mavlink_mission_request_list_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 43;

    return mavlink_finalize_message(msg, system_id, component_id, 2, 132);



}
# 73 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component)
{







 mavlink_mission_request_list_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 43;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 132);



}
# 107 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_request_list_t* mission_request_list)
{
 return mavlink_msg_mission_request_list_pack(system_id, component_id, msg, mission_request_list->target_system, mission_request_list->target_component);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_list.h"
static inline uint16_t mavlink_msg_mission_request_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_request_list_t* mission_request_list)
{
 return mavlink_msg_mission_request_list_pack_chan(system_id, component_id, chan, msg, mission_request_list->target_system, mission_request_list->target_component);
}
# 204 "./lib/main/MAVLink/common/./mavlink_msg_mission_request_list.h"
static inline uint8_t mavlink_msg_mission_request_list_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_mission_request_list_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_mission_request_list_decode(const mavlink_message_t* msg, mavlink_mission_request_list_t* mission_request_list)
{




 memcpy(mission_request_list, ((const char *)(&((msg)->payload64[0]))), 2);

}
# 689 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h" 1




typedef struct __mavlink_mission_count_t
{
 uint16_t count;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_mission_count_t;
# 41 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t count)
{
# 52 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
 mavlink_mission_count_t packet;
 packet.count = count;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 44;

    return mavlink_finalize_message(msg, system_id, component_id, 4, 221);



}
# 79 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t count)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
 mavlink_mission_count_t packet;
 packet.count = count;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 44;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 221);



}
# 115 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_count_t* mission_count)
{
 return mavlink_msg_mission_count_pack(system_id, component_id, msg, mission_count->target_system, mission_count->target_component, mission_count->count);
}
# 129 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
static inline uint16_t mavlink_msg_mission_count_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_count_t* mission_count)
{
 return mavlink_msg_mission_count_pack_chan(system_id, component_id, chan, msg, mission_count->target_system, mission_count->target_component, mission_count->count);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_mission_count.h"
static inline uint8_t mavlink_msg_mission_count_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_mission_count_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_mission_count_get_count(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_count_decode(const mavlink_message_t* msg, mavlink_mission_count_t* mission_count)
{





 memcpy(mission_count, ((const char *)(&((msg)->payload64[0]))), 4);

}
# 690 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_clear_all.h" 1




typedef struct __mavlink_mission_clear_all_t
{
 uint8_t target_system;
 uint8_t target_component;
} mavlink_mission_clear_all_t;
# 38 "./lib/main/MAVLink/common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component)
{







 mavlink_mission_clear_all_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 45;

    return mavlink_finalize_message(msg, system_id, component_id, 2, 232);



}
# 73 "./lib/main/MAVLink/common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component)
{







 mavlink_mission_clear_all_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 45;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 232);



}
# 107 "./lib/main/MAVLink/common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_clear_all_t* mission_clear_all)
{
 return mavlink_msg_mission_clear_all_pack(system_id, component_id, msg, mission_clear_all->target_system, mission_clear_all->target_component);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_mission_clear_all.h"
static inline uint16_t mavlink_msg_mission_clear_all_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_clear_all_t* mission_clear_all)
{
 return mavlink_msg_mission_clear_all_pack_chan(system_id, component_id, chan, msg, mission_clear_all->target_system, mission_clear_all->target_component);
}
# 204 "./lib/main/MAVLink/common/./mavlink_msg_mission_clear_all.h"
static inline uint8_t mavlink_msg_mission_clear_all_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_mission_clear_all_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_mission_clear_all_decode(const mavlink_message_t* msg, mavlink_mission_clear_all_t* mission_clear_all)
{




 memcpy(mission_clear_all, ((const char *)(&((msg)->payload64[0]))), 2);

}
# 691 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_reached.h" 1




typedef struct __mavlink_mission_item_reached_t
{
 uint16_t seq;
} mavlink_mission_item_reached_t;
# 35 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t seq)
{






 mavlink_mission_item_reached_t packet;
 packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 46;

    return mavlink_finalize_message(msg, system_id, component_id, 2, 11);



}
# 67 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t seq)
{






 mavlink_mission_item_reached_t packet;
 packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 46;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 11);



}
# 99 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_item_reached_t* mission_item_reached)
{
 return mavlink_msg_mission_item_reached_pack(system_id, component_id, msg, mission_item_reached->seq);
}
# 113 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_item_reached_t* mission_item_reached)
{
 return mavlink_msg_mission_item_reached_pack_chan(system_id, component_id, chan, msg, mission_item_reached->seq);
}
# 191 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_reached.h"
static inline uint16_t mavlink_msg_mission_item_reached_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}







static inline void mavlink_msg_mission_item_reached_decode(const mavlink_message_t* msg, mavlink_mission_item_reached_t* mission_item_reached)
{



 memcpy(mission_item_reached, ((const char *)(&((msg)->payload64[0]))), 2);

}
# 692 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h" 1




typedef struct __mavlink_mission_ack_t
{
 uint8_t target_system;
 uint8_t target_component;
 uint8_t type;
} mavlink_mission_ack_t;
# 41 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint8_t type)
{
# 52 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
 mavlink_mission_ack_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.type = type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


 msg->msgid = 47;

    return mavlink_finalize_message(msg, system_id, component_id, 3, 153);



}
# 79 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint8_t type)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
 mavlink_mission_ack_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.type = type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


 msg->msgid = 47;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 153);



}
# 115 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_ack_t* mission_ack)
{
 return mavlink_msg_mission_ack_pack(system_id, component_id, msg, mission_ack->target_system, mission_ack->target_component, mission_ack->type);
}
# 129 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
static inline uint16_t mavlink_msg_mission_ack_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_ack_t* mission_ack)
{
 return mavlink_msg_mission_ack_pack_chan(system_id, component_id, chan, msg, mission_ack->target_system, mission_ack->target_component, mission_ack->type);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_mission_ack.h"
static inline uint8_t mavlink_msg_mission_ack_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_mission_ack_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_mission_ack_get_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_mission_ack_decode(const mavlink_message_t* msg, mavlink_mission_ack_t* mission_ack)
{





 memcpy(mission_ack, ((const char *)(&((msg)->payload64[0]))), 3);

}
# 693 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h" 1




typedef struct __mavlink_set_gps_global_origin_t
{
 int32_t latitude;
 int32_t longitude;
 int32_t altitude;
 uint8_t target_system;
} mavlink_set_gps_global_origin_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, int32_t latitude, int32_t longitude, int32_t altitude)
{
# 56 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
 mavlink_set_gps_global_origin_t packet;
 packet.latitude = latitude;
 packet.longitude = longitude;
 packet.altitude = altitude;
 packet.target_system = target_system;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


 msg->msgid = 48;

    return mavlink_finalize_message(msg, system_id, component_id, 13, 41);



}
# 85 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,int32_t latitude,int32_t longitude,int32_t altitude)
{
# 98 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
 mavlink_set_gps_global_origin_t packet;
 packet.latitude = latitude;
 packet.longitude = longitude;
 packet.altitude = altitude;
 packet.target_system = target_system;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


 msg->msgid = 48;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 13, 41);



}
# 123 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_gps_global_origin_t* set_gps_global_origin)
{
 return mavlink_msg_set_gps_global_origin_pack(system_id, component_id, msg, set_gps_global_origin->target_system, set_gps_global_origin->latitude, set_gps_global_origin->longitude, set_gps_global_origin->altitude);
}
# 137 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint16_t mavlink_msg_set_gps_global_origin_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_gps_global_origin_t* set_gps_global_origin)
{
 return mavlink_msg_set_gps_global_origin_pack_chan(system_id, component_id, chan, msg, set_gps_global_origin->target_system, set_gps_global_origin->latitude, set_gps_global_origin->longitude, set_gps_global_origin->altitude);
}
# 230 "./lib/main/MAVLink/common/./mavlink_msg_set_gps_global_origin.h"
static inline uint8_t mavlink_msg_set_gps_global_origin_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline int32_t mavlink_msg_set_gps_global_origin_get_latitude(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_set_gps_global_origin_get_longitude(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_set_gps_global_origin_get_altitude(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}







static inline void mavlink_msg_set_gps_global_origin_decode(const mavlink_message_t* msg, mavlink_set_gps_global_origin_t* set_gps_global_origin)
{






 memcpy(set_gps_global_origin, ((const char *)(&((msg)->payload64[0]))), 13);

}
# 694 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h" 1




typedef struct __mavlink_gps_global_origin_t
{
 int32_t latitude;
 int32_t longitude;
 int32_t altitude;
} mavlink_gps_global_origin_t;
# 41 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             int32_t latitude, int32_t longitude, int32_t altitude)
{
# 52 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
 mavlink_gps_global_origin_t packet;
 packet.latitude = latitude;
 packet.longitude = longitude;
 packet.altitude = altitude;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 49;

    return mavlink_finalize_message(msg, system_id, component_id, 12, 39);



}
# 79 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 int32_t latitude,int32_t longitude,int32_t altitude)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
 mavlink_gps_global_origin_t packet;
 packet.latitude = latitude;
 packet.longitude = longitude;
 packet.altitude = altitude;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 49;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 39);



}
# 115 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_global_origin_t* gps_global_origin)
{
 return mavlink_msg_gps_global_origin_pack(system_id, component_id, msg, gps_global_origin->latitude, gps_global_origin->longitude, gps_global_origin->altitude);
}
# 129 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
static inline uint16_t mavlink_msg_gps_global_origin_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_global_origin_t* gps_global_origin)
{
 return mavlink_msg_gps_global_origin_pack_chan(system_id, component_id, chan, msg, gps_global_origin->latitude, gps_global_origin->longitude, gps_global_origin->altitude);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_gps_global_origin.h"
static inline int32_t mavlink_msg_gps_global_origin_get_latitude(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_gps_global_origin_get_longitude(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_gps_global_origin_get_altitude(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}







static inline void mavlink_msg_gps_global_origin_decode(const mavlink_message_t* msg, mavlink_gps_global_origin_t* gps_global_origin)
{





 memcpy(gps_global_origin, ((const char *)(&((msg)->payload64[0]))), 12);

}
# 695 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h" 1




typedef struct __mavlink_param_map_rc_t
{
 float param_value0;
 float scale;
 float param_value_min;
 float param_value_max;
 int16_t param_index;
 uint8_t target_system;
 uint8_t target_component;
 char param_id[16];
 uint8_t parameter_rc_channel_index;
} mavlink_param_map_rc_t;
# 59 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, const char *param_id, int16_t param_index, uint8_t parameter_rc_channel_index, float param_value0, float scale, float param_value_min, float param_value_max)
{
# 75 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
 mavlink_param_map_rc_t packet;
 packet.param_value0 = param_value0;
 packet.scale = scale;
 packet.param_value_min = param_value_min;
 packet.param_value_max = param_value_max;
 packet.param_index = param_index;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.parameter_rc_channel_index = parameter_rc_channel_index;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 50;

    return mavlink_finalize_message(msg, system_id, component_id, 37, 78);



}
# 113 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,const char *param_id,int16_t param_index,uint8_t parameter_rc_channel_index,float param_value0,float scale,float param_value_min,float param_value_max)
{
# 130 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
 mavlink_param_map_rc_t packet;
 packet.param_value0 = param_value0;
 packet.scale = scale;
 packet.param_value_min = param_value_min;
 packet.param_value_max = param_value_max;
 packet.param_index = param_index;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.parameter_rc_channel_index = parameter_rc_channel_index;
 mav_array_memcpy(packet.param_id, param_id, sizeof(char)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 50;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 78);



}
# 159 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_param_map_rc_t* param_map_rc)
{
 return mavlink_msg_param_map_rc_pack(system_id, component_id, msg, param_map_rc->target_system, param_map_rc->target_component, param_map_rc->param_id, param_map_rc->param_index, param_map_rc->parameter_rc_channel_index, param_map_rc->param_value0, param_map_rc->scale, param_map_rc->param_value_min, param_map_rc->param_value_max);
}
# 173 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
static inline uint16_t mavlink_msg_param_map_rc_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_param_map_rc_t* param_map_rc)
{
 return mavlink_msg_param_map_rc_pack_chan(system_id, component_id, chan, msg, param_map_rc->target_system, param_map_rc->target_component, param_map_rc->param_id, param_map_rc->param_index, param_map_rc->parameter_rc_channel_index, param_map_rc->param_value0, param_map_rc->scale, param_map_rc->param_value_min, param_map_rc->param_value_max);
}
# 287 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
static inline uint8_t mavlink_msg_param_map_rc_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[18];
}






static inline uint8_t mavlink_msg_param_map_rc_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[19];
}






static inline uint16_t mavlink_msg_param_map_rc_get_param_id(const mavlink_message_t* msg, char *param_id)
{
 return _MAV_RETURN_char_array(msg, param_id, 16, 20);
}






static inline int16_t mavlink_msg_param_map_rc_get_param_index(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline uint8_t mavlink_msg_param_map_rc_get_parameter_rc_channel_index(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline float mavlink_msg_param_map_rc_get_param_value0(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_param_map_rc_get_scale(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_param_map_rc_get_param_value_min(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_param_map_rc_get_param_value_max(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}







static inline void mavlink_msg_param_map_rc_decode(const mavlink_message_t* msg, mavlink_param_map_rc_t* param_map_rc)
{
# 391 "./lib/main/MAVLink/common/./mavlink_msg_param_map_rc.h"
 memcpy(param_map_rc, ((const char *)(&((msg)->payload64[0]))), 37);

}
# 696 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h" 1




typedef struct __mavlink_safety_set_allowed_area_t
{
 float p1x;
 float p1y;
 float p1z;
 float p2x;
 float p2y;
 float p2z;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t frame;
} mavlink_safety_set_allowed_area_t;
# 59 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint8_t frame, float p1x, float p1y, float p1z, float p2x, float p2y, float p2z)
{
# 76 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
 mavlink_safety_set_allowed_area_t packet;
 packet.p1x = p1x;
 packet.p1y = p1y;
 packet.p1z = p1z;
 packet.p2x = p2x;
 packet.p2y = p2y;
 packet.p2z = p2z;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 27);


 msg->msgid = 54;

    return mavlink_finalize_message(msg, system_id, component_id, 27, 15);



}
# 115 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint8_t frame,float p1x,float p1y,float p1z,float p2x,float p2y,float p2z)
{
# 133 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
 mavlink_safety_set_allowed_area_t packet;
 packet.p1x = p1x;
 packet.p1y = p1y;
 packet.p1z = p1z;
 packet.p2x = p2x;
 packet.p2y = p2y;
 packet.p2z = p2z;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 27);


 msg->msgid = 54;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 27, 15);



}
# 163 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_safety_set_allowed_area_t* safety_set_allowed_area)
{
 return mavlink_msg_safety_set_allowed_area_pack(system_id, component_id, msg, safety_set_allowed_area->target_system, safety_set_allowed_area->target_component, safety_set_allowed_area->frame, safety_set_allowed_area->p1x, safety_set_allowed_area->p1y, safety_set_allowed_area->p1z, safety_set_allowed_area->p2x, safety_set_allowed_area->p2y, safety_set_allowed_area->p2z);
}
# 177 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint16_t mavlink_msg_safety_set_allowed_area_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_safety_set_allowed_area_t* safety_set_allowed_area)
{
 return mavlink_msg_safety_set_allowed_area_pack_chan(system_id, component_id, chan, msg, safety_set_allowed_area->target_system, safety_set_allowed_area->target_component, safety_set_allowed_area->frame, safety_set_allowed_area->p1x, safety_set_allowed_area->p1y, safety_set_allowed_area->p1z, safety_set_allowed_area->p2x, safety_set_allowed_area->p2y, safety_set_allowed_area->p2z);
}
# 295 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
static inline uint8_t mavlink_msg_safety_set_allowed_area_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline uint8_t mavlink_msg_safety_set_allowed_area_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[25];
}






static inline uint8_t mavlink_msg_safety_set_allowed_area_get_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[26];
}






static inline float mavlink_msg_safety_set_allowed_area_get_p1x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p1y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p1z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p2x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p2y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_safety_set_allowed_area_get_p2z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}







static inline void mavlink_msg_safety_set_allowed_area_decode(const mavlink_message_t* msg, mavlink_safety_set_allowed_area_t* safety_set_allowed_area)
{
# 399 "./lib/main/MAVLink/common/./mavlink_msg_safety_set_allowed_area.h"
 memcpy(safety_set_allowed_area, ((const char *)(&((msg)->payload64[0]))), 27);

}
# 697 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h" 1




typedef struct __mavlink_safety_allowed_area_t
{
 float p1x;
 float p1y;
 float p1z;
 float p2x;
 float p2y;
 float p2z;
 uint8_t frame;
} mavlink_safety_allowed_area_t;
# 53 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t frame, float p1x, float p1y, float p1z, float p2x, float p2y, float p2z)
{
# 68 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
 mavlink_safety_allowed_area_t packet;
 packet.p1x = p1x;
 packet.p1y = p1y;
 packet.p1z = p1z;
 packet.p2x = p2x;
 packet.p2y = p2y;
 packet.p2z = p2z;
 packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


 msg->msgid = 55;

    return mavlink_finalize_message(msg, system_id, component_id, 25, 3);



}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t frame,float p1x,float p1y,float p1z,float p2x,float p2y,float p2z)
{
# 119 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
 mavlink_safety_allowed_area_t packet;
 packet.p1x = p1x;
 packet.p1y = p1y;
 packet.p1z = p1z;
 packet.p2x = p2x;
 packet.p2y = p2y;
 packet.p2z = p2z;
 packet.frame = frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 25);


 msg->msgid = 55;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 25, 3);



}
# 147 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_safety_allowed_area_t* safety_allowed_area)
{
 return mavlink_msg_safety_allowed_area_pack(system_id, component_id, msg, safety_allowed_area->frame, safety_allowed_area->p1x, safety_allowed_area->p1y, safety_allowed_area->p1z, safety_allowed_area->p2x, safety_allowed_area->p2y, safety_allowed_area->p2z);
}
# 161 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint16_t mavlink_msg_safety_allowed_area_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_safety_allowed_area_t* safety_allowed_area)
{
 return mavlink_msg_safety_allowed_area_pack_chan(system_id, component_id, chan, msg, safety_allowed_area->frame, safety_allowed_area->p1x, safety_allowed_area->p1y, safety_allowed_area->p1z, safety_allowed_area->p2x, safety_allowed_area->p2y, safety_allowed_area->p2z);
}
# 269 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
static inline uint8_t mavlink_msg_safety_allowed_area_get_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline float mavlink_msg_safety_allowed_area_get_p1x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_safety_allowed_area_get_p1y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_safety_allowed_area_get_p1z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_safety_allowed_area_get_p2x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_safety_allowed_area_get_p2y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_safety_allowed_area_get_p2z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}







static inline void mavlink_msg_safety_allowed_area_decode(const mavlink_message_t* msg, mavlink_safety_allowed_area_t* safety_allowed_area)
{
# 351 "./lib/main/MAVLink/common/./mavlink_msg_safety_allowed_area.h"
 memcpy(safety_allowed_area, ((const char *)(&((msg)->payload64[0]))), 25);

}
# 698 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h" 1




typedef struct __mavlink_attitude_quaternion_cov_t
{
 uint32_t time_boot_ms;
 float q[4];
 float rollspeed;
 float pitchspeed;
 float yawspeed;
 float covariance[9];
} mavlink_attitude_quaternion_cov_t;
# 51 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, const float *q, float rollspeed, float pitchspeed, float yawspeed, const float *covariance)
{
# 64 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
 mavlink_attitude_quaternion_cov_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
 mav_array_memcpy(packet.covariance, covariance, sizeof(float)*9);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 68);


 msg->msgid = 61;

    return mavlink_finalize_message(msg, system_id, component_id, 68, 153);



}
# 96 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,const float *q,float rollspeed,float pitchspeed,float yawspeed,const float *covariance)
{
# 110 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
 mavlink_attitude_quaternion_cov_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
 mav_array_memcpy(packet.covariance, covariance, sizeof(float)*9);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 68);


 msg->msgid = 61;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 68, 153);



}
# 136 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_quaternion_cov_t* attitude_quaternion_cov)
{
 return mavlink_msg_attitude_quaternion_cov_pack(system_id, component_id, msg, attitude_quaternion_cov->time_boot_ms, attitude_quaternion_cov->q, attitude_quaternion_cov->rollspeed, attitude_quaternion_cov->pitchspeed, attitude_quaternion_cov->yawspeed, attitude_quaternion_cov->covariance);
}
# 150 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint16_t mavlink_msg_attitude_quaternion_cov_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_quaternion_cov_t* attitude_quaternion_cov)
{
 return mavlink_msg_attitude_quaternion_cov_pack_chan(system_id, component_id, chan, msg, attitude_quaternion_cov->time_boot_ms, attitude_quaternion_cov->q, attitude_quaternion_cov->rollspeed, attitude_quaternion_cov->pitchspeed, attitude_quaternion_cov->yawspeed, attitude_quaternion_cov->covariance);
}
# 249 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
static inline uint32_t mavlink_msg_attitude_quaternion_cov_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_attitude_quaternion_cov_get_q(const mavlink_message_t* msg, float *q)
{
 return _MAV_RETURN_float_array(msg, q, 4, 4);
}






static inline float mavlink_msg_attitude_quaternion_cov_get_rollspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_attitude_quaternion_cov_get_pitchspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_attitude_quaternion_cov_get_yawspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline uint16_t mavlink_msg_attitude_quaternion_cov_get_covariance(const mavlink_message_t* msg, float *covariance)
{
 return _MAV_RETURN_float_array(msg, covariance, 9, 32);
}







static inline void mavlink_msg_attitude_quaternion_cov_decode(const mavlink_message_t* msg, mavlink_attitude_quaternion_cov_t* attitude_quaternion_cov)
{
# 320 "./lib/main/MAVLink/common/./mavlink_msg_attitude_quaternion_cov.h"
 memcpy(attitude_quaternion_cov, ((const char *)(&((msg)->payload64[0]))), 68);

}
# 699 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h" 1




typedef struct __mavlink_nav_controller_output_t
{
 float nav_roll;
 float nav_pitch;
 float alt_error;
 float aspd_error;
 float xtrack_error;
 int16_t nav_bearing;
 int16_t target_bearing;
 uint16_t wp_dist;
} mavlink_nav_controller_output_t;
# 56 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             float nav_roll, float nav_pitch, int16_t nav_bearing, int16_t target_bearing, uint16_t wp_dist, float alt_error, float aspd_error, float xtrack_error)
{
# 72 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
 mavlink_nav_controller_output_t packet;
 packet.nav_roll = nav_roll;
 packet.nav_pitch = nav_pitch;
 packet.alt_error = alt_error;
 packet.aspd_error = aspd_error;
 packet.xtrack_error = xtrack_error;
 packet.nav_bearing = nav_bearing;
 packet.target_bearing = target_bearing;
 packet.wp_dist = wp_dist;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


 msg->msgid = 62;

    return mavlink_finalize_message(msg, system_id, component_id, 26, 183);



}
# 109 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 float nav_roll,float nav_pitch,int16_t nav_bearing,int16_t target_bearing,uint16_t wp_dist,float alt_error,float aspd_error,float xtrack_error)
{
# 126 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
 mavlink_nav_controller_output_t packet;
 packet.nav_roll = nav_roll;
 packet.nav_pitch = nav_pitch;
 packet.alt_error = alt_error;
 packet.aspd_error = aspd_error;
 packet.xtrack_error = xtrack_error;
 packet.nav_bearing = nav_bearing;
 packet.target_bearing = target_bearing;
 packet.wp_dist = wp_dist;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


 msg->msgid = 62;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 26, 183);



}
# 155 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_nav_controller_output_t* nav_controller_output)
{
 return mavlink_msg_nav_controller_output_pack(system_id, component_id, msg, nav_controller_output->nav_roll, nav_controller_output->nav_pitch, nav_controller_output->nav_bearing, nav_controller_output->target_bearing, nav_controller_output->wp_dist, nav_controller_output->alt_error, nav_controller_output->aspd_error, nav_controller_output->xtrack_error);
}
# 169 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
static inline uint16_t mavlink_msg_nav_controller_output_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_nav_controller_output_t* nav_controller_output)
{
 return mavlink_msg_nav_controller_output_pack_chan(system_id, component_id, chan, msg, nav_controller_output->nav_roll, nav_controller_output->nav_pitch, nav_controller_output->nav_bearing, nav_controller_output->target_bearing, nav_controller_output->wp_dist, nav_controller_output->alt_error, nav_controller_output->aspd_error, nav_controller_output->xtrack_error);
}
# 282 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
static inline float mavlink_msg_nav_controller_output_get_nav_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_nav_controller_output_get_nav_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline int16_t mavlink_msg_nav_controller_output_get_nav_bearing(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_nav_controller_output_get_target_bearing(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 22);
}






static inline uint16_t mavlink_msg_nav_controller_output_get_wp_dist(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 24);
}






static inline float mavlink_msg_nav_controller_output_get_alt_error(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_nav_controller_output_get_aspd_error(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_nav_controller_output_get_xtrack_error(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_nav_controller_output_decode(const mavlink_message_t* msg, mavlink_nav_controller_output_t* nav_controller_output)
{
# 375 "./lib/main/MAVLink/common/./mavlink_msg_nav_controller_output.h"
 memcpy(nav_controller_output, ((const char *)(&((msg)->payload64[0]))), 26);

}
# 700 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h" 1




typedef struct __mavlink_global_position_int_cov_t
{
 uint64_t time_utc;
 uint32_t time_boot_ms;
 int32_t lat;
 int32_t lon;
 int32_t alt;
 int32_t relative_alt;
 float vx;
 float vy;
 float vz;
 float covariance[36];
 uint8_t estimator_type;
} mavlink_global_position_int_cov_t;
# 65 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint64_t time_utc, uint8_t estimator_type, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, float vx, float vy, float vz, const float *covariance)
{
# 83 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
 mavlink_global_position_int_cov_t packet;
 packet.time_utc = time_utc;
 packet.time_boot_ms = time_boot_ms;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.relative_alt = relative_alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.estimator_type = estimator_type;
 mav_array_memcpy(packet.covariance, covariance, sizeof(float)*36);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 185);


 msg->msgid = 63;

    return mavlink_finalize_message(msg, system_id, component_id, 185, 51);



}
# 125 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint64_t time_utc,uint8_t estimator_type,int32_t lat,int32_t lon,int32_t alt,int32_t relative_alt,float vx,float vy,float vz,const float *covariance)
{
# 144 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
 mavlink_global_position_int_cov_t packet;
 packet.time_utc = time_utc;
 packet.time_boot_ms = time_boot_ms;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.relative_alt = relative_alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.estimator_type = estimator_type;
 mav_array_memcpy(packet.covariance, covariance, sizeof(float)*36);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 185);


 msg->msgid = 63;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 185, 51);



}
# 175 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_global_position_int_cov_t* global_position_int_cov)
{
 return mavlink_msg_global_position_int_cov_pack(system_id, component_id, msg, global_position_int_cov->time_boot_ms, global_position_int_cov->time_utc, global_position_int_cov->estimator_type, global_position_int_cov->lat, global_position_int_cov->lon, global_position_int_cov->alt, global_position_int_cov->relative_alt, global_position_int_cov->vx, global_position_int_cov->vy, global_position_int_cov->vz, global_position_int_cov->covariance);
}
# 189 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint16_t mavlink_msg_global_position_int_cov_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_global_position_int_cov_t* global_position_int_cov)
{
 return mavlink_msg_global_position_int_cov_pack_chan(system_id, component_id, chan, msg, global_position_int_cov->time_boot_ms, global_position_int_cov->time_utc, global_position_int_cov->estimator_type, global_position_int_cov->lat, global_position_int_cov->lon, global_position_int_cov->alt, global_position_int_cov->relative_alt, global_position_int_cov->vx, global_position_int_cov->vy, global_position_int_cov->vz, global_position_int_cov->covariance);
}
# 313 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
static inline uint32_t mavlink_msg_global_position_int_cov_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint64_t mavlink_msg_global_position_int_cov_get_time_utc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_global_position_int_cov_get_estimator_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[184];
}






static inline int32_t mavlink_msg_global_position_int_cov_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_global_position_int_cov_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_global_position_int_cov_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 20);
}






static inline int32_t mavlink_msg_global_position_int_cov_get_relative_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 24);
}






static inline float mavlink_msg_global_position_int_cov_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_global_position_int_cov_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_global_position_int_cov_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline uint16_t mavlink_msg_global_position_int_cov_get_covariance(const mavlink_message_t* msg, float *covariance)
{
 return _MAV_RETURN_float_array(msg, covariance, 36, 40);
}







static inline void mavlink_msg_global_position_int_cov_decode(const mavlink_message_t* msg, mavlink_global_position_int_cov_t* global_position_int_cov)
{
# 439 "./lib/main/MAVLink/common/./mavlink_msg_global_position_int_cov.h"
 memcpy(global_position_int_cov, ((const char *)(&((msg)->payload64[0]))), 185);

}
# 701 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h" 1




typedef struct __mavlink_local_position_ned_cov_t
{
 uint64_t time_utc;
 uint32_t time_boot_ms;
 float x;
 float y;
 float z;
 float vx;
 float vy;
 float vz;
 float ax;
 float ay;
 float az;
 float covariance[45];
 uint8_t estimator_type;
} mavlink_local_position_ned_cov_t;
# 71 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint64_t time_utc, uint8_t estimator_type, float x, float y, float z, float vx, float vy, float vz, float ax, float ay, float az, const float *covariance)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
 mavlink_local_position_ned_cov_t packet;
 packet.time_utc = time_utc;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.ax = ax;
 packet.ay = ay;
 packet.az = az;
 packet.estimator_type = estimator_type;
 mav_array_memcpy(packet.covariance, covariance, sizeof(float)*45);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 229);


 msg->msgid = 64;

    return mavlink_finalize_message(msg, system_id, component_id, 229, 59);



}
# 137 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint64_t time_utc,uint8_t estimator_type,float x,float y,float z,float vx,float vy,float vz,float ax,float ay,float az,const float *covariance)
{
# 158 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
 mavlink_local_position_ned_cov_t packet;
 packet.time_utc = time_utc;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.ax = ax;
 packet.ay = ay;
 packet.az = az;
 packet.estimator_type = estimator_type;
 mav_array_memcpy(packet.covariance, covariance, sizeof(float)*45);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 229);


 msg->msgid = 64;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 229, 59);



}
# 191 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_local_position_ned_cov_t* local_position_ned_cov)
{
 return mavlink_msg_local_position_ned_cov_pack(system_id, component_id, msg, local_position_ned_cov->time_boot_ms, local_position_ned_cov->time_utc, local_position_ned_cov->estimator_type, local_position_ned_cov->x, local_position_ned_cov->y, local_position_ned_cov->z, local_position_ned_cov->vx, local_position_ned_cov->vy, local_position_ned_cov->vz, local_position_ned_cov->ax, local_position_ned_cov->ay, local_position_ned_cov->az, local_position_ned_cov->covariance);
}
# 205 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint16_t mavlink_msg_local_position_ned_cov_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_local_position_ned_cov_t* local_position_ned_cov)
{
 return mavlink_msg_local_position_ned_cov_pack_chan(system_id, component_id, chan, msg, local_position_ned_cov->time_boot_ms, local_position_ned_cov->time_utc, local_position_ned_cov->estimator_type, local_position_ned_cov->x, local_position_ned_cov->y, local_position_ned_cov->z, local_position_ned_cov->vx, local_position_ned_cov->vy, local_position_ned_cov->vz, local_position_ned_cov->ax, local_position_ned_cov->ay, local_position_ned_cov->az, local_position_ned_cov->covariance);
}
# 339 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
static inline uint32_t mavlink_msg_local_position_ned_cov_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}






static inline uint64_t mavlink_msg_local_position_ned_cov_get_time_utc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_local_position_ned_cov_get_estimator_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[228];
}






static inline float mavlink_msg_local_position_ned_cov_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_local_position_ned_cov_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_local_position_ned_cov_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_local_position_ned_cov_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_local_position_ned_cov_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_local_position_ned_cov_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_local_position_ned_cov_get_ax(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_local_position_ned_cov_get_ay(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_local_position_ned_cov_get_az(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}






static inline uint16_t mavlink_msg_local_position_ned_cov_get_covariance(const mavlink_message_t* msg, float *covariance)
{
 return _MAV_RETURN_float_array(msg, covariance, 45, 48);
}







static inline void mavlink_msg_local_position_ned_cov_decode(const mavlink_message_t* msg, mavlink_local_position_ned_cov_t* local_position_ned_cov)
{
# 487 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_cov.h"
 memcpy(local_position_ned_cov, ((const char *)(&((msg)->payload64[0]))), 229);

}
# 702 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h" 1




typedef struct __mavlink_rc_channels_t
{
 uint32_t time_boot_ms;
 uint16_t chan1_raw;
 uint16_t chan2_raw;
 uint16_t chan3_raw;
 uint16_t chan4_raw;
 uint16_t chan5_raw;
 uint16_t chan6_raw;
 uint16_t chan7_raw;
 uint16_t chan8_raw;
 uint16_t chan9_raw;
 uint16_t chan10_raw;
 uint16_t chan11_raw;
 uint16_t chan12_raw;
 uint16_t chan13_raw;
 uint16_t chan14_raw;
 uint16_t chan15_raw;
 uint16_t chan16_raw;
 uint16_t chan17_raw;
 uint16_t chan18_raw;
 uint8_t chancount;
 uint8_t rssi;
} mavlink_rc_channels_t;
# 95 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t chancount, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint16_t chan9_raw, uint16_t chan10_raw, uint16_t chan11_raw, uint16_t chan12_raw, uint16_t chan13_raw, uint16_t chan14_raw, uint16_t chan15_raw, uint16_t chan16_raw, uint16_t chan17_raw, uint16_t chan18_raw, uint8_t rssi)
{
# 124 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
 mavlink_rc_channels_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.chan9_raw = chan9_raw;
 packet.chan10_raw = chan10_raw;
 packet.chan11_raw = chan11_raw;
 packet.chan12_raw = chan12_raw;
 packet.chan13_raw = chan13_raw;
 packet.chan14_raw = chan14_raw;
 packet.chan15_raw = chan15_raw;
 packet.chan16_raw = chan16_raw;
 packet.chan17_raw = chan17_raw;
 packet.chan18_raw = chan18_raw;
 packet.chancount = chancount;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


 msg->msgid = 65;

    return mavlink_finalize_message(msg, system_id, component_id, 42, 118);



}
# 187 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t chancount,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw,uint16_t chan9_raw,uint16_t chan10_raw,uint16_t chan11_raw,uint16_t chan12_raw,uint16_t chan13_raw,uint16_t chan14_raw,uint16_t chan15_raw,uint16_t chan16_raw,uint16_t chan17_raw,uint16_t chan18_raw,uint8_t rssi)
{
# 217 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
 mavlink_rc_channels_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.chan9_raw = chan9_raw;
 packet.chan10_raw = chan10_raw;
 packet.chan11_raw = chan11_raw;
 packet.chan12_raw = chan12_raw;
 packet.chan13_raw = chan13_raw;
 packet.chan14_raw = chan14_raw;
 packet.chan15_raw = chan15_raw;
 packet.chan16_raw = chan16_raw;
 packet.chan17_raw = chan17_raw;
 packet.chan18_raw = chan18_raw;
 packet.chancount = chancount;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


 msg->msgid = 65;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 42, 118);



}
# 259 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_t* rc_channels)
{
 return mavlink_msg_rc_channels_pack(system_id, component_id, msg, rc_channels->time_boot_ms, rc_channels->chancount, rc_channels->chan1_raw, rc_channels->chan2_raw, rc_channels->chan3_raw, rc_channels->chan4_raw, rc_channels->chan5_raw, rc_channels->chan6_raw, rc_channels->chan7_raw, rc_channels->chan8_raw, rc_channels->chan9_raw, rc_channels->chan10_raw, rc_channels->chan11_raw, rc_channels->chan12_raw, rc_channels->chan13_raw, rc_channels->chan14_raw, rc_channels->chan15_raw, rc_channels->chan16_raw, rc_channels->chan17_raw, rc_channels->chan18_raw, rc_channels->rssi);
}
# 273 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
static inline uint16_t mavlink_msg_rc_channels_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_t* rc_channels)
{
 return mavlink_msg_rc_channels_pack_chan(system_id, component_id, chan, msg, rc_channels->time_boot_ms, rc_channels->chancount, rc_channels->chan1_raw, rc_channels->chan2_raw, rc_channels->chan3_raw, rc_channels->chan4_raw, rc_channels->chan5_raw, rc_channels->chan6_raw, rc_channels->chan7_raw, rc_channels->chan8_raw, rc_channels->chan9_raw, rc_channels->chan10_raw, rc_channels->chan11_raw, rc_channels->chan12_raw, rc_channels->chan13_raw, rc_channels->chan14_raw, rc_channels->chan15_raw, rc_channels->chan16_raw, rc_channels->chan17_raw, rc_channels->chan18_raw, rc_channels->rssi);
}
# 451 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
static inline uint32_t mavlink_msg_rc_channels_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_rc_channels_get_chancount(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint16_t mavlink_msg_rc_channels_get_chan1_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan2_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan3_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan4_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan5_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan6_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan7_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan8_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan9_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan10_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan11_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan12_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan13_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan14_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan15_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 32);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan16_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 34);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan17_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 36);
}






static inline uint16_t mavlink_msg_rc_channels_get_chan18_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 38);
}






static inline uint8_t mavlink_msg_rc_channels_get_rssi(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[41];
}







static inline void mavlink_msg_rc_channels_decode(const mavlink_message_t* msg, mavlink_rc_channels_t* rc_channels)
{
# 687 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels.h"
 memcpy(rc_channels, ((const char *)(&((msg)->payload64[0]))), 42);

}
# 703 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h" 1




typedef struct __mavlink_request_data_stream_t
{
 uint16_t req_message_rate;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t req_stream_id;
 uint8_t start_stop;
} mavlink_request_data_stream_t;
# 47 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint8_t req_stream_id, uint16_t req_message_rate, uint8_t start_stop)
{
# 60 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
 mavlink_request_data_stream_t packet;
 packet.req_message_rate = req_message_rate;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.req_stream_id = req_stream_id;
 packet.start_stop = start_stop;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 66;

    return mavlink_finalize_message(msg, system_id, component_id, 6, 148);



}
# 91 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint8_t req_stream_id,uint16_t req_message_rate,uint8_t start_stop)
{
# 105 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
 mavlink_request_data_stream_t packet;
 packet.req_message_rate = req_message_rate;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.req_stream_id = req_stream_id;
 packet.start_stop = start_stop;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 66;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 148);



}
# 131 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_request_data_stream_t* request_data_stream)
{
 return mavlink_msg_request_data_stream_pack(system_id, component_id, msg, request_data_stream->target_system, request_data_stream->target_component, request_data_stream->req_stream_id, request_data_stream->req_message_rate, request_data_stream->start_stop);
}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
static inline uint16_t mavlink_msg_request_data_stream_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_request_data_stream_t* request_data_stream)
{
 return mavlink_msg_request_data_stream_pack_chan(system_id, component_id, chan, msg, request_data_stream->target_system, request_data_stream->target_component, request_data_stream->req_stream_id, request_data_stream->req_message_rate, request_data_stream->start_stop);
}
# 243 "./lib/main/MAVLink/common/./mavlink_msg_request_data_stream.h"
static inline uint8_t mavlink_msg_request_data_stream_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_request_data_stream_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint8_t mavlink_msg_request_data_stream_get_req_stream_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint16_t mavlink_msg_request_data_stream_get_req_message_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_request_data_stream_get_start_stop(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}







static inline void mavlink_msg_request_data_stream_decode(const mavlink_message_t* msg, mavlink_request_data_stream_t* request_data_stream)
{







 memcpy(request_data_stream, ((const char *)(&((msg)->payload64[0]))), 6);

}
# 704 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h" 1




typedef struct __mavlink_data_stream_t
{
 uint16_t message_rate;
 uint8_t stream_id;
 uint8_t on_off;
} mavlink_data_stream_t;
# 41 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t stream_id, uint16_t message_rate, uint8_t on_off)
{
# 52 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
 mavlink_data_stream_t packet;
 packet.message_rate = message_rate;
 packet.stream_id = stream_id;
 packet.on_off = on_off;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 67;

    return mavlink_finalize_message(msg, system_id, component_id, 4, 21);



}
# 79 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t stream_id,uint16_t message_rate,uint8_t on_off)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
 mavlink_data_stream_t packet;
 packet.message_rate = message_rate;
 packet.stream_id = stream_id;
 packet.on_off = on_off;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 4);


 msg->msgid = 67;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 4, 21);



}
# 115 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_data_stream_t* data_stream)
{
 return mavlink_msg_data_stream_pack(system_id, component_id, msg, data_stream->stream_id, data_stream->message_rate, data_stream->on_off);
}
# 129 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
static inline uint16_t mavlink_msg_data_stream_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_data_stream_t* data_stream)
{
 return mavlink_msg_data_stream_pack_chan(system_id, component_id, chan, msg, data_stream->stream_id, data_stream->message_rate, data_stream->on_off);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_data_stream.h"
static inline uint8_t mavlink_msg_data_stream_get_stream_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_data_stream_get_message_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_data_stream_get_on_off(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}







static inline void mavlink_msg_data_stream_decode(const mavlink_message_t* msg, mavlink_data_stream_t* data_stream)
{





 memcpy(data_stream, ((const char *)(&((msg)->payload64[0]))), 4);

}
# 705 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h" 1




typedef struct __mavlink_manual_control_t
{
 int16_t x;
 int16_t y;
 int16_t z;
 int16_t r;
 uint16_t buttons;
 uint8_t target;
} mavlink_manual_control_t;
# 50 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target, int16_t x, int16_t y, int16_t z, int16_t r, uint16_t buttons)
{
# 64 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
 mavlink_manual_control_t packet;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.r = r;
 packet.buttons = buttons;
 packet.target = target;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 11);


 msg->msgid = 69;

    return mavlink_finalize_message(msg, system_id, component_id, 11, 243);



}
# 97 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target,int16_t x,int16_t y,int16_t z,int16_t r,uint16_t buttons)
{
# 112 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
 mavlink_manual_control_t packet;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.r = r;
 packet.buttons = buttons;
 packet.target = target;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 11);


 msg->msgid = 69;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 11, 243);



}
# 139 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_manual_control_t* manual_control)
{
 return mavlink_msg_manual_control_pack(system_id, component_id, msg, manual_control->target, manual_control->x, manual_control->y, manual_control->z, manual_control->r, manual_control->buttons);
}
# 153 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
static inline uint16_t mavlink_msg_manual_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_manual_control_t* manual_control)
{
 return mavlink_msg_manual_control_pack_chan(system_id, component_id, chan, msg, manual_control->target, manual_control->x, manual_control->y, manual_control->z, manual_control->r, manual_control->buttons);
}
# 256 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
static inline uint8_t mavlink_msg_manual_control_get_target(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline int16_t mavlink_msg_manual_control_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 0);
}






static inline int16_t mavlink_msg_manual_control_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 2);
}






static inline int16_t mavlink_msg_manual_control_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_manual_control_get_r(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 6);
}






static inline uint16_t mavlink_msg_manual_control_get_buttons(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}







static inline void mavlink_msg_manual_control_decode(const mavlink_message_t* msg, mavlink_manual_control_t* manual_control)
{
# 327 "./lib/main/MAVLink/common/./mavlink_msg_manual_control.h"
 memcpy(manual_control, ((const char *)(&((msg)->payload64[0]))), 11);

}
# 706 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h" 1




typedef struct __mavlink_rc_channels_override_t
{
 uint16_t chan1_raw;
 uint16_t chan2_raw;
 uint16_t chan3_raw;
 uint16_t chan4_raw;
 uint16_t chan5_raw;
 uint16_t chan6_raw;
 uint16_t chan7_raw;
 uint16_t chan8_raw;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_rc_channels_override_t;
# 62 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw)
{
# 80 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
 mavlink_rc_channels_override_t packet;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 70;

    return mavlink_finalize_message(msg, system_id, component_id, 18, 124);



}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw)
{
# 140 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
 mavlink_rc_channels_override_t packet;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 70;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 124);



}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rc_channels_override_t* rc_channels_override)
{
 return mavlink_msg_rc_channels_override_pack(system_id, component_id, msg, rc_channels_override->target_system, rc_channels_override->target_component, rc_channels_override->chan1_raw, rc_channels_override->chan2_raw, rc_channels_override->chan3_raw, rc_channels_override->chan4_raw, rc_channels_override->chan5_raw, rc_channels_override->chan6_raw, rc_channels_override->chan7_raw, rc_channels_override->chan8_raw);
}
# 185 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
static inline uint16_t mavlink_msg_rc_channels_override_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rc_channels_override_t* rc_channels_override)
{
 return mavlink_msg_rc_channels_override_pack_chan(system_id, component_id, chan, msg, rc_channels_override->target_system, rc_channels_override->target_component, rc_channels_override->chan1_raw, rc_channels_override->chan2_raw, rc_channels_override->chan3_raw, rc_channels_override->chan4_raw, rc_channels_override->chan5_raw, rc_channels_override->chan6_raw, rc_channels_override->chan7_raw, rc_channels_override->chan8_raw);
}
# 308 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
static inline uint8_t mavlink_msg_rc_channels_override_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[16];
}






static inline uint8_t mavlink_msg_rc_channels_override_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[17];
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan1_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan2_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 2);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan3_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan4_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan5_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan6_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan7_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_rc_channels_override_get_chan8_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 14);
}







static inline void mavlink_msg_rc_channels_override_decode(const mavlink_message_t* msg, mavlink_rc_channels_override_t* rc_channels_override)
{
# 423 "./lib/main/MAVLink/common/./mavlink_msg_rc_channels_override.h"
 memcpy(rc_channels_override, ((const char *)(&((msg)->payload64[0]))), 18);

}
# 707 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h" 1




typedef struct __mavlink_mission_item_int_t
{
 float param1;
 float param2;
 float param3;
 float param4;
 int32_t x;
 int32_t y;
 float z;
 uint16_t seq;
 uint16_t command;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t frame;
 uint8_t current;
 uint8_t autocontinue;
} mavlink_mission_item_int_t;
# 74 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, int32_t x, int32_t y, float z)
{
# 96 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
 mavlink_mission_item_int_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.seq = seq;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;
 packet.current = current;
 packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 73;

    return mavlink_finalize_message(msg, system_id, component_id, 37, 38);



}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t seq,uint8_t frame,uint16_t command,uint8_t current,uint8_t autocontinue,float param1,float param2,float param3,float param4,int32_t x,int32_t y,float z)
{
# 168 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
 mavlink_mission_item_int_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.seq = seq;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;
 packet.current = current;
 packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 73;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 38);



}
# 203 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_mission_item_int_t* mission_item_int)
{
 return mavlink_msg_mission_item_int_pack(system_id, component_id, msg, mission_item_int->target_system, mission_item_int->target_component, mission_item_int->seq, mission_item_int->frame, mission_item_int->command, mission_item_int->current, mission_item_int->autocontinue, mission_item_int->param1, mission_item_int->param2, mission_item_int->param3, mission_item_int->param4, mission_item_int->x, mission_item_int->y, mission_item_int->z);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
static inline uint16_t mavlink_msg_mission_item_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_mission_item_int_t* mission_item_int)
{
 return mavlink_msg_mission_item_int_pack_chan(system_id, component_id, chan, msg, mission_item_int->target_system, mission_item_int->target_component, mission_item_int->seq, mission_item_int->frame, mission_item_int->command, mission_item_int->current, mission_item_int->autocontinue, mission_item_int->param1, mission_item_int->param2, mission_item_int->param3, mission_item_int->param4, mission_item_int->x, mission_item_int->y, mission_item_int->z);
}
# 360 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
static inline uint8_t mavlink_msg_mission_item_int_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_mission_item_int_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint16_t mavlink_msg_mission_item_int_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_mission_item_int_get_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline uint16_t mavlink_msg_mission_item_int_get_command(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_mission_item_int_get_current(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[35];
}






static inline uint8_t mavlink_msg_mission_item_int_get_autocontinue(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline float mavlink_msg_mission_item_int_get_param1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_mission_item_int_get_param2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_mission_item_int_get_param3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_mission_item_int_get_param4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline int32_t mavlink_msg_mission_item_int_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_mission_item_int_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 20);
}






static inline float mavlink_msg_mission_item_int_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_mission_item_int_decode(const mavlink_message_t* msg, mavlink_mission_item_int_t* mission_item_int)
{
# 519 "./lib/main/MAVLink/common/./mavlink_msg_mission_item_int.h"
 memcpy(mission_item_int, ((const char *)(&((msg)->payload64[0]))), 37);

}
# 708 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h" 1




typedef struct __mavlink_vfr_hud_t
{
 float airspeed;
 float groundspeed;
 float alt;
 float climb;
 int16_t heading;
 uint16_t throttle;
} mavlink_vfr_hud_t;
# 50 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
# 64 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
 mavlink_vfr_hud_t packet;
 packet.airspeed = airspeed;
 packet.groundspeed = groundspeed;
 packet.alt = alt;
 packet.climb = climb;
 packet.heading = heading;
 packet.throttle = throttle;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


 msg->msgid = 74;

    return mavlink_finalize_message(msg, system_id, component_id, 20, 20);



}
# 97 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 float airspeed,float groundspeed,int16_t heading,uint16_t throttle,float alt,float climb)
{
# 112 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
 mavlink_vfr_hud_t packet;
 packet.airspeed = airspeed;
 packet.groundspeed = groundspeed;
 packet.alt = alt;
 packet.climb = climb;
 packet.heading = heading;
 packet.throttle = throttle;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


 msg->msgid = 74;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 20, 20);



}
# 139 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vfr_hud_t* vfr_hud)
{
 return mavlink_msg_vfr_hud_pack(system_id, component_id, msg, vfr_hud->airspeed, vfr_hud->groundspeed, vfr_hud->heading, vfr_hud->throttle, vfr_hud->alt, vfr_hud->climb);
}
# 153 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
static inline uint16_t mavlink_msg_vfr_hud_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vfr_hud_t* vfr_hud)
{
 return mavlink_msg_vfr_hud_pack_chan(system_id, component_id, chan, msg, vfr_hud->airspeed, vfr_hud->groundspeed, vfr_hud->heading, vfr_hud->throttle, vfr_hud->alt, vfr_hud->climb);
}
# 256 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
static inline float mavlink_msg_vfr_hud_get_airspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_vfr_hud_get_groundspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline int16_t mavlink_msg_vfr_hud_get_heading(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline uint16_t mavlink_msg_vfr_hud_get_throttle(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 18);
}






static inline float mavlink_msg_vfr_hud_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vfr_hud_get_climb(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}







static inline void mavlink_msg_vfr_hud_decode(const mavlink_message_t* msg, mavlink_vfr_hud_t* vfr_hud)
{
# 327 "./lib/main/MAVLink/common/./mavlink_msg_vfr_hud.h"
 memcpy(vfr_hud, ((const char *)(&((msg)->payload64[0]))), 20);

}
# 709 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h" 1




typedef struct __mavlink_command_int_t
{
 float param1;
 float param2;
 float param3;
 float param4;
 int32_t x;
 int32_t y;
 float z;
 uint16_t command;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t frame;
 uint8_t current;
 uint8_t autocontinue;
} mavlink_command_int_t;
# 71 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, int32_t x, int32_t y, float z)
{
# 92 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
 mavlink_command_int_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;
 packet.current = current;
 packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 75;

    return mavlink_finalize_message(msg, system_id, component_id, 35, 158);



}
# 139 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint8_t frame,uint16_t command,uint8_t current,uint8_t autocontinue,float param1,float param2,float param3,float param4,int32_t x,int32_t y,float z)
{
# 161 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
 mavlink_command_int_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.frame = frame;
 packet.current = current;
 packet.autocontinue = autocontinue;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 75;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 158);



}
# 195 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_command_int_t* command_int)
{
 return mavlink_msg_command_int_pack(system_id, component_id, msg, command_int->target_system, command_int->target_component, command_int->frame, command_int->command, command_int->current, command_int->autocontinue, command_int->param1, command_int->param2, command_int->param3, command_int->param4, command_int->x, command_int->y, command_int->z);
}
# 209 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
static inline uint16_t mavlink_msg_command_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_command_int_t* command_int)
{
 return mavlink_msg_command_int_pack_chan(system_id, component_id, chan, msg, command_int->target_system, command_int->target_component, command_int->frame, command_int->command, command_int->current, command_int->autocontinue, command_int->param1, command_int->param2, command_int->param3, command_int->param4, command_int->x, command_int->y, command_int->z);
}
# 347 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
static inline uint8_t mavlink_msg_command_int_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint8_t mavlink_msg_command_int_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint8_t mavlink_msg_command_int_get_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint16_t mavlink_msg_command_int_get_command(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_command_int_get_current(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_command_int_get_autocontinue(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline float mavlink_msg_command_int_get_param1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_command_int_get_param2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_command_int_get_param3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_command_int_get_param4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline int32_t mavlink_msg_command_int_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline int32_t mavlink_msg_command_int_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 20);
}






static inline float mavlink_msg_command_int_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_command_int_decode(const mavlink_message_t* msg, mavlink_command_int_t* command_int)
{
# 495 "./lib/main/MAVLink/common/./mavlink_msg_command_int.h"
 memcpy(command_int, ((const char *)(&((msg)->payload64[0]))), 35);

}
# 710 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h" 1




typedef struct __mavlink_command_long_t
{
 float param1;
 float param2;
 float param3;
 float param4;
 float param5;
 float param6;
 float param7;
 uint16_t command;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t confirmation;
} mavlink_command_long_t;
# 65 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t command, uint8_t confirmation, float param1, float param2, float param3, float param4, float param5, float param6, float param7)
{
# 84 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
 mavlink_command_long_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.param5 = param5;
 packet.param6 = param6;
 packet.param7 = param7;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.confirmation = confirmation;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


 msg->msgid = 76;

    return mavlink_finalize_message(msg, system_id, component_id, 33, 152);



}
# 127 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t command,uint8_t confirmation,float param1,float param2,float param3,float param4,float param5,float param6,float param7)
{
# 147 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
 mavlink_command_long_t packet;
 packet.param1 = param1;
 packet.param2 = param2;
 packet.param3 = param3;
 packet.param4 = param4;
 packet.param5 = param5;
 packet.param6 = param6;
 packet.param7 = param7;
 packet.command = command;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.confirmation = confirmation;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


 msg->msgid = 76;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 33, 152);



}
# 179 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_command_long_t* command_long)
{
 return mavlink_msg_command_long_pack(system_id, component_id, msg, command_long->target_system, command_long->target_component, command_long->command, command_long->confirmation, command_long->param1, command_long->param2, command_long->param3, command_long->param4, command_long->param5, command_long->param6, command_long->param7);
}
# 193 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
static inline uint16_t mavlink_msg_command_long_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_command_long_t* command_long)
{
 return mavlink_msg_command_long_pack_chan(system_id, component_id, chan, msg, command_long->target_system, command_long->target_component, command_long->command, command_long->confirmation, command_long->param1, command_long->param2, command_long->param3, command_long->param4, command_long->param5, command_long->param6, command_long->param7);
}
# 321 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
static inline uint8_t mavlink_msg_command_long_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint8_t mavlink_msg_command_long_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint16_t mavlink_msg_command_long_get_command(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint8_t mavlink_msg_command_long_get_confirmation(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline float mavlink_msg_command_long_get_param1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_command_long_get_param2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_command_long_get_param3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_command_long_get_param4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_command_long_get_param5(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_command_long_get_param6(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_command_long_get_param7(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
# 447 "./lib/main/MAVLink/common/./mavlink_msg_command_long.h"
 memcpy(command_long, ((const char *)(&((msg)->payload64[0]))), 33);

}
# 711 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_command_ack.h" 1




typedef struct __mavlink_command_ack_t
{
 uint16_t command;
 uint8_t result;
} mavlink_command_ack_t;
# 38 "./lib/main/MAVLink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t command, uint8_t result)
{







 mavlink_command_ack_t packet;
 packet.command = command;
 packet.result = result;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


 msg->msgid = 77;

    return mavlink_finalize_message(msg, system_id, component_id, 3, 143);



}
# 73 "./lib/main/MAVLink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t command,uint8_t result)
{







 mavlink_command_ack_t packet;
 packet.command = command;
 packet.result = result;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 3);


 msg->msgid = 77;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 3, 143);



}
# 107 "./lib/main/MAVLink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_command_ack_t* command_ack)
{
 return mavlink_msg_command_ack_pack(system_id, component_id, msg, command_ack->command, command_ack->result);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_command_ack_t* command_ack)
{
 return mavlink_msg_command_ack_pack_chan(system_id, component_id, chan, msg, command_ack->command, command_ack->result);
}
# 204 "./lib/main/MAVLink/common/./mavlink_msg_command_ack.h"
static inline uint16_t mavlink_msg_command_ack_get_command(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_command_ack_get_result(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}







static inline void mavlink_msg_command_ack_decode(const mavlink_message_t* msg, mavlink_command_ack_t* command_ack)
{




 memcpy(command_ack, ((const char *)(&((msg)->payload64[0]))), 3);

}
# 712 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h" 1




typedef struct __mavlink_manual_setpoint_t
{
 uint32_t time_boot_ms;
 float roll;
 float pitch;
 float yaw;
 float thrust;
 uint8_t mode_switch;
 uint8_t manual_override_switch;
} mavlink_manual_setpoint_t;
# 53 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust, uint8_t mode_switch, uint8_t manual_override_switch)
{
# 68 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
 mavlink_manual_setpoint_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.thrust = thrust;
 packet.mode_switch = mode_switch;
 packet.manual_override_switch = manual_override_switch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 81;

    return mavlink_finalize_message(msg, system_id, component_id, 22, 106);



}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,float roll,float pitch,float yaw,float thrust,uint8_t mode_switch,uint8_t manual_override_switch)
{
# 119 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
 mavlink_manual_setpoint_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.thrust = thrust;
 packet.mode_switch = mode_switch;
 packet.manual_override_switch = manual_override_switch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 81;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 106);



}
# 147 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_manual_setpoint_t* manual_setpoint)
{
 return mavlink_msg_manual_setpoint_pack(system_id, component_id, msg, manual_setpoint->time_boot_ms, manual_setpoint->roll, manual_setpoint->pitch, manual_setpoint->yaw, manual_setpoint->thrust, manual_setpoint->mode_switch, manual_setpoint->manual_override_switch);
}
# 161 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
static inline uint16_t mavlink_msg_manual_setpoint_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_manual_setpoint_t* manual_setpoint)
{
 return mavlink_msg_manual_setpoint_pack_chan(system_id, component_id, chan, msg, manual_setpoint->time_boot_ms, manual_setpoint->roll, manual_setpoint->pitch, manual_setpoint->yaw, manual_setpoint->thrust, manual_setpoint->mode_switch, manual_setpoint->manual_override_switch);
}
# 269 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
static inline uint32_t mavlink_msg_manual_setpoint_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_manual_setpoint_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_manual_setpoint_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_manual_setpoint_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_manual_setpoint_get_thrust(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline uint8_t mavlink_msg_manual_setpoint_get_mode_switch(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[20];
}






static inline uint8_t mavlink_msg_manual_setpoint_get_manual_override_switch(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[21];
}







static inline void mavlink_msg_manual_setpoint_decode(const mavlink_message_t* msg, mavlink_manual_setpoint_t* manual_setpoint)
{
# 351 "./lib/main/MAVLink/common/./mavlink_msg_manual_setpoint.h"
 memcpy(manual_setpoint, ((const char *)(&((msg)->payload64[0]))), 22);

}
# 713 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h" 1




typedef struct __mavlink_set_attitude_target_t
{
 uint32_t time_boot_ms;
 float q[4];
 float body_roll_rate;
 float body_pitch_rate;
 float body_yaw_rate;
 float thrust;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t type_mask;
} mavlink_set_attitude_target_t;
# 59 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t type_mask, const float *q, float body_roll_rate, float body_pitch_rate, float body_yaw_rate, float thrust)
{
# 75 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
 mavlink_set_attitude_target_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.body_roll_rate = body_roll_rate;
 packet.body_pitch_rate = body_pitch_rate;
 packet.body_yaw_rate = body_yaw_rate;
 packet.thrust = thrust;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.type_mask = type_mask;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 39);


 msg->msgid = 82;

    return mavlink_finalize_message(msg, system_id, component_id, 39, 49);



}
# 113 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t target_system,uint8_t target_component,uint8_t type_mask,const float *q,float body_roll_rate,float body_pitch_rate,float body_yaw_rate,float thrust)
{
# 130 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
 mavlink_set_attitude_target_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.body_roll_rate = body_roll_rate;
 packet.body_pitch_rate = body_pitch_rate;
 packet.body_yaw_rate = body_yaw_rate;
 packet.thrust = thrust;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.type_mask = type_mask;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 39);


 msg->msgid = 82;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 39, 49);



}
# 159 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_attitude_target_t* set_attitude_target)
{
 return mavlink_msg_set_attitude_target_pack(system_id, component_id, msg, set_attitude_target->time_boot_ms, set_attitude_target->target_system, set_attitude_target->target_component, set_attitude_target->type_mask, set_attitude_target->q, set_attitude_target->body_roll_rate, set_attitude_target->body_pitch_rate, set_attitude_target->body_yaw_rate, set_attitude_target->thrust);
}
# 173 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
static inline uint16_t mavlink_msg_set_attitude_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_attitude_target_t* set_attitude_target)
{
 return mavlink_msg_set_attitude_target_pack_chan(system_id, component_id, chan, msg, set_attitude_target->time_boot_ms, set_attitude_target->target_system, set_attitude_target->target_component, set_attitude_target->type_mask, set_attitude_target->q, set_attitude_target->body_roll_rate, set_attitude_target->body_pitch_rate, set_attitude_target->body_yaw_rate, set_attitude_target->thrust);
}
# 287 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
static inline uint32_t mavlink_msg_set_attitude_target_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_attitude_target_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline uint8_t mavlink_msg_set_attitude_target_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[37];
}






static inline uint8_t mavlink_msg_set_attitude_target_get_type_mask(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[38];
}






static inline uint16_t mavlink_msg_set_attitude_target_get_q(const mavlink_message_t* msg, float *q)
{
 return _MAV_RETURN_float_array(msg, q, 4, 4);
}






static inline float mavlink_msg_set_attitude_target_get_body_roll_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_set_attitude_target_get_body_pitch_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_set_attitude_target_get_body_yaw_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_set_attitude_target_get_thrust(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}







static inline void mavlink_msg_set_attitude_target_decode(const mavlink_message_t* msg, mavlink_set_attitude_target_t* set_attitude_target)
{
# 391 "./lib/main/MAVLink/common/./mavlink_msg_set_attitude_target.h"
 memcpy(set_attitude_target, ((const char *)(&((msg)->payload64[0]))), 39);

}
# 714 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h" 1




typedef struct __mavlink_attitude_target_t
{
 uint32_t time_boot_ms;
 float q[4];
 float body_roll_rate;
 float body_pitch_rate;
 float body_yaw_rate;
 float thrust;
 uint8_t type_mask;
} mavlink_attitude_target_t;
# 53 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t type_mask, const float *q, float body_roll_rate, float body_pitch_rate, float body_yaw_rate, float thrust)
{
# 67 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
 mavlink_attitude_target_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.body_roll_rate = body_roll_rate;
 packet.body_pitch_rate = body_pitch_rate;
 packet.body_yaw_rate = body_yaw_rate;
 packet.thrust = thrust;
 packet.type_mask = type_mask;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 83;

    return mavlink_finalize_message(msg, system_id, component_id, 37, 22);



}
# 101 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t type_mask,const float *q,float body_roll_rate,float body_pitch_rate,float body_yaw_rate,float thrust)
{
# 116 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
 mavlink_attitude_target_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.body_roll_rate = body_roll_rate;
 packet.body_pitch_rate = body_pitch_rate;
 packet.body_yaw_rate = body_yaw_rate;
 packet.thrust = thrust;
 packet.type_mask = type_mask;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 37);


 msg->msgid = 83;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 37, 22);



}
# 143 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_attitude_target_t* attitude_target)
{
 return mavlink_msg_attitude_target_pack(system_id, component_id, msg, attitude_target->time_boot_ms, attitude_target->type_mask, attitude_target->q, attitude_target->body_roll_rate, attitude_target->body_pitch_rate, attitude_target->body_yaw_rate, attitude_target->thrust);
}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
static inline uint16_t mavlink_msg_attitude_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_attitude_target_t* attitude_target)
{
 return mavlink_msg_attitude_target_pack_chan(system_id, component_id, chan, msg, attitude_target->time_boot_ms, attitude_target->type_mask, attitude_target->q, attitude_target->body_roll_rate, attitude_target->body_pitch_rate, attitude_target->body_yaw_rate, attitude_target->thrust);
}
# 261 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
static inline uint32_t mavlink_msg_attitude_target_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_attitude_target_get_type_mask(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[36];
}






static inline uint16_t mavlink_msg_attitude_target_get_q(const mavlink_message_t* msg, float *q)
{
 return _MAV_RETURN_float_array(msg, q, 4, 4);
}






static inline float mavlink_msg_attitude_target_get_body_roll_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_attitude_target_get_body_pitch_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_attitude_target_get_body_yaw_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_attitude_target_get_thrust(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}







static inline void mavlink_msg_attitude_target_decode(const mavlink_message_t* msg, mavlink_attitude_target_t* attitude_target)
{
# 343 "./lib/main/MAVLink/common/./mavlink_msg_attitude_target.h"
 memcpy(attitude_target, ((const char *)(&((msg)->payload64[0]))), 37);

}
# 715 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h" 1




typedef struct __mavlink_set_position_target_local_ned_t
{
 uint32_t time_boot_ms;
 float x;
 float y;
 float z;
 float vx;
 float vy;
 float vz;
 float afx;
 float afy;
 float afz;
 float yaw;
 float yaw_rate;
 uint16_t type_mask;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t coordinate_frame;
} mavlink_set_position_target_local_ned_t;
# 80 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t coordinate_frame, uint16_t type_mask, float x, float y, float z, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 104 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
 mavlink_set_position_target_local_ned_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


 msg->msgid = 84;

    return mavlink_finalize_message(msg, system_id, component_id, 53, 143);



}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t target_system,uint8_t target_component,uint8_t coordinate_frame,uint16_t type_mask,float x,float y,float z,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 182 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
 mavlink_set_position_target_local_ned_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


 msg->msgid = 84;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 53, 143);



}
# 219 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_position_target_local_ned_t* set_position_target_local_ned)
{
 return mavlink_msg_set_position_target_local_ned_pack(system_id, component_id, msg, set_position_target_local_ned->time_boot_ms, set_position_target_local_ned->target_system, set_position_target_local_ned->target_component, set_position_target_local_ned->coordinate_frame, set_position_target_local_ned->type_mask, set_position_target_local_ned->x, set_position_target_local_ned->y, set_position_target_local_ned->z, set_position_target_local_ned->vx, set_position_target_local_ned->vy, set_position_target_local_ned->vz, set_position_target_local_ned->afx, set_position_target_local_ned->afy, set_position_target_local_ned->afz, set_position_target_local_ned->yaw, set_position_target_local_ned->yaw_rate);
}
# 233 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint16_t mavlink_msg_set_position_target_local_ned_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_position_target_local_ned_t* set_position_target_local_ned)
{
 return mavlink_msg_set_position_target_local_ned_pack_chan(system_id, component_id, chan, msg, set_position_target_local_ned->time_boot_ms, set_position_target_local_ned->target_system, set_position_target_local_ned->target_component, set_position_target_local_ned->coordinate_frame, set_position_target_local_ned->type_mask, set_position_target_local_ned->x, set_position_target_local_ned->y, set_position_target_local_ned->z, set_position_target_local_ned->vx, set_position_target_local_ned->vy, set_position_target_local_ned->vz, set_position_target_local_ned->afx, set_position_target_local_ned->afy, set_position_target_local_ned->afz, set_position_target_local_ned->yaw, set_position_target_local_ned->yaw_rate);
}
# 386 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
static inline uint32_t mavlink_msg_set_position_target_local_ned_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_position_target_local_ned_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint8_t mavlink_msg_set_position_target_local_ned_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[51];
}






static inline uint8_t mavlink_msg_set_position_target_local_ned_get_coordinate_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[52];
}






static inline uint16_t mavlink_msg_set_position_target_local_ned_get_type_mask(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 48);
}






static inline float mavlink_msg_set_position_target_local_ned_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_set_position_target_local_ned_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_set_position_target_local_ned_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_set_position_target_local_ned_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_set_position_target_local_ned_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_set_position_target_local_ned_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_set_position_target_local_ned_get_afx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_set_position_target_local_ned_get_afy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_set_position_target_local_ned_get_afz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_set_position_target_local_ned_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_set_position_target_local_ned_get_yaw_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_set_position_target_local_ned_decode(const mavlink_message_t* msg, mavlink_set_position_target_local_ned_t* set_position_target_local_ned)
{
# 567 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_local_ned.h"
 memcpy(set_position_target_local_ned, ((const char *)(&((msg)->payload64[0]))), 53);

}
# 716 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h" 1




typedef struct __mavlink_position_target_local_ned_t
{
 uint32_t time_boot_ms;
 float x;
 float y;
 float z;
 float vx;
 float vy;
 float vz;
 float afx;
 float afy;
 float afz;
 float yaw;
 float yaw_rate;
 uint16_t type_mask;
 uint8_t coordinate_frame;
} mavlink_position_target_local_ned_t;
# 74 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t coordinate_frame, uint16_t type_mask, float x, float y, float z, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 96 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
 mavlink_position_target_local_ned_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


 msg->msgid = 85;

    return mavlink_finalize_message(msg, system_id, component_id, 51, 140);



}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t coordinate_frame,uint16_t type_mask,float x,float y,float z,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 168 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
 mavlink_position_target_local_ned_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


 msg->msgid = 85;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 51, 140);



}
# 203 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_position_target_local_ned_t* position_target_local_ned)
{
 return mavlink_msg_position_target_local_ned_pack(system_id, component_id, msg, position_target_local_ned->time_boot_ms, position_target_local_ned->coordinate_frame, position_target_local_ned->type_mask, position_target_local_ned->x, position_target_local_ned->y, position_target_local_ned->z, position_target_local_ned->vx, position_target_local_ned->vy, position_target_local_ned->vz, position_target_local_ned->afx, position_target_local_ned->afy, position_target_local_ned->afz, position_target_local_ned->yaw, position_target_local_ned->yaw_rate);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint16_t mavlink_msg_position_target_local_ned_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_position_target_local_ned_t* position_target_local_ned)
{
 return mavlink_msg_position_target_local_ned_pack_chan(system_id, component_id, chan, msg, position_target_local_ned->time_boot_ms, position_target_local_ned->coordinate_frame, position_target_local_ned->type_mask, position_target_local_ned->x, position_target_local_ned->y, position_target_local_ned->z, position_target_local_ned->vx, position_target_local_ned->vy, position_target_local_ned->vz, position_target_local_ned->afx, position_target_local_ned->afy, position_target_local_ned->afz, position_target_local_ned->yaw, position_target_local_ned->yaw_rate);
}
# 360 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
static inline uint32_t mavlink_msg_position_target_local_ned_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_position_target_local_ned_get_coordinate_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint16_t mavlink_msg_position_target_local_ned_get_type_mask(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 48);
}






static inline float mavlink_msg_position_target_local_ned_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_position_target_local_ned_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_position_target_local_ned_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_position_target_local_ned_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_position_target_local_ned_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_position_target_local_ned_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_position_target_local_ned_get_afx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_position_target_local_ned_get_afy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_position_target_local_ned_get_afz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_position_target_local_ned_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_position_target_local_ned_get_yaw_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_position_target_local_ned_decode(const mavlink_message_t* msg, mavlink_position_target_local_ned_t* position_target_local_ned)
{
# 519 "./lib/main/MAVLink/common/./mavlink_msg_position_target_local_ned.h"
 memcpy(position_target_local_ned, ((const char *)(&((msg)->payload64[0]))), 51);

}
# 717 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h" 1




typedef struct __mavlink_set_position_target_global_int_t
{
 uint32_t time_boot_ms;
 int32_t lat_int;
 int32_t lon_int;
 float alt;
 float vx;
 float vy;
 float vz;
 float afx;
 float afy;
 float afz;
 float yaw;
 float yaw_rate;
 uint16_t type_mask;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t coordinate_frame;
} mavlink_set_position_target_global_int_t;
# 80 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t target_system, uint8_t target_component, uint8_t coordinate_frame, uint16_t type_mask, int32_t lat_int, int32_t lon_int, float alt, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 104 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
 mavlink_set_position_target_global_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.lat_int = lat_int;
 packet.lon_int = lon_int;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


 msg->msgid = 86;

    return mavlink_finalize_message(msg, system_id, component_id, 53, 5);



}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t target_system,uint8_t target_component,uint8_t coordinate_frame,uint16_t type_mask,int32_t lat_int,int32_t lon_int,float alt,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 182 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
 mavlink_set_position_target_global_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.lat_int = lat_int;
 packet.lon_int = lon_int;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 53);


 msg->msgid = 86;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 53, 5);



}
# 219 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_position_target_global_int_t* set_position_target_global_int)
{
 return mavlink_msg_set_position_target_global_int_pack(system_id, component_id, msg, set_position_target_global_int->time_boot_ms, set_position_target_global_int->target_system, set_position_target_global_int->target_component, set_position_target_global_int->coordinate_frame, set_position_target_global_int->type_mask, set_position_target_global_int->lat_int, set_position_target_global_int->lon_int, set_position_target_global_int->alt, set_position_target_global_int->vx, set_position_target_global_int->vy, set_position_target_global_int->vz, set_position_target_global_int->afx, set_position_target_global_int->afy, set_position_target_global_int->afz, set_position_target_global_int->yaw, set_position_target_global_int->yaw_rate);
}
# 233 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint16_t mavlink_msg_set_position_target_global_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_position_target_global_int_t* set_position_target_global_int)
{
 return mavlink_msg_set_position_target_global_int_pack_chan(system_id, component_id, chan, msg, set_position_target_global_int->time_boot_ms, set_position_target_global_int->target_system, set_position_target_global_int->target_component, set_position_target_global_int->coordinate_frame, set_position_target_global_int->type_mask, set_position_target_global_int->lat_int, set_position_target_global_int->lon_int, set_position_target_global_int->alt, set_position_target_global_int->vx, set_position_target_global_int->vy, set_position_target_global_int->vz, set_position_target_global_int->afx, set_position_target_global_int->afy, set_position_target_global_int->afz, set_position_target_global_int->yaw, set_position_target_global_int->yaw_rate);
}
# 386 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
static inline uint32_t mavlink_msg_set_position_target_global_int_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_position_target_global_int_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint8_t mavlink_msg_set_position_target_global_int_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[51];
}






static inline uint8_t mavlink_msg_set_position_target_global_int_get_coordinate_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[52];
}






static inline uint16_t mavlink_msg_set_position_target_global_int_get_type_mask(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 48);
}






static inline int32_t mavlink_msg_set_position_target_global_int_get_lat_int(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_set_position_target_global_int_get_lon_int(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline float mavlink_msg_set_position_target_global_int_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_set_position_target_global_int_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_set_position_target_global_int_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_set_position_target_global_int_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_set_position_target_global_int_get_afx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_set_position_target_global_int_get_afy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_set_position_target_global_int_get_afz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_set_position_target_global_int_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_set_position_target_global_int_get_yaw_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_set_position_target_global_int_decode(const mavlink_message_t* msg, mavlink_set_position_target_global_int_t* set_position_target_global_int)
{
# 567 "./lib/main/MAVLink/common/./mavlink_msg_set_position_target_global_int.h"
 memcpy(set_position_target_global_int, ((const char *)(&((msg)->payload64[0]))), 53);

}
# 718 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h" 1




typedef struct __mavlink_position_target_global_int_t
{
 uint32_t time_boot_ms;
 int32_t lat_int;
 int32_t lon_int;
 float alt;
 float vx;
 float vy;
 float vz;
 float afx;
 float afy;
 float afz;
 float yaw;
 float yaw_rate;
 uint16_t type_mask;
 uint8_t coordinate_frame;
} mavlink_position_target_global_int_t;
# 74 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t coordinate_frame, uint16_t type_mask, int32_t lat_int, int32_t lon_int, float alt, float vx, float vy, float vz, float afx, float afy, float afz, float yaw, float yaw_rate)
{
# 96 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
 mavlink_position_target_global_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.lat_int = lat_int;
 packet.lon_int = lon_int;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


 msg->msgid = 87;

    return mavlink_finalize_message(msg, system_id, component_id, 51, 150);



}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t coordinate_frame,uint16_t type_mask,int32_t lat_int,int32_t lon_int,float alt,float vx,float vy,float vz,float afx,float afy,float afz,float yaw,float yaw_rate)
{
# 168 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
 mavlink_position_target_global_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.lat_int = lat_int;
 packet.lon_int = lon_int;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.afx = afx;
 packet.afy = afy;
 packet.afz = afz;
 packet.yaw = yaw;
 packet.yaw_rate = yaw_rate;
 packet.type_mask = type_mask;
 packet.coordinate_frame = coordinate_frame;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


 msg->msgid = 87;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 51, 150);



}
# 203 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_position_target_global_int_t* position_target_global_int)
{
 return mavlink_msg_position_target_global_int_pack(system_id, component_id, msg, position_target_global_int->time_boot_ms, position_target_global_int->coordinate_frame, position_target_global_int->type_mask, position_target_global_int->lat_int, position_target_global_int->lon_int, position_target_global_int->alt, position_target_global_int->vx, position_target_global_int->vy, position_target_global_int->vz, position_target_global_int->afx, position_target_global_int->afy, position_target_global_int->afz, position_target_global_int->yaw, position_target_global_int->yaw_rate);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
static inline uint16_t mavlink_msg_position_target_global_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_position_target_global_int_t* position_target_global_int)
{
 return mavlink_msg_position_target_global_int_pack_chan(system_id, component_id, chan, msg, position_target_global_int->time_boot_ms, position_target_global_int->coordinate_frame, position_target_global_int->type_mask, position_target_global_int->lat_int, position_target_global_int->lon_int, position_target_global_int->alt, position_target_global_int->vx, position_target_global_int->vy, position_target_global_int->vz, position_target_global_int->afx, position_target_global_int->afy, position_target_global_int->afz, position_target_global_int->yaw, position_target_global_int->yaw_rate);
}
# 360 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
static inline uint32_t mavlink_msg_position_target_global_int_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_position_target_global_int_get_coordinate_frame(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[50];
}






static inline uint16_t mavlink_msg_position_target_global_int_get_type_mask(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 48);
}






static inline int32_t mavlink_msg_position_target_global_int_get_lat_int(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline int32_t mavlink_msg_position_target_global_int_get_lon_int(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline float mavlink_msg_position_target_global_int_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_position_target_global_int_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_position_target_global_int_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_position_target_global_int_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_position_target_global_int_get_afx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_position_target_global_int_get_afy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_position_target_global_int_get_afz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_position_target_global_int_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_position_target_global_int_get_yaw_rate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}







static inline void mavlink_msg_position_target_global_int_decode(const mavlink_message_t* msg, mavlink_position_target_global_int_t* position_target_global_int)
{
# 519 "./lib/main/MAVLink/common/./mavlink_msg_position_target_global_int.h"
 memcpy(position_target_global_int, ((const char *)(&((msg)->payload64[0]))), 51);

}
# 719 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h" 1




typedef struct __mavlink_local_position_ned_system_global_offset_t
{
 uint32_t time_boot_ms;
 float x;
 float y;
 float z;
 float roll;
 float pitch;
 float yaw;
} mavlink_local_position_ned_system_global_offset_t;
# 53 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, float x, float y, float z, float roll, float pitch, float yaw)
{
# 68 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
 mavlink_local_position_ned_system_global_offset_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 89;

    return mavlink_finalize_message(msg, system_id, component_id, 28, 231);



}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,float x,float y,float z,float roll,float pitch,float yaw)
{
# 119 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
 mavlink_local_position_ned_system_global_offset_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 28);


 msg->msgid = 89;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 28, 231);



}
# 147 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_local_position_ned_system_global_offset_t* local_position_ned_system_global_offset)
{
 return mavlink_msg_local_position_ned_system_global_offset_pack(system_id, component_id, msg, local_position_ned_system_global_offset->time_boot_ms, local_position_ned_system_global_offset->x, local_position_ned_system_global_offset->y, local_position_ned_system_global_offset->z, local_position_ned_system_global_offset->roll, local_position_ned_system_global_offset->pitch, local_position_ned_system_global_offset->yaw);
}
# 161 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint16_t mavlink_msg_local_position_ned_system_global_offset_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_local_position_ned_system_global_offset_t* local_position_ned_system_global_offset)
{
 return mavlink_msg_local_position_ned_system_global_offset_pack_chan(system_id, component_id, chan, msg, local_position_ned_system_global_offset->time_boot_ms, local_position_ned_system_global_offset->x, local_position_ned_system_global_offset->y, local_position_ned_system_global_offset->z, local_position_ned_system_global_offset->roll, local_position_ned_system_global_offset->pitch, local_position_ned_system_global_offset->yaw);
}
# 269 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
static inline uint32_t mavlink_msg_local_position_ned_system_global_offset_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_local_position_ned_system_global_offset_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}







static inline void mavlink_msg_local_position_ned_system_global_offset_decode(const mavlink_message_t* msg, mavlink_local_position_ned_system_global_offset_t* local_position_ned_system_global_offset)
{
# 351 "./lib/main/MAVLink/common/./mavlink_msg_local_position_ned_system_global_offset.h"
 memcpy(local_position_ned_system_global_offset, ((const char *)(&((msg)->payload64[0]))), 28);

}
# 720 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h" 1




typedef struct __mavlink_hil_state_t
{
 uint64_t time_usec;
 float roll;
 float pitch;
 float yaw;
 float rollspeed;
 float pitchspeed;
 float yawspeed;
 int32_t lat;
 int32_t lon;
 int32_t alt;
 int16_t vx;
 int16_t vy;
 int16_t vz;
 int16_t xacc;
 int16_t yacc;
 int16_t zacc;
} mavlink_hil_state_t;
# 80 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, int16_t xacc, int16_t yacc, int16_t zacc)
{
# 104 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
 mavlink_hil_state_t packet;
 packet.time_usec = time_usec;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 56);


 msg->msgid = 90;

    return mavlink_finalize_message(msg, system_id, component_id, 56, 183);



}
# 157 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,float roll,float pitch,float yaw,float rollspeed,float pitchspeed,float yawspeed,int32_t lat,int32_t lon,int32_t alt,int16_t vx,int16_t vy,int16_t vz,int16_t xacc,int16_t yacc,int16_t zacc)
{
# 182 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
 mavlink_hil_state_t packet;
 packet.time_usec = time_usec;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 56);


 msg->msgid = 90;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 56, 183);



}
# 219 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_state_t* hil_state)
{
 return mavlink_msg_hil_state_pack(system_id, component_id, msg, hil_state->time_usec, hil_state->roll, hil_state->pitch, hil_state->yaw, hil_state->rollspeed, hil_state->pitchspeed, hil_state->yawspeed, hil_state->lat, hil_state->lon, hil_state->alt, hil_state->vx, hil_state->vy, hil_state->vz, hil_state->xacc, hil_state->yacc, hil_state->zacc);
}
# 233 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
static inline uint16_t mavlink_msg_hil_state_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_state_t* hil_state)
{
 return mavlink_msg_hil_state_pack_chan(system_id, component_id, chan, msg, hil_state->time_usec, hil_state->roll, hil_state->pitch, hil_state->yaw, hil_state->rollspeed, hil_state->pitchspeed, hil_state->yawspeed, hil_state->lat, hil_state->lon, hil_state->alt, hil_state->vx, hil_state->vy, hil_state->vz, hil_state->xacc, hil_state->yacc, hil_state->zacc);
}
# 386 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
static inline uint64_t mavlink_msg_hil_state_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_hil_state_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_hil_state_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_state_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_state_get_rollspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_state_get_pitchspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_state_get_yawspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline int32_t mavlink_msg_hil_state_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 32);
}






static inline int32_t mavlink_msg_hil_state_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 36);
}






static inline int32_t mavlink_msg_hil_state_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 40);
}






static inline int16_t mavlink_msg_hil_state_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 44);
}






static inline int16_t mavlink_msg_hil_state_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 46);
}






static inline int16_t mavlink_msg_hil_state_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 48);
}






static inline int16_t mavlink_msg_hil_state_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 50);
}






static inline int16_t mavlink_msg_hil_state_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 52);
}






static inline int16_t mavlink_msg_hil_state_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 54);
}







static inline void mavlink_msg_hil_state_decode(const mavlink_message_t* msg, mavlink_hil_state_t* hil_state)
{
# 567 "./lib/main/MAVLink/common/./mavlink_msg_hil_state.h"
 memcpy(hil_state, ((const char *)(&((msg)->payload64[0]))), 56);

}
# 721 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h" 1




typedef struct __mavlink_hil_controls_t
{
 uint64_t time_usec;
 float roll_ailerons;
 float pitch_elevator;
 float yaw_rudder;
 float throttle;
 float aux1;
 float aux2;
 float aux3;
 float aux4;
 uint8_t mode;
 uint8_t nav_mode;
} mavlink_hil_controls_t;
# 65 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, float roll_ailerons, float pitch_elevator, float yaw_rudder, float throttle, float aux1, float aux2, float aux3, float aux4, uint8_t mode, uint8_t nav_mode)
{
# 84 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
 mavlink_hil_controls_t packet;
 packet.time_usec = time_usec;
 packet.roll_ailerons = roll_ailerons;
 packet.pitch_elevator = pitch_elevator;
 packet.yaw_rudder = yaw_rudder;
 packet.throttle = throttle;
 packet.aux1 = aux1;
 packet.aux2 = aux2;
 packet.aux3 = aux3;
 packet.aux4 = aux4;
 packet.mode = mode;
 packet.nav_mode = nav_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


 msg->msgid = 91;

    return mavlink_finalize_message(msg, system_id, component_id, 42, 63);



}
# 127 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,float roll_ailerons,float pitch_elevator,float yaw_rudder,float throttle,float aux1,float aux2,float aux3,float aux4,uint8_t mode,uint8_t nav_mode)
{
# 147 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
 mavlink_hil_controls_t packet;
 packet.time_usec = time_usec;
 packet.roll_ailerons = roll_ailerons;
 packet.pitch_elevator = pitch_elevator;
 packet.yaw_rudder = yaw_rudder;
 packet.throttle = throttle;
 packet.aux1 = aux1;
 packet.aux2 = aux2;
 packet.aux3 = aux3;
 packet.aux4 = aux4;
 packet.mode = mode;
 packet.nav_mode = nav_mode;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 42);


 msg->msgid = 91;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 42, 63);



}
# 179 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_controls_t* hil_controls)
{
 return mavlink_msg_hil_controls_pack(system_id, component_id, msg, hil_controls->time_usec, hil_controls->roll_ailerons, hil_controls->pitch_elevator, hil_controls->yaw_rudder, hil_controls->throttle, hil_controls->aux1, hil_controls->aux2, hil_controls->aux3, hil_controls->aux4, hil_controls->mode, hil_controls->nav_mode);
}
# 193 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
static inline uint16_t mavlink_msg_hil_controls_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_controls_t* hil_controls)
{
 return mavlink_msg_hil_controls_pack_chan(system_id, component_id, chan, msg, hil_controls->time_usec, hil_controls->roll_ailerons, hil_controls->pitch_elevator, hil_controls->yaw_rudder, hil_controls->throttle, hil_controls->aux1, hil_controls->aux2, hil_controls->aux3, hil_controls->aux4, hil_controls->mode, hil_controls->nav_mode);
}
# 321 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
static inline uint64_t mavlink_msg_hil_controls_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_hil_controls_get_roll_ailerons(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_hil_controls_get_pitch_elevator(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_controls_get_yaw_rudder(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_controls_get_throttle(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_controls_get_aux1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_controls_get_aux2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_hil_controls_get_aux3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_hil_controls_get_aux4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline uint8_t mavlink_msg_hil_controls_get_mode(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint8_t mavlink_msg_hil_controls_get_nav_mode(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[41];
}







static inline void mavlink_msg_hil_controls_decode(const mavlink_message_t* msg, mavlink_hil_controls_t* hil_controls)
{
# 447 "./lib/main/MAVLink/common/./mavlink_msg_hil_controls.h"
 memcpy(hil_controls, ((const char *)(&((msg)->payload64[0]))), 42);

}
# 722 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h" 1




typedef struct __mavlink_hil_rc_inputs_raw_t
{
 uint64_t time_usec;
 uint16_t chan1_raw;
 uint16_t chan2_raw;
 uint16_t chan3_raw;
 uint16_t chan4_raw;
 uint16_t chan5_raw;
 uint16_t chan6_raw;
 uint16_t chan7_raw;
 uint16_t chan8_raw;
 uint16_t chan9_raw;
 uint16_t chan10_raw;
 uint16_t chan11_raw;
 uint16_t chan12_raw;
 uint8_t rssi;
} mavlink_hil_rc_inputs_raw_t;
# 74 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint16_t chan9_raw, uint16_t chan10_raw, uint16_t chan11_raw, uint16_t chan12_raw, uint8_t rssi)
{
# 96 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
 mavlink_hil_rc_inputs_raw_t packet;
 packet.time_usec = time_usec;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.chan9_raw = chan9_raw;
 packet.chan10_raw = chan10_raw;
 packet.chan11_raw = chan11_raw;
 packet.chan12_raw = chan12_raw;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


 msg->msgid = 92;

    return mavlink_finalize_message(msg, system_id, component_id, 33, 54);



}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint16_t chan1_raw,uint16_t chan2_raw,uint16_t chan3_raw,uint16_t chan4_raw,uint16_t chan5_raw,uint16_t chan6_raw,uint16_t chan7_raw,uint16_t chan8_raw,uint16_t chan9_raw,uint16_t chan10_raw,uint16_t chan11_raw,uint16_t chan12_raw,uint8_t rssi)
{
# 168 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
 mavlink_hil_rc_inputs_raw_t packet;
 packet.time_usec = time_usec;
 packet.chan1_raw = chan1_raw;
 packet.chan2_raw = chan2_raw;
 packet.chan3_raw = chan3_raw;
 packet.chan4_raw = chan4_raw;
 packet.chan5_raw = chan5_raw;
 packet.chan6_raw = chan6_raw;
 packet.chan7_raw = chan7_raw;
 packet.chan8_raw = chan8_raw;
 packet.chan9_raw = chan9_raw;
 packet.chan10_raw = chan10_raw;
 packet.chan11_raw = chan11_raw;
 packet.chan12_raw = chan12_raw;
 packet.rssi = rssi;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 33);


 msg->msgid = 92;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 33, 54);



}
# 203 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_rc_inputs_raw_t* hil_rc_inputs_raw)
{
 return mavlink_msg_hil_rc_inputs_raw_pack(system_id, component_id, msg, hil_rc_inputs_raw->time_usec, hil_rc_inputs_raw->chan1_raw, hil_rc_inputs_raw->chan2_raw, hil_rc_inputs_raw->chan3_raw, hil_rc_inputs_raw->chan4_raw, hil_rc_inputs_raw->chan5_raw, hil_rc_inputs_raw->chan6_raw, hil_rc_inputs_raw->chan7_raw, hil_rc_inputs_raw->chan8_raw, hil_rc_inputs_raw->chan9_raw, hil_rc_inputs_raw->chan10_raw, hil_rc_inputs_raw->chan11_raw, hil_rc_inputs_raw->chan12_raw, hil_rc_inputs_raw->rssi);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint16_t mavlink_msg_hil_rc_inputs_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_rc_inputs_raw_t* hil_rc_inputs_raw)
{
 return mavlink_msg_hil_rc_inputs_raw_pack_chan(system_id, component_id, chan, msg, hil_rc_inputs_raw->time_usec, hil_rc_inputs_raw->chan1_raw, hil_rc_inputs_raw->chan2_raw, hil_rc_inputs_raw->chan3_raw, hil_rc_inputs_raw->chan4_raw, hil_rc_inputs_raw->chan5_raw, hil_rc_inputs_raw->chan6_raw, hil_rc_inputs_raw->chan7_raw, hil_rc_inputs_raw->chan8_raw, hil_rc_inputs_raw->chan9_raw, hil_rc_inputs_raw->chan10_raw, hil_rc_inputs_raw->chan11_raw, hil_rc_inputs_raw->chan12_raw, hil_rc_inputs_raw->rssi);
}
# 360 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
static inline uint64_t mavlink_msg_hil_rc_inputs_raw_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan1_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan2_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan3_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan4_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 14);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan5_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan6_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan7_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan8_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan9_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan10_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan11_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint16_t mavlink_msg_hil_rc_inputs_raw_get_chan12_raw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_hil_rc_inputs_raw_get_rssi(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}







static inline void mavlink_msg_hil_rc_inputs_raw_decode(const mavlink_message_t* msg, mavlink_hil_rc_inputs_raw_t* hil_rc_inputs_raw)
{
# 519 "./lib/main/MAVLink/common/./mavlink_msg_hil_rc_inputs_raw.h"
 memcpy(hil_rc_inputs_raw, ((const char *)(&((msg)->payload64[0]))), 33);

}
# 723 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h" 1




typedef struct __mavlink_optical_flow_t
{
 uint64_t time_usec;
 float flow_comp_m_x;
 float flow_comp_m_y;
 float ground_distance;
 int16_t flow_x;
 int16_t flow_y;
 uint8_t sensor_id;
 uint8_t quality;
} mavlink_optical_flow_t;
# 56 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t sensor_id, int16_t flow_x, int16_t flow_y, float flow_comp_m_x, float flow_comp_m_y, uint8_t quality, float ground_distance)
{
# 72 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
 mavlink_optical_flow_t packet;
 packet.time_usec = time_usec;
 packet.flow_comp_m_x = flow_comp_m_x;
 packet.flow_comp_m_y = flow_comp_m_y;
 packet.ground_distance = ground_distance;
 packet.flow_x = flow_x;
 packet.flow_y = flow_y;
 packet.sensor_id = sensor_id;
 packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


 msg->msgid = 100;

    return mavlink_finalize_message(msg, system_id, component_id, 26, 175);



}
# 109 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t sensor_id,int16_t flow_x,int16_t flow_y,float flow_comp_m_x,float flow_comp_m_y,uint8_t quality,float ground_distance)
{
# 126 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
 mavlink_optical_flow_t packet;
 packet.time_usec = time_usec;
 packet.flow_comp_m_x = flow_comp_m_x;
 packet.flow_comp_m_y = flow_comp_m_y;
 packet.ground_distance = ground_distance;
 packet.flow_x = flow_x;
 packet.flow_y = flow_y;
 packet.sensor_id = sensor_id;
 packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 26);


 msg->msgid = 100;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 26, 175);



}
# 155 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_optical_flow_t* optical_flow)
{
 return mavlink_msg_optical_flow_pack(system_id, component_id, msg, optical_flow->time_usec, optical_flow->sensor_id, optical_flow->flow_x, optical_flow->flow_y, optical_flow->flow_comp_m_x, optical_flow->flow_comp_m_y, optical_flow->quality, optical_flow->ground_distance);
}
# 169 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
static inline uint16_t mavlink_msg_optical_flow_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_optical_flow_t* optical_flow)
{
 return mavlink_msg_optical_flow_pack_chan(system_id, component_id, chan, msg, optical_flow->time_usec, optical_flow->sensor_id, optical_flow->flow_x, optical_flow->flow_y, optical_flow->flow_comp_m_x, optical_flow->flow_comp_m_y, optical_flow->quality, optical_flow->ground_distance);
}
# 282 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
static inline uint64_t mavlink_msg_optical_flow_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_optical_flow_get_sensor_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[24];
}






static inline int16_t mavlink_msg_optical_flow_get_flow_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 20);
}






static inline int16_t mavlink_msg_optical_flow_get_flow_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 22);
}






static inline float mavlink_msg_optical_flow_get_flow_comp_m_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_optical_flow_get_flow_comp_m_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline uint8_t mavlink_msg_optical_flow_get_quality(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[25];
}






static inline float mavlink_msg_optical_flow_get_ground_distance(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_optical_flow_decode(const mavlink_message_t* msg, mavlink_optical_flow_t* optical_flow)
{
# 375 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow.h"
 memcpy(optical_flow, ((const char *)(&((msg)->payload64[0]))), 26);

}
# 724 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h" 1




typedef struct __mavlink_global_vision_position_estimate_t
{
 uint64_t usec;
 float x;
 float y;
 float z;
 float roll;
 float pitch;
 float yaw;
} mavlink_global_vision_position_estimate_t;
# 53 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 68 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
 mavlink_global_vision_position_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 101;

    return mavlink_finalize_message(msg, system_id, component_id, 32, 102);



}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t usec,float x,float y,float z,float roll,float pitch,float yaw)
{
# 119 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
 mavlink_global_vision_position_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 101;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 102);



}
# 147 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_global_vision_position_estimate_t* global_vision_position_estimate)
{
 return mavlink_msg_global_vision_position_estimate_pack(system_id, component_id, msg, global_vision_position_estimate->usec, global_vision_position_estimate->x, global_vision_position_estimate->y, global_vision_position_estimate->z, global_vision_position_estimate->roll, global_vision_position_estimate->pitch, global_vision_position_estimate->yaw);
}
# 161 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint16_t mavlink_msg_global_vision_position_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_global_vision_position_estimate_t* global_vision_position_estimate)
{
 return mavlink_msg_global_vision_position_estimate_pack_chan(system_id, component_id, chan, msg, global_vision_position_estimate->usec, global_vision_position_estimate->x, global_vision_position_estimate->y, global_vision_position_estimate->z, global_vision_position_estimate->roll, global_vision_position_estimate->pitch, global_vision_position_estimate->yaw);
}
# 269 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
static inline uint64_t mavlink_msg_global_vision_position_estimate_get_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_global_vision_position_estimate_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_global_vision_position_estimate_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_global_vision_position_estimate_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_global_vision_position_estimate_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_global_vision_position_estimate_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_global_vision_position_estimate_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_global_vision_position_estimate_decode(const mavlink_message_t* msg, mavlink_global_vision_position_estimate_t* global_vision_position_estimate)
{
# 351 "./lib/main/MAVLink/common/./mavlink_msg_global_vision_position_estimate.h"
 memcpy(global_vision_position_estimate, ((const char *)(&((msg)->payload64[0]))), 32);

}
# 725 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h" 1




typedef struct __mavlink_vision_position_estimate_t
{
 uint64_t usec;
 float x;
 float y;
 float z;
 float roll;
 float pitch;
 float yaw;
} mavlink_vision_position_estimate_t;
# 53 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 68 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
 mavlink_vision_position_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 102;

    return mavlink_finalize_message(msg, system_id, component_id, 32, 158);



}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t usec,float x,float y,float z,float roll,float pitch,float yaw)
{
# 119 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
 mavlink_vision_position_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 102;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 158);



}
# 147 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vision_position_estimate_t* vision_position_estimate)
{
 return mavlink_msg_vision_position_estimate_pack(system_id, component_id, msg, vision_position_estimate->usec, vision_position_estimate->x, vision_position_estimate->y, vision_position_estimate->z, vision_position_estimate->roll, vision_position_estimate->pitch, vision_position_estimate->yaw);
}
# 161 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint16_t mavlink_msg_vision_position_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vision_position_estimate_t* vision_position_estimate)
{
 return mavlink_msg_vision_position_estimate_pack_chan(system_id, component_id, chan, msg, vision_position_estimate->usec, vision_position_estimate->x, vision_position_estimate->y, vision_position_estimate->z, vision_position_estimate->roll, vision_position_estimate->pitch, vision_position_estimate->yaw);
}
# 269 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
static inline uint64_t mavlink_msg_vision_position_estimate_get_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_vision_position_estimate_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vision_position_estimate_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_vision_position_estimate_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_vision_position_estimate_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_vision_position_estimate_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_vision_position_estimate_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_vision_position_estimate_decode(const mavlink_message_t* msg, mavlink_vision_position_estimate_t* vision_position_estimate)
{
# 351 "./lib/main/MAVLink/common/./mavlink_msg_vision_position_estimate.h"
 memcpy(vision_position_estimate, ((const char *)(&((msg)->payload64[0]))), 32);

}
# 726 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h" 1




typedef struct __mavlink_vision_speed_estimate_t
{
 uint64_t usec;
 float x;
 float y;
 float z;
} mavlink_vision_speed_estimate_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t usec, float x, float y, float z)
{
# 56 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
 mavlink_vision_speed_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


 msg->msgid = 103;

    return mavlink_finalize_message(msg, system_id, component_id, 20, 208);



}
# 85 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t usec,float x,float y,float z)
{
# 98 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
 mavlink_vision_speed_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 20);


 msg->msgid = 103;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 20, 208);



}
# 123 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vision_speed_estimate_t* vision_speed_estimate)
{
 return mavlink_msg_vision_speed_estimate_pack(system_id, component_id, msg, vision_speed_estimate->usec, vision_speed_estimate->x, vision_speed_estimate->y, vision_speed_estimate->z);
}
# 137 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint16_t mavlink_msg_vision_speed_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vision_speed_estimate_t* vision_speed_estimate)
{
 return mavlink_msg_vision_speed_estimate_pack_chan(system_id, component_id, chan, msg, vision_speed_estimate->usec, vision_speed_estimate->x, vision_speed_estimate->y, vision_speed_estimate->z);
}
# 230 "./lib/main/MAVLink/common/./mavlink_msg_vision_speed_estimate.h"
static inline uint64_t mavlink_msg_vision_speed_estimate_get_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_vision_speed_estimate_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vision_speed_estimate_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_vision_speed_estimate_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_vision_speed_estimate_decode(const mavlink_message_t* msg, mavlink_vision_speed_estimate_t* vision_speed_estimate)
{






 memcpy(vision_speed_estimate, ((const char *)(&((msg)->payload64[0]))), 20);

}
# 727 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h" 1




typedef struct __mavlink_vicon_position_estimate_t
{
 uint64_t usec;
 float x;
 float y;
 float z;
 float roll;
 float pitch;
 float yaw;
} mavlink_vicon_position_estimate_t;
# 53 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t usec, float x, float y, float z, float roll, float pitch, float yaw)
{
# 68 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
 mavlink_vicon_position_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 104;

    return mavlink_finalize_message(msg, system_id, component_id, 32, 56);



}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t usec,float x,float y,float z,float roll,float pitch,float yaw)
{
# 119 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
 mavlink_vicon_position_estimate_t packet;
 packet.usec = usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 32);


 msg->msgid = 104;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 32, 56);



}
# 147 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_vicon_position_estimate_t* vicon_position_estimate)
{
 return mavlink_msg_vicon_position_estimate_pack(system_id, component_id, msg, vicon_position_estimate->usec, vicon_position_estimate->x, vicon_position_estimate->y, vicon_position_estimate->z, vicon_position_estimate->roll, vicon_position_estimate->pitch, vicon_position_estimate->yaw);
}
# 161 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint16_t mavlink_msg_vicon_position_estimate_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_vicon_position_estimate_t* vicon_position_estimate)
{
 return mavlink_msg_vicon_position_estimate_pack_chan(system_id, component_id, chan, msg, vicon_position_estimate->usec, vicon_position_estimate->x, vicon_position_estimate->y, vicon_position_estimate->z, vicon_position_estimate->roll, vicon_position_estimate->pitch, vicon_position_estimate->yaw);
}
# 269 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
static inline uint64_t mavlink_msg_vicon_position_estimate_get_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_vicon_position_estimate_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_vicon_position_estimate_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_vicon_position_estimate_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_vicon_position_estimate_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_vicon_position_estimate_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_vicon_position_estimate_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}







static inline void mavlink_msg_vicon_position_estimate_decode(const mavlink_message_t* msg, mavlink_vicon_position_estimate_t* vicon_position_estimate)
{
# 351 "./lib/main/MAVLink/common/./mavlink_msg_vicon_position_estimate.h"
 memcpy(vicon_position_estimate, ((const char *)(&((msg)->payload64[0]))), 32);

}
# 728 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h" 1




typedef struct __mavlink_highres_imu_t
{
 uint64_t time_usec;
 float xacc;
 float yacc;
 float zacc;
 float xgyro;
 float ygyro;
 float zgyro;
 float xmag;
 float ymag;
 float zmag;
 float abs_pressure;
 float diff_pressure;
 float pressure_alt;
 float temperature;
 uint16_t fields_updated;
} mavlink_highres_imu_t;
# 77 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float xmag, float ymag, float zmag, float abs_pressure, float diff_pressure, float pressure_alt, float temperature, uint16_t fields_updated)
{
# 100 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
 mavlink_highres_imu_t packet;
 packet.time_usec = time_usec;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;
 packet.abs_pressure = abs_pressure;
 packet.diff_pressure = diff_pressure;
 packet.pressure_alt = pressure_alt;
 packet.temperature = temperature;
 packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 62);


 msg->msgid = 105;

    return mavlink_finalize_message(msg, system_id, component_id, 62, 93);



}
# 151 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,float xacc,float yacc,float zacc,float xgyro,float ygyro,float zgyro,float xmag,float ymag,float zmag,float abs_pressure,float diff_pressure,float pressure_alt,float temperature,uint16_t fields_updated)
{
# 175 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
 mavlink_highres_imu_t packet;
 packet.time_usec = time_usec;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;
 packet.abs_pressure = abs_pressure;
 packet.diff_pressure = diff_pressure;
 packet.pressure_alt = pressure_alt;
 packet.temperature = temperature;
 packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 62);


 msg->msgid = 105;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 62, 93);



}
# 211 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_highres_imu_t* highres_imu)
{
 return mavlink_msg_highres_imu_pack(system_id, component_id, msg, highres_imu->time_usec, highres_imu->xacc, highres_imu->yacc, highres_imu->zacc, highres_imu->xgyro, highres_imu->ygyro, highres_imu->zgyro, highres_imu->xmag, highres_imu->ymag, highres_imu->zmag, highres_imu->abs_pressure, highres_imu->diff_pressure, highres_imu->pressure_alt, highres_imu->temperature, highres_imu->fields_updated);
}
# 225 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
static inline uint16_t mavlink_msg_highres_imu_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_highres_imu_t* highres_imu)
{
 return mavlink_msg_highres_imu_pack_chan(system_id, component_id, chan, msg, highres_imu->time_usec, highres_imu->xacc, highres_imu->yacc, highres_imu->zacc, highres_imu->xgyro, highres_imu->ygyro, highres_imu->zgyro, highres_imu->xmag, highres_imu->ymag, highres_imu->zmag, highres_imu->abs_pressure, highres_imu->diff_pressure, highres_imu->pressure_alt, highres_imu->temperature, highres_imu->fields_updated);
}
# 373 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
static inline uint64_t mavlink_msg_highres_imu_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_highres_imu_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_highres_imu_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_highres_imu_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_highres_imu_get_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_highres_imu_get_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_highres_imu_get_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_highres_imu_get_xmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_highres_imu_get_ymag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_highres_imu_get_zmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_highres_imu_get_abs_pressure(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_highres_imu_get_diff_pressure(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 48);
}






static inline float mavlink_msg_highres_imu_get_pressure_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 52);
}






static inline float mavlink_msg_highres_imu_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 56);
}






static inline uint16_t mavlink_msg_highres_imu_get_fields_updated(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 60);
}







static inline void mavlink_msg_highres_imu_decode(const mavlink_message_t* msg, mavlink_highres_imu_t* highres_imu)
{
# 543 "./lib/main/MAVLink/common/./mavlink_msg_highres_imu.h"
 memcpy(highres_imu, ((const char *)(&((msg)->payload64[0]))), 62);

}
# 729 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h" 1




typedef struct __mavlink_optical_flow_rad_t
{
 uint64_t time_usec;
 uint32_t integration_time_us;
 float integrated_x;
 float integrated_y;
 float integrated_xgyro;
 float integrated_ygyro;
 float integrated_zgyro;
 uint32_t time_delta_distance_us;
 float distance;
 int16_t temperature;
 uint8_t sensor_id;
 uint8_t quality;
} mavlink_optical_flow_rad_t;
# 68 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t sensor_id, uint32_t integration_time_us, float integrated_x, float integrated_y, float integrated_xgyro, float integrated_ygyro, float integrated_zgyro, int16_t temperature, uint8_t quality, uint32_t time_delta_distance_us, float distance)
{
# 88 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
 mavlink_optical_flow_rad_t packet;
 packet.time_usec = time_usec;
 packet.integration_time_us = integration_time_us;
 packet.integrated_x = integrated_x;
 packet.integrated_y = integrated_y;
 packet.integrated_xgyro = integrated_xgyro;
 packet.integrated_ygyro = integrated_ygyro;
 packet.integrated_zgyro = integrated_zgyro;
 packet.time_delta_distance_us = time_delta_distance_us;
 packet.distance = distance;
 packet.temperature = temperature;
 packet.sensor_id = sensor_id;
 packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


 msg->msgid = 106;

    return mavlink_finalize_message(msg, system_id, component_id, 44, 138);



}
# 133 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t sensor_id,uint32_t integration_time_us,float integrated_x,float integrated_y,float integrated_xgyro,float integrated_ygyro,float integrated_zgyro,int16_t temperature,uint8_t quality,uint32_t time_delta_distance_us,float distance)
{
# 154 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
 mavlink_optical_flow_rad_t packet;
 packet.time_usec = time_usec;
 packet.integration_time_us = integration_time_us;
 packet.integrated_x = integrated_x;
 packet.integrated_y = integrated_y;
 packet.integrated_xgyro = integrated_xgyro;
 packet.integrated_ygyro = integrated_ygyro;
 packet.integrated_zgyro = integrated_zgyro;
 packet.time_delta_distance_us = time_delta_distance_us;
 packet.distance = distance;
 packet.temperature = temperature;
 packet.sensor_id = sensor_id;
 packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


 msg->msgid = 106;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 44, 138);



}
# 187 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_optical_flow_rad_t* optical_flow_rad)
{
 return mavlink_msg_optical_flow_rad_pack(system_id, component_id, msg, optical_flow_rad->time_usec, optical_flow_rad->sensor_id, optical_flow_rad->integration_time_us, optical_flow_rad->integrated_x, optical_flow_rad->integrated_y, optical_flow_rad->integrated_xgyro, optical_flow_rad->integrated_ygyro, optical_flow_rad->integrated_zgyro, optical_flow_rad->temperature, optical_flow_rad->quality, optical_flow_rad->time_delta_distance_us, optical_flow_rad->distance);
}
# 201 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint16_t mavlink_msg_optical_flow_rad_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_optical_flow_rad_t* optical_flow_rad)
{
 return mavlink_msg_optical_flow_rad_pack_chan(system_id, component_id, chan, msg, optical_flow_rad->time_usec, optical_flow_rad->sensor_id, optical_flow_rad->integration_time_us, optical_flow_rad->integrated_x, optical_flow_rad->integrated_y, optical_flow_rad->integrated_xgyro, optical_flow_rad->integrated_ygyro, optical_flow_rad->integrated_zgyro, optical_flow_rad->temperature, optical_flow_rad->quality, optical_flow_rad->time_delta_distance_us, optical_flow_rad->distance);
}
# 334 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
static inline uint64_t mavlink_msg_optical_flow_rad_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_optical_flow_rad_get_sensor_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint32_t mavlink_msg_optical_flow_rad_get_integration_time_us(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_optical_flow_rad_get_integrated_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline int16_t mavlink_msg_optical_flow_rad_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 40);
}






static inline uint8_t mavlink_msg_optical_flow_rad_get_quality(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[43];
}






static inline uint32_t mavlink_msg_optical_flow_rad_get_time_delta_distance_us(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 32);
}






static inline float mavlink_msg_optical_flow_rad_get_distance(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_optical_flow_rad_decode(const mavlink_message_t* msg, mavlink_optical_flow_rad_t* optical_flow_rad)
{
# 471 "./lib/main/MAVLink/common/./mavlink_msg_optical_flow_rad.h"
 memcpy(optical_flow_rad, ((const char *)(&((msg)->payload64[0]))), 44);

}
# 730 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h" 1




typedef struct __mavlink_hil_sensor_t
{
 uint64_t time_usec;
 float xacc;
 float yacc;
 float zacc;
 float xgyro;
 float ygyro;
 float zgyro;
 float xmag;
 float ymag;
 float zmag;
 float abs_pressure;
 float diff_pressure;
 float pressure_alt;
 float temperature;
 uint32_t fields_updated;
} mavlink_hil_sensor_t;
# 77 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float xmag, float ymag, float zmag, float abs_pressure, float diff_pressure, float pressure_alt, float temperature, uint32_t fields_updated)
{
# 100 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
 mavlink_hil_sensor_t packet;
 packet.time_usec = time_usec;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;
 packet.abs_pressure = abs_pressure;
 packet.diff_pressure = diff_pressure;
 packet.pressure_alt = pressure_alt;
 packet.temperature = temperature;
 packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


 msg->msgid = 107;

    return mavlink_finalize_message(msg, system_id, component_id, 64, 108);



}
# 151 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,float xacc,float yacc,float zacc,float xgyro,float ygyro,float zgyro,float xmag,float ymag,float zmag,float abs_pressure,float diff_pressure,float pressure_alt,float temperature,uint32_t fields_updated)
{
# 175 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
 mavlink_hil_sensor_t packet;
 packet.time_usec = time_usec;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;
 packet.abs_pressure = abs_pressure;
 packet.diff_pressure = diff_pressure;
 packet.pressure_alt = pressure_alt;
 packet.temperature = temperature;
 packet.fields_updated = fields_updated;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


 msg->msgid = 107;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 64, 108);



}
# 211 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_sensor_t* hil_sensor)
{
 return mavlink_msg_hil_sensor_pack(system_id, component_id, msg, hil_sensor->time_usec, hil_sensor->xacc, hil_sensor->yacc, hil_sensor->zacc, hil_sensor->xgyro, hil_sensor->ygyro, hil_sensor->zgyro, hil_sensor->xmag, hil_sensor->ymag, hil_sensor->zmag, hil_sensor->abs_pressure, hil_sensor->diff_pressure, hil_sensor->pressure_alt, hil_sensor->temperature, hil_sensor->fields_updated);
}
# 225 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
static inline uint16_t mavlink_msg_hil_sensor_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_sensor_t* hil_sensor)
{
 return mavlink_msg_hil_sensor_pack_chan(system_id, component_id, chan, msg, hil_sensor->time_usec, hil_sensor->xacc, hil_sensor->yacc, hil_sensor->zacc, hil_sensor->xgyro, hil_sensor->ygyro, hil_sensor->zgyro, hil_sensor->xmag, hil_sensor->ymag, hil_sensor->zmag, hil_sensor->abs_pressure, hil_sensor->diff_pressure, hil_sensor->pressure_alt, hil_sensor->temperature, hil_sensor->fields_updated);
}
# 373 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
static inline uint64_t mavlink_msg_hil_sensor_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_hil_sensor_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_hil_sensor_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_sensor_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_sensor_get_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_sensor_get_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_sensor_get_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_hil_sensor_get_xmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_hil_sensor_get_ymag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_hil_sensor_get_zmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_hil_sensor_get_abs_pressure(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_hil_sensor_get_diff_pressure(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 48);
}






static inline float mavlink_msg_hil_sensor_get_pressure_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 52);
}






static inline float mavlink_msg_hil_sensor_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 56);
}






static inline uint32_t mavlink_msg_hil_sensor_get_fields_updated(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 60);
}







static inline void mavlink_msg_hil_sensor_decode(const mavlink_message_t* msg, mavlink_hil_sensor_t* hil_sensor)
{
# 543 "./lib/main/MAVLink/common/./mavlink_msg_hil_sensor.h"
 memcpy(hil_sensor, ((const char *)(&((msg)->payload64[0]))), 64);

}
# 731 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h" 1




typedef struct __mavlink_sim_state_t
{
 float q1;
 float q2;
 float q3;
 float q4;
 float roll;
 float pitch;
 float yaw;
 float xacc;
 float yacc;
 float zacc;
 float xgyro;
 float ygyro;
 float zgyro;
 float lat;
 float lon;
 float alt;
 float std_dev_horz;
 float std_dev_vert;
 float vn;
 float ve;
 float vd;
} mavlink_sim_state_t;
# 95 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             float q1, float q2, float q3, float q4, float roll, float pitch, float yaw, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float lat, float lon, float alt, float std_dev_horz, float std_dev_vert, float vn, float ve, float vd)
{
# 124 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
 mavlink_sim_state_t packet;
 packet.q1 = q1;
 packet.q2 = q2;
 packet.q3 = q3;
 packet.q4 = q4;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.std_dev_horz = std_dev_horz;
 packet.std_dev_vert = std_dev_vert;
 packet.vn = vn;
 packet.ve = ve;
 packet.vd = vd;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 84);


 msg->msgid = 108;

    return mavlink_finalize_message(msg, system_id, component_id, 84, 32);



}
# 187 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 float q1,float q2,float q3,float q4,float roll,float pitch,float yaw,float xacc,float yacc,float zacc,float xgyro,float ygyro,float zgyro,float lat,float lon,float alt,float std_dev_horz,float std_dev_vert,float vn,float ve,float vd)
{
# 217 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
 mavlink_sim_state_t packet;
 packet.q1 = q1;
 packet.q2 = q2;
 packet.q3 = q3;
 packet.q4 = q4;
 packet.roll = roll;
 packet.pitch = pitch;
 packet.yaw = yaw;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.std_dev_horz = std_dev_horz;
 packet.std_dev_vert = std_dev_vert;
 packet.vn = vn;
 packet.ve = ve;
 packet.vd = vd;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 84);


 msg->msgid = 108;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 84, 32);



}
# 259 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_sim_state_t* sim_state)
{
 return mavlink_msg_sim_state_pack(system_id, component_id, msg, sim_state->q1, sim_state->q2, sim_state->q3, sim_state->q4, sim_state->roll, sim_state->pitch, sim_state->yaw, sim_state->xacc, sim_state->yacc, sim_state->zacc, sim_state->xgyro, sim_state->ygyro, sim_state->zgyro, sim_state->lat, sim_state->lon, sim_state->alt, sim_state->std_dev_horz, sim_state->std_dev_vert, sim_state->vn, sim_state->ve, sim_state->vd);
}
# 273 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
static inline uint16_t mavlink_msg_sim_state_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_sim_state_t* sim_state)
{
 return mavlink_msg_sim_state_pack_chan(system_id, component_id, chan, msg, sim_state->q1, sim_state->q2, sim_state->q3, sim_state->q4, sim_state->roll, sim_state->pitch, sim_state->yaw, sim_state->xacc, sim_state->yacc, sim_state->zacc, sim_state->xgyro, sim_state->ygyro, sim_state->zgyro, sim_state->lat, sim_state->lon, sim_state->alt, sim_state->std_dev_horz, sim_state->std_dev_vert, sim_state->vn, sim_state->ve, sim_state->vd);
}
# 451 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
static inline float mavlink_msg_sim_state_get_q1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 0);
}






static inline float mavlink_msg_sim_state_get_q2(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_sim_state_get_q3(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_sim_state_get_q4(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_sim_state_get_roll(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_sim_state_get_pitch(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_sim_state_get_yaw(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_sim_state_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_sim_state_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline float mavlink_msg_sim_state_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}






static inline float mavlink_msg_sim_state_get_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 40);
}






static inline float mavlink_msg_sim_state_get_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 44);
}






static inline float mavlink_msg_sim_state_get_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 48);
}






static inline float mavlink_msg_sim_state_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 52);
}






static inline float mavlink_msg_sim_state_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 56);
}






static inline float mavlink_msg_sim_state_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 60);
}






static inline float mavlink_msg_sim_state_get_std_dev_horz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 64);
}






static inline float mavlink_msg_sim_state_get_std_dev_vert(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 68);
}






static inline float mavlink_msg_sim_state_get_vn(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 72);
}






static inline float mavlink_msg_sim_state_get_ve(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 76);
}






static inline float mavlink_msg_sim_state_get_vd(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 80);
}







static inline void mavlink_msg_sim_state_decode(const mavlink_message_t* msg, mavlink_sim_state_t* sim_state)
{
# 687 "./lib/main/MAVLink/common/./mavlink_msg_sim_state.h"
 memcpy(sim_state, ((const char *)(&((msg)->payload64[0]))), 84);

}
# 732 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h" 1




typedef struct __mavlink_radio_status_t
{
 uint16_t rxerrors;
 uint16_t fixed;
 uint8_t rssi;
 uint8_t remrssi;
 uint8_t txbuf;
 uint8_t noise;
 uint8_t remnoise;
} mavlink_radio_status_t;
# 53 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t rssi, uint8_t remrssi, uint8_t txbuf, uint8_t noise, uint8_t remnoise, uint16_t rxerrors, uint16_t fixed)
{
# 68 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
 mavlink_radio_status_t packet;
 packet.rxerrors = rxerrors;
 packet.fixed = fixed;
 packet.rssi = rssi;
 packet.remrssi = remrssi;
 packet.txbuf = txbuf;
 packet.noise = noise;
 packet.remnoise = remnoise;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


 msg->msgid = 109;

    return mavlink_finalize_message(msg, system_id, component_id, 9, 185);



}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t rssi,uint8_t remrssi,uint8_t txbuf,uint8_t noise,uint8_t remnoise,uint16_t rxerrors,uint16_t fixed)
{
# 119 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
 mavlink_radio_status_t packet;
 packet.rxerrors = rxerrors;
 packet.fixed = fixed;
 packet.rssi = rssi;
 packet.remrssi = remrssi;
 packet.txbuf = txbuf;
 packet.noise = noise;
 packet.remnoise = remnoise;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


 msg->msgid = 109;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 9, 185);



}
# 147 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_radio_status_t* radio_status)
{
 return mavlink_msg_radio_status_pack(system_id, component_id, msg, radio_status->rssi, radio_status->remrssi, radio_status->txbuf, radio_status->noise, radio_status->remnoise, radio_status->rxerrors, radio_status->fixed);
}
# 161 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
static inline uint16_t mavlink_msg_radio_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_radio_status_t* radio_status)
{
 return mavlink_msg_radio_status_pack_chan(system_id, component_id, chan, msg, radio_status->rssi, radio_status->remrssi, radio_status->txbuf, radio_status->noise, radio_status->remnoise, radio_status->rxerrors, radio_status->fixed);
}
# 269 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
static inline uint8_t mavlink_msg_radio_status_get_rssi(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_radio_status_get_remrssi(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint8_t mavlink_msg_radio_status_get_txbuf(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_radio_status_get_noise(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint8_t mavlink_msg_radio_status_get_remnoise(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint16_t mavlink_msg_radio_status_get_rxerrors(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_radio_status_get_fixed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 2);
}







static inline void mavlink_msg_radio_status_decode(const mavlink_message_t* msg, mavlink_radio_status_t* radio_status)
{
# 351 "./lib/main/MAVLink/common/./mavlink_msg_radio_status.h"
 memcpy(radio_status, ((const char *)(&((msg)->payload64[0]))), 9);

}
# 733 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h" 1




typedef struct __mavlink_file_transfer_protocol_t
{
 uint8_t target_network;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t payload[251];
} mavlink_file_transfer_protocol_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_network, uint8_t target_system, uint8_t target_component, const uint8_t *payload)
{
# 55 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
 mavlink_file_transfer_protocol_t packet;
 packet.target_network = target_network;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*251);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


 msg->msgid = 110;

    return mavlink_finalize_message(msg, system_id, component_id, 254, 84);



}
# 83 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_network,uint8_t target_system,uint8_t target_component,const uint8_t *payload)
{
# 95 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
 mavlink_file_transfer_protocol_t packet;
 packet.target_network = target_network;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*251);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


 msg->msgid = 110;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 254, 84);



}
# 119 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_file_transfer_protocol_t* file_transfer_protocol)
{
 return mavlink_msg_file_transfer_protocol_pack(system_id, component_id, msg, file_transfer_protocol->target_network, file_transfer_protocol->target_system, file_transfer_protocol->target_component, file_transfer_protocol->payload);
}
# 133 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint16_t mavlink_msg_file_transfer_protocol_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_file_transfer_protocol_t* file_transfer_protocol)
{
 return mavlink_msg_file_transfer_protocol_pack_chan(system_id, component_id, chan, msg, file_transfer_protocol->target_network, file_transfer_protocol->target_system, file_transfer_protocol->target_component, file_transfer_protocol->payload);
}
# 222 "./lib/main/MAVLink/common/./mavlink_msg_file_transfer_protocol.h"
static inline uint8_t mavlink_msg_file_transfer_protocol_get_target_network(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_file_transfer_protocol_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_file_transfer_protocol_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_file_transfer_protocol_get_payload(const mavlink_message_t* msg, uint8_t *payload)
{
 return _MAV_RETURN_uint8_t_array(msg, payload, 251, 3);
}







static inline void mavlink_msg_file_transfer_protocol_decode(const mavlink_message_t* msg, mavlink_file_transfer_protocol_t* file_transfer_protocol)
{






 memcpy(file_transfer_protocol, ((const char *)(&((msg)->payload64[0]))), 254);

}
# 734 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_timesync.h" 1




typedef struct __mavlink_timesync_t
{
 int64_t tc1;
 int64_t ts1;
} mavlink_timesync_t;
# 38 "./lib/main/MAVLink/common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             int64_t tc1, int64_t ts1)
{







 mavlink_timesync_t packet;
 packet.tc1 = tc1;
 packet.ts1 = ts1;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


 msg->msgid = 111;

    return mavlink_finalize_message(msg, system_id, component_id, 16, 34);



}
# 73 "./lib/main/MAVLink/common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 int64_t tc1,int64_t ts1)
{







 mavlink_timesync_t packet;
 packet.tc1 = tc1;
 packet.ts1 = ts1;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 16);


 msg->msgid = 111;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 16, 34);



}
# 107 "./lib/main/MAVLink/common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_timesync_t* timesync)
{
 return mavlink_msg_timesync_pack(system_id, component_id, msg, timesync->tc1, timesync->ts1);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_timesync.h"
static inline uint16_t mavlink_msg_timesync_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_timesync_t* timesync)
{
 return mavlink_msg_timesync_pack_chan(system_id, component_id, chan, msg, timesync->tc1, timesync->ts1);
}
# 204 "./lib/main/MAVLink/common/./mavlink_msg_timesync.h"
static inline int64_t mavlink_msg_timesync_get_tc1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int64_t(msg, 0);
}






static inline int64_t mavlink_msg_timesync_get_ts1(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int64_t(msg, 8);
}







static inline void mavlink_msg_timesync_decode(const mavlink_message_t* msg, mavlink_timesync_t* timesync)
{




 memcpy(timesync, ((const char *)(&((msg)->payload64[0]))), 16);

}
# 735 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_camera_trigger.h" 1




typedef struct __mavlink_camera_trigger_t
{
 uint64_t time_usec;
 uint32_t seq;
} mavlink_camera_trigger_t;
# 38 "./lib/main/MAVLink/common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint32_t seq)
{







 mavlink_camera_trigger_t packet;
 packet.time_usec = time_usec;
 packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 112;

    return mavlink_finalize_message(msg, system_id, component_id, 12, 174);



}
# 73 "./lib/main/MAVLink/common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint32_t seq)
{







 mavlink_camera_trigger_t packet;
 packet.time_usec = time_usec;
 packet.seq = seq;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 112;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 174);



}
# 107 "./lib/main/MAVLink/common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_camera_trigger_t* camera_trigger)
{
 return mavlink_msg_camera_trigger_pack(system_id, component_id, msg, camera_trigger->time_usec, camera_trigger->seq);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_camera_trigger.h"
static inline uint16_t mavlink_msg_camera_trigger_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_camera_trigger_t* camera_trigger)
{
 return mavlink_msg_camera_trigger_pack_chan(system_id, component_id, chan, msg, camera_trigger->time_usec, camera_trigger->seq);
}
# 204 "./lib/main/MAVLink/common/./mavlink_msg_camera_trigger.h"
static inline uint64_t mavlink_msg_camera_trigger_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_camera_trigger_get_seq(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}







static inline void mavlink_msg_camera_trigger_decode(const mavlink_message_t* msg, mavlink_camera_trigger_t* camera_trigger)
{




 memcpy(camera_trigger, ((const char *)(&((msg)->payload64[0]))), 12);

}
# 736 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h" 1




typedef struct __mavlink_hil_gps_t
{
 uint64_t time_usec;
 int32_t lat;
 int32_t lon;
 int32_t alt;
 uint16_t eph;
 uint16_t epv;
 uint16_t vel;
 int16_t vn;
 int16_t ve;
 int16_t vd;
 uint16_t cog;
 uint8_t fix_type;
 uint8_t satellites_visible;
} mavlink_hil_gps_t;
# 71 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, int16_t vn, int16_t ve, int16_t vd, uint16_t cog, uint8_t satellites_visible)
{
# 92 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
 mavlink_hil_gps_t packet;
 packet.time_usec = time_usec;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.eph = eph;
 packet.epv = epv;
 packet.vel = vel;
 packet.vn = vn;
 packet.ve = ve;
 packet.vd = vd;
 packet.cog = cog;
 packet.fix_type = fix_type;
 packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 113;

    return mavlink_finalize_message(msg, system_id, component_id, 36, 124);



}
# 139 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t fix_type,int32_t lat,int32_t lon,int32_t alt,uint16_t eph,uint16_t epv,uint16_t vel,int16_t vn,int16_t ve,int16_t vd,uint16_t cog,uint8_t satellites_visible)
{
# 161 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
 mavlink_hil_gps_t packet;
 packet.time_usec = time_usec;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.eph = eph;
 packet.epv = epv;
 packet.vel = vel;
 packet.vn = vn;
 packet.ve = ve;
 packet.vd = vd;
 packet.cog = cog;
 packet.fix_type = fix_type;
 packet.satellites_visible = satellites_visible;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 113;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 124);



}
# 195 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_gps_t* hil_gps)
{
 return mavlink_msg_hil_gps_pack(system_id, component_id, msg, hil_gps->time_usec, hil_gps->fix_type, hil_gps->lat, hil_gps->lon, hil_gps->alt, hil_gps->eph, hil_gps->epv, hil_gps->vel, hil_gps->vn, hil_gps->ve, hil_gps->vd, hil_gps->cog, hil_gps->satellites_visible);
}
# 209 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
static inline uint16_t mavlink_msg_hil_gps_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_gps_t* hil_gps)
{
 return mavlink_msg_hil_gps_pack_chan(system_id, component_id, chan, msg, hil_gps->time_usec, hil_gps->fix_type, hil_gps->lat, hil_gps->lon, hil_gps->alt, hil_gps->eph, hil_gps->epv, hil_gps->vel, hil_gps->vn, hil_gps->ve, hil_gps->vd, hil_gps->cog, hil_gps->satellites_visible);
}
# 347 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
static inline uint64_t mavlink_msg_hil_gps_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_hil_gps_get_fix_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int32_t mavlink_msg_hil_gps_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_hil_gps_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_hil_gps_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint16_t mavlink_msg_hil_gps_get_eph(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 20);
}






static inline uint16_t mavlink_msg_hil_gps_get_epv(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 22);
}






static inline uint16_t mavlink_msg_hil_gps_get_vel(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 24);
}






static inline int16_t mavlink_msg_hil_gps_get_vn(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 26);
}






static inline int16_t mavlink_msg_hil_gps_get_ve(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 28);
}






static inline int16_t mavlink_msg_hil_gps_get_vd(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 30);
}






static inline uint16_t mavlink_msg_hil_gps_get_cog(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 32);
}






static inline uint8_t mavlink_msg_hil_gps_get_satellites_visible(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[35];
}







static inline void mavlink_msg_hil_gps_decode(const mavlink_message_t* msg, mavlink_hil_gps_t* hil_gps)
{
# 495 "./lib/main/MAVLink/common/./mavlink_msg_hil_gps.h"
 memcpy(hil_gps, ((const char *)(&((msg)->payload64[0]))), 36);

}
# 737 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h" 1




typedef struct __mavlink_hil_optical_flow_t
{
 uint64_t time_usec;
 uint32_t integration_time_us;
 float integrated_x;
 float integrated_y;
 float integrated_xgyro;
 float integrated_ygyro;
 float integrated_zgyro;
 uint32_t time_delta_distance_us;
 float distance;
 int16_t temperature;
 uint8_t sensor_id;
 uint8_t quality;
} mavlink_hil_optical_flow_t;
# 68 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t sensor_id, uint32_t integration_time_us, float integrated_x, float integrated_y, float integrated_xgyro, float integrated_ygyro, float integrated_zgyro, int16_t temperature, uint8_t quality, uint32_t time_delta_distance_us, float distance)
{
# 88 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
 mavlink_hil_optical_flow_t packet;
 packet.time_usec = time_usec;
 packet.integration_time_us = integration_time_us;
 packet.integrated_x = integrated_x;
 packet.integrated_y = integrated_y;
 packet.integrated_xgyro = integrated_xgyro;
 packet.integrated_ygyro = integrated_ygyro;
 packet.integrated_zgyro = integrated_zgyro;
 packet.time_delta_distance_us = time_delta_distance_us;
 packet.distance = distance;
 packet.temperature = temperature;
 packet.sensor_id = sensor_id;
 packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


 msg->msgid = 114;

    return mavlink_finalize_message(msg, system_id, component_id, 44, 237);



}
# 133 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t sensor_id,uint32_t integration_time_us,float integrated_x,float integrated_y,float integrated_xgyro,float integrated_ygyro,float integrated_zgyro,int16_t temperature,uint8_t quality,uint32_t time_delta_distance_us,float distance)
{
# 154 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
 mavlink_hil_optical_flow_t packet;
 packet.time_usec = time_usec;
 packet.integration_time_us = integration_time_us;
 packet.integrated_x = integrated_x;
 packet.integrated_y = integrated_y;
 packet.integrated_xgyro = integrated_xgyro;
 packet.integrated_ygyro = integrated_ygyro;
 packet.integrated_zgyro = integrated_zgyro;
 packet.time_delta_distance_us = time_delta_distance_us;
 packet.distance = distance;
 packet.temperature = temperature;
 packet.sensor_id = sensor_id;
 packet.quality = quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 44);


 msg->msgid = 114;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 44, 237);



}
# 187 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_optical_flow_t* hil_optical_flow)
{
 return mavlink_msg_hil_optical_flow_pack(system_id, component_id, msg, hil_optical_flow->time_usec, hil_optical_flow->sensor_id, hil_optical_flow->integration_time_us, hil_optical_flow->integrated_x, hil_optical_flow->integrated_y, hil_optical_flow->integrated_xgyro, hil_optical_flow->integrated_ygyro, hil_optical_flow->integrated_zgyro, hil_optical_flow->temperature, hil_optical_flow->quality, hil_optical_flow->time_delta_distance_us, hil_optical_flow->distance);
}
# 201 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint16_t mavlink_msg_hil_optical_flow_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_optical_flow_t* hil_optical_flow)
{
 return mavlink_msg_hil_optical_flow_pack_chan(system_id, component_id, chan, msg, hil_optical_flow->time_usec, hil_optical_flow->sensor_id, hil_optical_flow->integration_time_us, hil_optical_flow->integrated_x, hil_optical_flow->integrated_y, hil_optical_flow->integrated_xgyro, hil_optical_flow->integrated_ygyro, hil_optical_flow->integrated_zgyro, hil_optical_flow->temperature, hil_optical_flow->quality, hil_optical_flow->time_delta_distance_us, hil_optical_flow->distance);
}
# 334 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
static inline uint64_t mavlink_msg_hil_optical_flow_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_hil_optical_flow_get_sensor_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint32_t mavlink_msg_hil_optical_flow_get_integration_time_us(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 8);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 20);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_optical_flow_get_integrated_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline int16_t mavlink_msg_hil_optical_flow_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 40);
}






static inline uint8_t mavlink_msg_hil_optical_flow_get_quality(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[43];
}






static inline uint32_t mavlink_msg_hil_optical_flow_get_time_delta_distance_us(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 32);
}






static inline float mavlink_msg_hil_optical_flow_get_distance(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 36);
}







static inline void mavlink_msg_hil_optical_flow_decode(const mavlink_message_t* msg, mavlink_hil_optical_flow_t* hil_optical_flow)
{
# 471 "./lib/main/MAVLink/common/./mavlink_msg_hil_optical_flow.h"
 memcpy(hil_optical_flow, ((const char *)(&((msg)->payload64[0]))), 44);

}
# 738 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h" 1




typedef struct __mavlink_hil_state_quaternion_t
{
 uint64_t time_usec;
 float attitude_quaternion[4];
 float rollspeed;
 float pitchspeed;
 float yawspeed;
 int32_t lat;
 int32_t lon;
 int32_t alt;
 int16_t vx;
 int16_t vy;
 int16_t vz;
 uint16_t ind_airspeed;
 uint16_t true_airspeed;
 int16_t xacc;
 int16_t yacc;
 int16_t zacc;
} mavlink_hil_state_quaternion_t;
# 80 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, const float *attitude_quaternion, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, uint16_t ind_airspeed, uint16_t true_airspeed, int16_t xacc, int16_t yacc, int16_t zacc)
{
# 103 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
 mavlink_hil_state_quaternion_t packet;
 packet.time_usec = time_usec;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.ind_airspeed = ind_airspeed;
 packet.true_airspeed = true_airspeed;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 mav_array_memcpy(packet.attitude_quaternion, attitude_quaternion, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


 msg->msgid = 115;

    return mavlink_finalize_message(msg, system_id, component_id, 64, 4);



}
# 155 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,const float *attitude_quaternion,float rollspeed,float pitchspeed,float yawspeed,int32_t lat,int32_t lon,int32_t alt,int16_t vx,int16_t vy,int16_t vz,uint16_t ind_airspeed,uint16_t true_airspeed,int16_t xacc,int16_t yacc,int16_t zacc)
{
# 179 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
 mavlink_hil_state_quaternion_t packet;
 packet.time_usec = time_usec;
 packet.rollspeed = rollspeed;
 packet.pitchspeed = pitchspeed;
 packet.yawspeed = yawspeed;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.vx = vx;
 packet.vy = vy;
 packet.vz = vz;
 packet.ind_airspeed = ind_airspeed;
 packet.true_airspeed = true_airspeed;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 mav_array_memcpy(packet.attitude_quaternion, attitude_quaternion, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 64);


 msg->msgid = 115;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 64, 4);



}
# 215 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_hil_state_quaternion_t* hil_state_quaternion)
{
 return mavlink_msg_hil_state_quaternion_pack(system_id, component_id, msg, hil_state_quaternion->time_usec, hil_state_quaternion->attitude_quaternion, hil_state_quaternion->rollspeed, hil_state_quaternion->pitchspeed, hil_state_quaternion->yawspeed, hil_state_quaternion->lat, hil_state_quaternion->lon, hil_state_quaternion->alt, hil_state_quaternion->vx, hil_state_quaternion->vy, hil_state_quaternion->vz, hil_state_quaternion->ind_airspeed, hil_state_quaternion->true_airspeed, hil_state_quaternion->xacc, hil_state_quaternion->yacc, hil_state_quaternion->zacc);
}
# 229 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint16_t mavlink_msg_hil_state_quaternion_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_hil_state_quaternion_t* hil_state_quaternion)
{
 return mavlink_msg_hil_state_quaternion_pack_chan(system_id, component_id, chan, msg, hil_state_quaternion->time_usec, hil_state_quaternion->attitude_quaternion, hil_state_quaternion->rollspeed, hil_state_quaternion->pitchspeed, hil_state_quaternion->yawspeed, hil_state_quaternion->lat, hil_state_quaternion->lon, hil_state_quaternion->alt, hil_state_quaternion->vx, hil_state_quaternion->vy, hil_state_quaternion->vz, hil_state_quaternion->ind_airspeed, hil_state_quaternion->true_airspeed, hil_state_quaternion->xacc, hil_state_quaternion->yacc, hil_state_quaternion->zacc);
}
# 378 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
static inline uint64_t mavlink_msg_hil_state_quaternion_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_hil_state_quaternion_get_attitude_quaternion(const mavlink_message_t* msg, float *attitude_quaternion)
{
 return _MAV_RETURN_float_array(msg, attitude_quaternion, 4, 8);
}






static inline float mavlink_msg_hil_state_quaternion_get_rollspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_hil_state_quaternion_get_pitchspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_hil_state_quaternion_get_yawspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}






static inline int32_t mavlink_msg_hil_state_quaternion_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 36);
}






static inline int32_t mavlink_msg_hil_state_quaternion_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 40);
}






static inline int32_t mavlink_msg_hil_state_quaternion_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 44);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_vx(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 48);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_vy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 50);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_vz(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 52);
}






static inline uint16_t mavlink_msg_hil_state_quaternion_get_ind_airspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 54);
}






static inline uint16_t mavlink_msg_hil_state_quaternion_get_true_airspeed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 56);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 58);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 60);
}






static inline int16_t mavlink_msg_hil_state_quaternion_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 62);
}







static inline void mavlink_msg_hil_state_quaternion_decode(const mavlink_message_t* msg, mavlink_hil_state_quaternion_t* hil_state_quaternion)
{
# 559 "./lib/main/MAVLink/common/./mavlink_msg_hil_state_quaternion.h"
 memcpy(hil_state_quaternion, ((const char *)(&((msg)->payload64[0]))), 64);

}
# 739 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h" 1




typedef struct __mavlink_scaled_imu2_t
{
 uint32_t time_boot_ms;
 int16_t xacc;
 int16_t yacc;
 int16_t zacc;
 int16_t xgyro;
 int16_t ygyro;
 int16_t zgyro;
 int16_t xmag;
 int16_t ymag;
 int16_t zmag;
} mavlink_scaled_imu2_t;
# 62 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 80 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
 mavlink_scaled_imu2_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 116;

    return mavlink_finalize_message(msg, system_id, component_id, 22, 76);



}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 140 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
 mavlink_scaled_imu2_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 116;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 76);



}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_imu2_t* scaled_imu2)
{
 return mavlink_msg_scaled_imu2_pack(system_id, component_id, msg, scaled_imu2->time_boot_ms, scaled_imu2->xacc, scaled_imu2->yacc, scaled_imu2->zacc, scaled_imu2->xgyro, scaled_imu2->ygyro, scaled_imu2->zgyro, scaled_imu2->xmag, scaled_imu2->ymag, scaled_imu2->zmag);
}
# 185 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
static inline uint16_t mavlink_msg_scaled_imu2_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_imu2_t* scaled_imu2)
{
 return mavlink_msg_scaled_imu2_pack_chan(system_id, component_id, chan, msg, scaled_imu2->time_boot_ms, scaled_imu2->xacc, scaled_imu2->yacc, scaled_imu2->zacc, scaled_imu2->xgyro, scaled_imu2->ygyro, scaled_imu2->zgyro, scaled_imu2->xmag, scaled_imu2->ymag, scaled_imu2->zmag);
}
# 308 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
static inline uint32_t mavlink_msg_scaled_imu2_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int16_t mavlink_msg_scaled_imu2_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_scaled_imu2_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_scaled_imu2_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_scaled_imu2_get_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_scaled_imu2_get_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_scaled_imu2_get_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_scaled_imu2_get_xmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_scaled_imu2_get_ymag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_scaled_imu2_get_zmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 20);
}







static inline void mavlink_msg_scaled_imu2_decode(const mavlink_message_t* msg, mavlink_scaled_imu2_t* scaled_imu2)
{
# 423 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu2.h"
 memcpy(scaled_imu2, ((const char *)(&((msg)->payload64[0]))), 22);

}
# 740 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h" 1




typedef struct __mavlink_log_request_list_t
{
 uint16_t start;
 uint16_t end;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_log_request_list_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t start, uint16_t end)
{
# 56 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
 mavlink_log_request_list_t packet;
 packet.start = start;
 packet.end = end;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 117;

    return mavlink_finalize_message(msg, system_id, component_id, 6, 128);



}
# 85 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t start,uint16_t end)
{
# 98 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
 mavlink_log_request_list_t packet;
 packet.start = start;
 packet.end = end;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 117;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 128);



}
# 123 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_request_list_t* log_request_list)
{
 return mavlink_msg_log_request_list_pack(system_id, component_id, msg, log_request_list->target_system, log_request_list->target_component, log_request_list->start, log_request_list->end);
}
# 137 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
static inline uint16_t mavlink_msg_log_request_list_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_request_list_t* log_request_list)
{
 return mavlink_msg_log_request_list_pack_chan(system_id, component_id, chan, msg, log_request_list->target_system, log_request_list->target_component, log_request_list->start, log_request_list->end);
}
# 230 "./lib/main/MAVLink/common/./mavlink_msg_log_request_list.h"
static inline uint8_t mavlink_msg_log_request_list_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint8_t mavlink_msg_log_request_list_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[5];
}






static inline uint16_t mavlink_msg_log_request_list_get_start(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_log_request_list_get_end(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 2);
}







static inline void mavlink_msg_log_request_list_decode(const mavlink_message_t* msg, mavlink_log_request_list_t* log_request_list)
{






 memcpy(log_request_list, ((const char *)(&((msg)->payload64[0]))), 6);

}
# 741 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h" 1




typedef struct __mavlink_log_entry_t
{
 uint32_t time_utc;
 uint32_t size;
 uint16_t id;
 uint16_t num_logs;
 uint16_t last_log_num;
} mavlink_log_entry_t;
# 47 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t id, uint16_t num_logs, uint16_t last_log_num, uint32_t time_utc, uint32_t size)
{
# 60 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
 mavlink_log_entry_t packet;
 packet.time_utc = time_utc;
 packet.size = size;
 packet.id = id;
 packet.num_logs = num_logs;
 packet.last_log_num = last_log_num;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 118;

    return mavlink_finalize_message(msg, system_id, component_id, 14, 56);



}
# 91 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t id,uint16_t num_logs,uint16_t last_log_num,uint32_t time_utc,uint32_t size)
{
# 105 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
 mavlink_log_entry_t packet;
 packet.time_utc = time_utc;
 packet.size = size;
 packet.id = id;
 packet.num_logs = num_logs;
 packet.last_log_num = last_log_num;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 118;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 56);



}
# 131 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_entry_t* log_entry)
{
 return mavlink_msg_log_entry_pack(system_id, component_id, msg, log_entry->id, log_entry->num_logs, log_entry->last_log_num, log_entry->time_utc, log_entry->size);
}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_entry_t* log_entry)
{
 return mavlink_msg_log_entry_pack_chan(system_id, component_id, chan, msg, log_entry->id, log_entry->num_logs, log_entry->last_log_num, log_entry->time_utc, log_entry->size);
}
# 243 "./lib/main/MAVLink/common/./mavlink_msg_log_entry.h"
static inline uint16_t mavlink_msg_log_entry_get_id(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint16_t mavlink_msg_log_entry_get_num_logs(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 10);
}






static inline uint16_t mavlink_msg_log_entry_get_last_log_num(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 12);
}






static inline uint32_t mavlink_msg_log_entry_get_time_utc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint32_t mavlink_msg_log_entry_get_size(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 4);
}







static inline void mavlink_msg_log_entry_decode(const mavlink_message_t* msg, mavlink_log_entry_t* log_entry)
{







 memcpy(log_entry, ((const char *)(&((msg)->payload64[0]))), 14);

}
# 742 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h" 1




typedef struct __mavlink_log_request_data_t
{
 uint32_t ofs;
 uint32_t count;
 uint16_t id;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_log_request_data_t;
# 47 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint16_t id, uint32_t ofs, uint32_t count)
{
# 60 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
 mavlink_log_request_data_t packet;
 packet.ofs = ofs;
 packet.count = count;
 packet.id = id;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 119;

    return mavlink_finalize_message(msg, system_id, component_id, 12, 116);



}
# 91 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint16_t id,uint32_t ofs,uint32_t count)
{
# 105 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
 mavlink_log_request_data_t packet;
 packet.ofs = ofs;
 packet.count = count;
 packet.id = id;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 12);


 msg->msgid = 119;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 12, 116);



}
# 131 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_request_data_t* log_request_data)
{
 return mavlink_msg_log_request_data_pack(system_id, component_id, msg, log_request_data->target_system, log_request_data->target_component, log_request_data->id, log_request_data->ofs, log_request_data->count);
}
# 145 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
static inline uint16_t mavlink_msg_log_request_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_request_data_t* log_request_data)
{
 return mavlink_msg_log_request_data_pack_chan(system_id, component_id, chan, msg, log_request_data->target_system, log_request_data->target_component, log_request_data->id, log_request_data->ofs, log_request_data->count);
}
# 243 "./lib/main/MAVLink/common/./mavlink_msg_log_request_data.h"
static inline uint8_t mavlink_msg_log_request_data_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint8_t mavlink_msg_log_request_data_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline uint16_t mavlink_msg_log_request_data_get_id(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint32_t mavlink_msg_log_request_data_get_ofs(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint32_t mavlink_msg_log_request_data_get_count(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 4);
}







static inline void mavlink_msg_log_request_data_decode(const mavlink_message_t* msg, mavlink_log_request_data_t* log_request_data)
{







 memcpy(log_request_data, ((const char *)(&((msg)->payload64[0]))), 12);

}
# 743 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h" 1




typedef struct __mavlink_log_data_t
{
 uint32_t ofs;
 uint16_t id;
 uint8_t count;
 uint8_t data[90];
} mavlink_log_data_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t id, uint32_t ofs, uint8_t count, const uint8_t *data)
{
# 55 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
 mavlink_log_data_t packet;
 packet.ofs = ofs;
 packet.id = id;
 packet.count = count;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*90);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 97);


 msg->msgid = 120;

    return mavlink_finalize_message(msg, system_id, component_id, 97, 134);



}
# 83 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t id,uint32_t ofs,uint8_t count,const uint8_t *data)
{
# 95 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
 mavlink_log_data_t packet;
 packet.ofs = ofs;
 packet.id = id;
 packet.count = count;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*90);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 97);


 msg->msgid = 120;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 97, 134);



}
# 119 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_data_t* log_data)
{
 return mavlink_msg_log_data_pack(system_id, component_id, msg, log_data->id, log_data->ofs, log_data->count, log_data->data);
}
# 133 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_data_t* log_data)
{
 return mavlink_msg_log_data_pack_chan(system_id, component_id, chan, msg, log_data->id, log_data->ofs, log_data->count, log_data->data);
}
# 222 "./lib/main/MAVLink/common/./mavlink_msg_log_data.h"
static inline uint16_t mavlink_msg_log_data_get_id(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint32_t mavlink_msg_log_data_get_ofs(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_log_data_get_count(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint16_t mavlink_msg_log_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
 return _MAV_RETURN_uint8_t_array(msg, data, 90, 7);
}







static inline void mavlink_msg_log_data_decode(const mavlink_message_t* msg, mavlink_log_data_t* log_data)
{






 memcpy(log_data, ((const char *)(&((msg)->payload64[0]))), 97);

}
# 744 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_log_erase.h" 1




typedef struct __mavlink_log_erase_t
{
 uint8_t target_system;
 uint8_t target_component;
} mavlink_log_erase_t;
# 38 "./lib/main/MAVLink/common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component)
{







 mavlink_log_erase_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 121;

    return mavlink_finalize_message(msg, system_id, component_id, 2, 237);



}
# 73 "./lib/main/MAVLink/common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component)
{







 mavlink_log_erase_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 121;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 237);



}
# 107 "./lib/main/MAVLink/common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_erase_t* log_erase)
{
 return mavlink_msg_log_erase_pack(system_id, component_id, msg, log_erase->target_system, log_erase->target_component);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_log_erase.h"
static inline uint16_t mavlink_msg_log_erase_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_erase_t* log_erase)
{
 return mavlink_msg_log_erase_pack_chan(system_id, component_id, chan, msg, log_erase->target_system, log_erase->target_component);
}
# 204 "./lib/main/MAVLink/common/./mavlink_msg_log_erase.h"
static inline uint8_t mavlink_msg_log_erase_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_log_erase_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_log_erase_decode(const mavlink_message_t* msg, mavlink_log_erase_t* log_erase)
{




 memcpy(log_erase, ((const char *)(&((msg)->payload64[0]))), 2);

}
# 745 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_log_request_end.h" 1




typedef struct __mavlink_log_request_end_t
{
 uint8_t target_system;
 uint8_t target_component;
} mavlink_log_request_end_t;
# 38 "./lib/main/MAVLink/common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component)
{







 mavlink_log_request_end_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 122;

    return mavlink_finalize_message(msg, system_id, component_id, 2, 203);



}
# 73 "./lib/main/MAVLink/common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component)
{







 mavlink_log_request_end_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 2);


 msg->msgid = 122;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 2, 203);



}
# 107 "./lib/main/MAVLink/common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_log_request_end_t* log_request_end)
{
 return mavlink_msg_log_request_end_pack(system_id, component_id, msg, log_request_end->target_system, log_request_end->target_component);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_log_request_end.h"
static inline uint16_t mavlink_msg_log_request_end_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_log_request_end_t* log_request_end)
{
 return mavlink_msg_log_request_end_pack_chan(system_id, component_id, chan, msg, log_request_end->target_system, log_request_end->target_component);
}
# 204 "./lib/main/MAVLink/common/./mavlink_msg_log_request_end.h"
static inline uint8_t mavlink_msg_log_request_end_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_log_request_end_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}







static inline void mavlink_msg_log_request_end_decode(const mavlink_message_t* msg, mavlink_log_request_end_t* log_request_end)
{




 memcpy(log_request_end, ((const char *)(&((msg)->payload64[0]))), 2);

}
# 746 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h" 1




typedef struct __mavlink_gps_inject_data_t
{
 uint8_t target_system;
 uint8_t target_component;
 uint8_t len;
 uint8_t data[110];
} mavlink_gps_inject_data_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_system, uint8_t target_component, uint8_t len, const uint8_t *data)
{
# 55 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
 mavlink_gps_inject_data_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.len = len;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*110);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 113);


 msg->msgid = 123;

    return mavlink_finalize_message(msg, system_id, component_id, 113, 250);



}
# 83 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_system,uint8_t target_component,uint8_t len,const uint8_t *data)
{
# 95 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
 mavlink_gps_inject_data_t packet;
 packet.target_system = target_system;
 packet.target_component = target_component;
 packet.len = len;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*110);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 113);


 msg->msgid = 123;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 113, 250);



}
# 119 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_inject_data_t* gps_inject_data)
{
 return mavlink_msg_gps_inject_data_pack(system_id, component_id, msg, gps_inject_data->target_system, gps_inject_data->target_component, gps_inject_data->len, gps_inject_data->data);
}
# 133 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
static inline uint16_t mavlink_msg_gps_inject_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_inject_data_t* gps_inject_data)
{
 return mavlink_msg_gps_inject_data_pack_chan(system_id, component_id, chan, msg, gps_inject_data->target_system, gps_inject_data->target_component, gps_inject_data->len, gps_inject_data->data);
}
# 222 "./lib/main/MAVLink/common/./mavlink_msg_gps_inject_data.h"
static inline uint8_t mavlink_msg_gps_inject_data_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint8_t mavlink_msg_gps_inject_data_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[1];
}






static inline uint8_t mavlink_msg_gps_inject_data_get_len(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint16_t mavlink_msg_gps_inject_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
 return _MAV_RETURN_uint8_t_array(msg, data, 110, 3);
}







static inline void mavlink_msg_gps_inject_data_decode(const mavlink_message_t* msg, mavlink_gps_inject_data_t* gps_inject_data)
{






 memcpy(gps_inject_data, ((const char *)(&((msg)->payload64[0]))), 113);

}
# 747 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h" 1




typedef struct __mavlink_gps2_raw_t
{
 uint64_t time_usec;
 int32_t lat;
 int32_t lon;
 int32_t alt;
 uint32_t dgps_age;
 uint16_t eph;
 uint16_t epv;
 uint16_t vel;
 uint16_t cog;
 uint8_t fix_type;
 uint8_t satellites_visible;
 uint8_t dgps_numch;
} mavlink_gps2_raw_t;
# 68 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible, uint8_t dgps_numch, uint32_t dgps_age)
{
# 88 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
 mavlink_gps2_raw_t packet;
 packet.time_usec = time_usec;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.dgps_age = dgps_age;
 packet.eph = eph;
 packet.epv = epv;
 packet.vel = vel;
 packet.cog = cog;
 packet.fix_type = fix_type;
 packet.satellites_visible = satellites_visible;
 packet.dgps_numch = dgps_numch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 124;

    return mavlink_finalize_message(msg, system_id, component_id, 35, 87);



}
# 133 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t fix_type,int32_t lat,int32_t lon,int32_t alt,uint16_t eph,uint16_t epv,uint16_t vel,uint16_t cog,uint8_t satellites_visible,uint8_t dgps_numch,uint32_t dgps_age)
{
# 154 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
 mavlink_gps2_raw_t packet;
 packet.time_usec = time_usec;
 packet.lat = lat;
 packet.lon = lon;
 packet.alt = alt;
 packet.dgps_age = dgps_age;
 packet.eph = eph;
 packet.epv = epv;
 packet.vel = vel;
 packet.cog = cog;
 packet.fix_type = fix_type;
 packet.satellites_visible = satellites_visible;
 packet.dgps_numch = dgps_numch;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 124;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 87);



}
# 187 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps2_raw_t* gps2_raw)
{
 return mavlink_msg_gps2_raw_pack(system_id, component_id, msg, gps2_raw->time_usec, gps2_raw->fix_type, gps2_raw->lat, gps2_raw->lon, gps2_raw->alt, gps2_raw->eph, gps2_raw->epv, gps2_raw->vel, gps2_raw->cog, gps2_raw->satellites_visible, gps2_raw->dgps_numch, gps2_raw->dgps_age);
}
# 201 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
static inline uint16_t mavlink_msg_gps2_raw_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps2_raw_t* gps2_raw)
{
 return mavlink_msg_gps2_raw_pack_chan(system_id, component_id, chan, msg, gps2_raw->time_usec, gps2_raw->fix_type, gps2_raw->lat, gps2_raw->lon, gps2_raw->alt, gps2_raw->eph, gps2_raw->epv, gps2_raw->vel, gps2_raw->cog, gps2_raw->satellites_visible, gps2_raw->dgps_numch, gps2_raw->dgps_age);
}
# 334 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
static inline uint64_t mavlink_msg_gps2_raw_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps2_raw_get_fix_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline int32_t mavlink_msg_gps2_raw_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps2_raw_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps2_raw_get_alt(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint16_t mavlink_msg_gps2_raw_get_eph(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 24);
}






static inline uint16_t mavlink_msg_gps2_raw_get_epv(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 26);
}






static inline uint16_t mavlink_msg_gps2_raw_get_vel(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint16_t mavlink_msg_gps2_raw_get_cog(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 30);
}






static inline uint8_t mavlink_msg_gps2_raw_get_satellites_visible(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_gps2_raw_get_dgps_numch(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline uint32_t mavlink_msg_gps2_raw_get_dgps_age(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 20);
}







static inline void mavlink_msg_gps2_raw_decode(const mavlink_message_t* msg, mavlink_gps2_raw_t* gps2_raw)
{
# 471 "./lib/main/MAVLink/common/./mavlink_msg_gps2_raw.h"
 memcpy(gps2_raw, ((const char *)(&((msg)->payload64[0]))), 35);

}
# 748 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h" 1




typedef struct __mavlink_power_status_t
{
 uint16_t Vcc;
 uint16_t Vservo;
 uint16_t flags;
} mavlink_power_status_t;
# 41 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t Vcc, uint16_t Vservo, uint16_t flags)
{
# 52 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
 mavlink_power_status_t packet;
 packet.Vcc = Vcc;
 packet.Vservo = Vservo;
 packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 125;

    return mavlink_finalize_message(msg, system_id, component_id, 6, 203);



}
# 79 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t Vcc,uint16_t Vservo,uint16_t flags)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
 mavlink_power_status_t packet;
 packet.Vcc = Vcc;
 packet.Vservo = Vservo;
 packet.flags = flags;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 6);


 msg->msgid = 125;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 6, 203);



}
# 115 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_power_status_t* power_status)
{
 return mavlink_msg_power_status_pack(system_id, component_id, msg, power_status->Vcc, power_status->Vservo, power_status->flags);
}
# 129 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_power_status_t* power_status)
{
 return mavlink_msg_power_status_pack_chan(system_id, component_id, chan, msg, power_status->Vcc, power_status->Vservo, power_status->flags);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_power_status.h"
static inline uint16_t mavlink_msg_power_status_get_Vcc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_power_status_get_Vservo(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 2);
}






static inline uint16_t mavlink_msg_power_status_get_flags(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}







static inline void mavlink_msg_power_status_decode(const mavlink_message_t* msg, mavlink_power_status_t* power_status)
{





 memcpy(power_status, ((const char *)(&((msg)->payload64[0]))), 6);

}
# 749 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h" 1




typedef struct __mavlink_serial_control_t
{
 uint32_t baudrate;
 uint16_t timeout;
 uint8_t device;
 uint8_t flags;
 uint8_t count;
 uint8_t data[70];
} mavlink_serial_control_t;
# 50 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t device, uint8_t flags, uint16_t timeout, uint32_t baudrate, uint8_t count, const uint8_t *data)
{
# 63 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
 mavlink_serial_control_t packet;
 packet.baudrate = baudrate;
 packet.timeout = timeout;
 packet.device = device;
 packet.flags = flags;
 packet.count = count;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*70);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 79);


 msg->msgid = 126;

    return mavlink_finalize_message(msg, system_id, component_id, 79, 220);



}
# 95 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t device,uint8_t flags,uint16_t timeout,uint32_t baudrate,uint8_t count,const uint8_t *data)
{
# 109 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
 mavlink_serial_control_t packet;
 packet.baudrate = baudrate;
 packet.timeout = timeout;
 packet.device = device;
 packet.flags = flags;
 packet.count = count;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*70);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 79);


 msg->msgid = 126;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 79, 220);



}
# 135 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_serial_control_t* serial_control)
{
 return mavlink_msg_serial_control_pack(system_id, component_id, msg, serial_control->device, serial_control->flags, serial_control->timeout, serial_control->baudrate, serial_control->count, serial_control->data);
}
# 149 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
static inline uint16_t mavlink_msg_serial_control_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_serial_control_t* serial_control)
{
 return mavlink_msg_serial_control_pack_chan(system_id, component_id, chan, msg, serial_control->device, serial_control->flags, serial_control->timeout, serial_control->baudrate, serial_control->count, serial_control->data);
}
# 248 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
static inline uint8_t mavlink_msg_serial_control_get_device(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[6];
}






static inline uint8_t mavlink_msg_serial_control_get_flags(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[7];
}






static inline uint16_t mavlink_msg_serial_control_get_timeout(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint32_t mavlink_msg_serial_control_get_baudrate(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_serial_control_get_count(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline uint16_t mavlink_msg_serial_control_get_data(const mavlink_message_t* msg, uint8_t *data)
{
 return _MAV_RETURN_uint8_t_array(msg, data, 70, 9);
}







static inline void mavlink_msg_serial_control_decode(const mavlink_message_t* msg, mavlink_serial_control_t* serial_control)
{
# 319 "./lib/main/MAVLink/common/./mavlink_msg_serial_control.h"
 memcpy(serial_control, ((const char *)(&((msg)->payload64[0]))), 79);

}
# 750 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h" 1




typedef struct __mavlink_gps_rtk_t
{
 uint32_t time_last_baseline_ms;
 uint32_t tow;
 int32_t baseline_a_mm;
 int32_t baseline_b_mm;
 int32_t baseline_c_mm;
 uint32_t accuracy;
 int32_t iar_num_hypotheses;
 uint16_t wn;
 uint8_t rtk_receiver_id;
 uint8_t rtk_health;
 uint8_t rtk_rate;
 uint8_t nsats;
 uint8_t baseline_coords_type;
} mavlink_gps_rtk_t;
# 71 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_last_baseline_ms, uint8_t rtk_receiver_id, uint16_t wn, uint32_t tow, uint8_t rtk_health, uint8_t rtk_rate, uint8_t nsats, uint8_t baseline_coords_type, int32_t baseline_a_mm, int32_t baseline_b_mm, int32_t baseline_c_mm, uint32_t accuracy, int32_t iar_num_hypotheses)
{
# 92 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
 mavlink_gps_rtk_t packet;
 packet.time_last_baseline_ms = time_last_baseline_ms;
 packet.tow = tow;
 packet.baseline_a_mm = baseline_a_mm;
 packet.baseline_b_mm = baseline_b_mm;
 packet.baseline_c_mm = baseline_c_mm;
 packet.accuracy = accuracy;
 packet.iar_num_hypotheses = iar_num_hypotheses;
 packet.wn = wn;
 packet.rtk_receiver_id = rtk_receiver_id;
 packet.rtk_health = rtk_health;
 packet.rtk_rate = rtk_rate;
 packet.nsats = nsats;
 packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 127;

    return mavlink_finalize_message(msg, system_id, component_id, 35, 25);



}
# 139 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_last_baseline_ms,uint8_t rtk_receiver_id,uint16_t wn,uint32_t tow,uint8_t rtk_health,uint8_t rtk_rate,uint8_t nsats,uint8_t baseline_coords_type,int32_t baseline_a_mm,int32_t baseline_b_mm,int32_t baseline_c_mm,uint32_t accuracy,int32_t iar_num_hypotheses)
{
# 161 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
 mavlink_gps_rtk_t packet;
 packet.time_last_baseline_ms = time_last_baseline_ms;
 packet.tow = tow;
 packet.baseline_a_mm = baseline_a_mm;
 packet.baseline_b_mm = baseline_b_mm;
 packet.baseline_c_mm = baseline_c_mm;
 packet.accuracy = accuracy;
 packet.iar_num_hypotheses = iar_num_hypotheses;
 packet.wn = wn;
 packet.rtk_receiver_id = rtk_receiver_id;
 packet.rtk_health = rtk_health;
 packet.rtk_rate = rtk_rate;
 packet.nsats = nsats;
 packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 127;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 25);



}
# 195 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps_rtk_t* gps_rtk)
{
 return mavlink_msg_gps_rtk_pack(system_id, component_id, msg, gps_rtk->time_last_baseline_ms, gps_rtk->rtk_receiver_id, gps_rtk->wn, gps_rtk->tow, gps_rtk->rtk_health, gps_rtk->rtk_rate, gps_rtk->nsats, gps_rtk->baseline_coords_type, gps_rtk->baseline_a_mm, gps_rtk->baseline_b_mm, gps_rtk->baseline_c_mm, gps_rtk->accuracy, gps_rtk->iar_num_hypotheses);
}
# 209 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
static inline uint16_t mavlink_msg_gps_rtk_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps_rtk_t* gps_rtk)
{
 return mavlink_msg_gps_rtk_pack_chan(system_id, component_id, chan, msg, gps_rtk->time_last_baseline_ms, gps_rtk->rtk_receiver_id, gps_rtk->wn, gps_rtk->tow, gps_rtk->rtk_health, gps_rtk->rtk_rate, gps_rtk->nsats, gps_rtk->baseline_coords_type, gps_rtk->baseline_a_mm, gps_rtk->baseline_b_mm, gps_rtk->baseline_c_mm, gps_rtk->accuracy, gps_rtk->iar_num_hypotheses);
}
# 347 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
static inline uint32_t mavlink_msg_gps_rtk_get_time_last_baseline_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps_rtk_get_rtk_receiver_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint16_t mavlink_msg_gps_rtk_get_wn(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint32_t mavlink_msg_gps_rtk_get_tow(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 4);
}






static inline uint8_t mavlink_msg_gps_rtk_get_rtk_health(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint8_t mavlink_msg_gps_rtk_get_rtk_rate(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_gps_rtk_get_nsats(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_gps_rtk_get_baseline_coords_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int32_t mavlink_msg_gps_rtk_get_baseline_a_mm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps_rtk_get_baseline_b_mm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps_rtk_get_baseline_c_mm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint32_t mavlink_msg_gps_rtk_get_accuracy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 20);
}






static inline int32_t mavlink_msg_gps_rtk_get_iar_num_hypotheses(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 24);
}







static inline void mavlink_msg_gps_rtk_decode(const mavlink_message_t* msg, mavlink_gps_rtk_t* gps_rtk)
{
# 495 "./lib/main/MAVLink/common/./mavlink_msg_gps_rtk.h"
 memcpy(gps_rtk, ((const char *)(&((msg)->payload64[0]))), 35);

}
# 751 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h" 1




typedef struct __mavlink_gps2_rtk_t
{
 uint32_t time_last_baseline_ms;
 uint32_t tow;
 int32_t baseline_a_mm;
 int32_t baseline_b_mm;
 int32_t baseline_c_mm;
 uint32_t accuracy;
 int32_t iar_num_hypotheses;
 uint16_t wn;
 uint8_t rtk_receiver_id;
 uint8_t rtk_health;
 uint8_t rtk_rate;
 uint8_t nsats;
 uint8_t baseline_coords_type;
} mavlink_gps2_rtk_t;
# 71 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_last_baseline_ms, uint8_t rtk_receiver_id, uint16_t wn, uint32_t tow, uint8_t rtk_health, uint8_t rtk_rate, uint8_t nsats, uint8_t baseline_coords_type, int32_t baseline_a_mm, int32_t baseline_b_mm, int32_t baseline_c_mm, uint32_t accuracy, int32_t iar_num_hypotheses)
{
# 92 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
 mavlink_gps2_rtk_t packet;
 packet.time_last_baseline_ms = time_last_baseline_ms;
 packet.tow = tow;
 packet.baseline_a_mm = baseline_a_mm;
 packet.baseline_b_mm = baseline_b_mm;
 packet.baseline_c_mm = baseline_c_mm;
 packet.accuracy = accuracy;
 packet.iar_num_hypotheses = iar_num_hypotheses;
 packet.wn = wn;
 packet.rtk_receiver_id = rtk_receiver_id;
 packet.rtk_health = rtk_health;
 packet.rtk_rate = rtk_rate;
 packet.nsats = nsats;
 packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 128;

    return mavlink_finalize_message(msg, system_id, component_id, 35, 226);



}
# 139 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_last_baseline_ms,uint8_t rtk_receiver_id,uint16_t wn,uint32_t tow,uint8_t rtk_health,uint8_t rtk_rate,uint8_t nsats,uint8_t baseline_coords_type,int32_t baseline_a_mm,int32_t baseline_b_mm,int32_t baseline_c_mm,uint32_t accuracy,int32_t iar_num_hypotheses)
{
# 161 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
 mavlink_gps2_rtk_t packet;
 packet.time_last_baseline_ms = time_last_baseline_ms;
 packet.tow = tow;
 packet.baseline_a_mm = baseline_a_mm;
 packet.baseline_b_mm = baseline_b_mm;
 packet.baseline_c_mm = baseline_c_mm;
 packet.accuracy = accuracy;
 packet.iar_num_hypotheses = iar_num_hypotheses;
 packet.wn = wn;
 packet.rtk_receiver_id = rtk_receiver_id;
 packet.rtk_health = rtk_health;
 packet.rtk_rate = rtk_rate;
 packet.nsats = nsats;
 packet.baseline_coords_type = baseline_coords_type;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 35);


 msg->msgid = 128;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 35, 226);



}
# 195 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_gps2_rtk_t* gps2_rtk)
{
 return mavlink_msg_gps2_rtk_pack(system_id, component_id, msg, gps2_rtk->time_last_baseline_ms, gps2_rtk->rtk_receiver_id, gps2_rtk->wn, gps2_rtk->tow, gps2_rtk->rtk_health, gps2_rtk->rtk_rate, gps2_rtk->nsats, gps2_rtk->baseline_coords_type, gps2_rtk->baseline_a_mm, gps2_rtk->baseline_b_mm, gps2_rtk->baseline_c_mm, gps2_rtk->accuracy, gps2_rtk->iar_num_hypotheses);
}
# 209 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
static inline uint16_t mavlink_msg_gps2_rtk_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_gps2_rtk_t* gps2_rtk)
{
 return mavlink_msg_gps2_rtk_pack_chan(system_id, component_id, chan, msg, gps2_rtk->time_last_baseline_ms, gps2_rtk->rtk_receiver_id, gps2_rtk->wn, gps2_rtk->tow, gps2_rtk->rtk_health, gps2_rtk->rtk_rate, gps2_rtk->nsats, gps2_rtk->baseline_coords_type, gps2_rtk->baseline_a_mm, gps2_rtk->baseline_b_mm, gps2_rtk->baseline_c_mm, gps2_rtk->accuracy, gps2_rtk->iar_num_hypotheses);
}
# 347 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
static inline uint32_t mavlink_msg_gps2_rtk_get_time_last_baseline_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_gps2_rtk_get_rtk_receiver_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[30];
}






static inline uint16_t mavlink_msg_gps2_rtk_get_wn(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 28);
}






static inline uint32_t mavlink_msg_gps2_rtk_get_tow(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 4);
}






static inline uint8_t mavlink_msg_gps2_rtk_get_rtk_health(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[31];
}






static inline uint8_t mavlink_msg_gps2_rtk_get_rtk_rate(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_gps2_rtk_get_nsats(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_gps2_rtk_get_baseline_coords_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int32_t mavlink_msg_gps2_rtk_get_baseline_a_mm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_gps2_rtk_get_baseline_b_mm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline int32_t mavlink_msg_gps2_rtk_get_baseline_c_mm(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 16);
}






static inline uint32_t mavlink_msg_gps2_rtk_get_accuracy(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 20);
}






static inline int32_t mavlink_msg_gps2_rtk_get_iar_num_hypotheses(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 24);
}







static inline void mavlink_msg_gps2_rtk_decode(const mavlink_message_t* msg, mavlink_gps2_rtk_t* gps2_rtk)
{
# 495 "./lib/main/MAVLink/common/./mavlink_msg_gps2_rtk.h"
 memcpy(gps2_rtk, ((const char *)(&((msg)->payload64[0]))), 35);

}
# 752 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h" 1




typedef struct __mavlink_scaled_imu3_t
{
 uint32_t time_boot_ms;
 int16_t xacc;
 int16_t yacc;
 int16_t zacc;
 int16_t xgyro;
 int16_t ygyro;
 int16_t zgyro;
 int16_t xmag;
 int16_t ymag;
 int16_t zmag;
} mavlink_scaled_imu3_t;
# 62 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
# 80 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
 mavlink_scaled_imu3_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 129;

    return mavlink_finalize_message(msg, system_id, component_id, 22, 46);



}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,int16_t xacc,int16_t yacc,int16_t zacc,int16_t xgyro,int16_t ygyro,int16_t zgyro,int16_t xmag,int16_t ymag,int16_t zmag)
{
# 140 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
 mavlink_scaled_imu3_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.xacc = xacc;
 packet.yacc = yacc;
 packet.zacc = zacc;
 packet.xgyro = xgyro;
 packet.ygyro = ygyro;
 packet.zgyro = zgyro;
 packet.xmag = xmag;
 packet.ymag = ymag;
 packet.zmag = zmag;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 129;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 46);



}
# 171 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_imu3_t* scaled_imu3)
{
 return mavlink_msg_scaled_imu3_pack(system_id, component_id, msg, scaled_imu3->time_boot_ms, scaled_imu3->xacc, scaled_imu3->yacc, scaled_imu3->zacc, scaled_imu3->xgyro, scaled_imu3->ygyro, scaled_imu3->zgyro, scaled_imu3->xmag, scaled_imu3->ymag, scaled_imu3->zmag);
}
# 185 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
static inline uint16_t mavlink_msg_scaled_imu3_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_imu3_t* scaled_imu3)
{
 return mavlink_msg_scaled_imu3_pack_chan(system_id, component_id, chan, msg, scaled_imu3->time_boot_ms, scaled_imu3->xacc, scaled_imu3->yacc, scaled_imu3->zacc, scaled_imu3->xgyro, scaled_imu3->ygyro, scaled_imu3->zgyro, scaled_imu3->xmag, scaled_imu3->ymag, scaled_imu3->zmag);
}
# 308 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
static inline uint32_t mavlink_msg_scaled_imu3_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline int16_t mavlink_msg_scaled_imu3_get_xacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 4);
}






static inline int16_t mavlink_msg_scaled_imu3_get_yacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 6);
}






static inline int16_t mavlink_msg_scaled_imu3_get_zacc(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 8);
}






static inline int16_t mavlink_msg_scaled_imu3_get_xgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 10);
}






static inline int16_t mavlink_msg_scaled_imu3_get_ygyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}






static inline int16_t mavlink_msg_scaled_imu3_get_zgyro(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 14);
}






static inline int16_t mavlink_msg_scaled_imu3_get_xmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 16);
}






static inline int16_t mavlink_msg_scaled_imu3_get_ymag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 18);
}






static inline int16_t mavlink_msg_scaled_imu3_get_zmag(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 20);
}







static inline void mavlink_msg_scaled_imu3_decode(const mavlink_message_t* msg, mavlink_scaled_imu3_t* scaled_imu3)
{
# 423 "./lib/main/MAVLink/common/./mavlink_msg_scaled_imu3.h"
 memcpy(scaled_imu3, ((const char *)(&((msg)->payload64[0]))), 22);

}
# 753 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h" 1




typedef struct __mavlink_data_transmission_handshake_t
{
 uint32_t size;
 uint16_t width;
 uint16_t height;
 uint16_t packets;
 uint8_t type;
 uint8_t payload;
 uint8_t jpg_quality;
} mavlink_data_transmission_handshake_t;
# 53 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t type, uint32_t size, uint16_t width, uint16_t height, uint16_t packets, uint8_t payload, uint8_t jpg_quality)
{
# 68 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
 mavlink_data_transmission_handshake_t packet;
 packet.size = size;
 packet.width = width;
 packet.height = height;
 packet.packets = packets;
 packet.type = type;
 packet.payload = payload;
 packet.jpg_quality = jpg_quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


 msg->msgid = 130;

    return mavlink_finalize_message(msg, system_id, component_id, 13, 29);



}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t type,uint32_t size,uint16_t width,uint16_t height,uint16_t packets,uint8_t payload,uint8_t jpg_quality)
{
# 119 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
 mavlink_data_transmission_handshake_t packet;
 packet.size = size;
 packet.width = width;
 packet.height = height;
 packet.packets = packets;
 packet.type = type;
 packet.payload = payload;
 packet.jpg_quality = jpg_quality;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 13);


 msg->msgid = 130;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 13, 29);



}
# 147 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_data_transmission_handshake_t* data_transmission_handshake)
{
 return mavlink_msg_data_transmission_handshake_pack(system_id, component_id, msg, data_transmission_handshake->type, data_transmission_handshake->size, data_transmission_handshake->width, data_transmission_handshake->height, data_transmission_handshake->packets, data_transmission_handshake->payload, data_transmission_handshake->jpg_quality);
}
# 161 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint16_t mavlink_msg_data_transmission_handshake_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_data_transmission_handshake_t* data_transmission_handshake)
{
 return mavlink_msg_data_transmission_handshake_pack_chan(system_id, component_id, chan, msg, data_transmission_handshake->type, data_transmission_handshake->size, data_transmission_handshake->width, data_transmission_handshake->height, data_transmission_handshake->packets, data_transmission_handshake->payload, data_transmission_handshake->jpg_quality);
}
# 269 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
static inline uint8_t mavlink_msg_data_transmission_handshake_get_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint32_t mavlink_msg_data_transmission_handshake_get_size(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_data_transmission_handshake_get_width(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_data_transmission_handshake_get_height(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_data_transmission_handshake_get_packets(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint8_t mavlink_msg_data_transmission_handshake_get_payload(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline uint8_t mavlink_msg_data_transmission_handshake_get_jpg_quality(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}







static inline void mavlink_msg_data_transmission_handshake_decode(const mavlink_message_t* msg, mavlink_data_transmission_handshake_t* data_transmission_handshake)
{
# 351 "./lib/main/MAVLink/common/./mavlink_msg_data_transmission_handshake.h"
 memcpy(data_transmission_handshake, ((const char *)(&((msg)->payload64[0]))), 13);

}
# 754 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_encapsulated_data.h" 1




typedef struct __mavlink_encapsulated_data_t
{
 uint16_t seqnr;
 uint8_t data[253];
} mavlink_encapsulated_data_t;
# 38 "./lib/main/MAVLink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t seqnr, const uint8_t *data)
{






 mavlink_encapsulated_data_t packet;
 packet.seqnr = seqnr;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*253);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 255);


 msg->msgid = 131;

    return mavlink_finalize_message(msg, system_id, component_id, 255, 223);



}
# 71 "./lib/main/MAVLink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t seqnr,const uint8_t *data)
{






 mavlink_encapsulated_data_t packet;
 packet.seqnr = seqnr;
 mav_array_memcpy(packet.data, data, sizeof(uint8_t)*253);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 255);


 msg->msgid = 131;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 255, 223);



}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_encapsulated_data_t* encapsulated_data)
{
 return mavlink_msg_encapsulated_data_pack(system_id, component_id, msg, encapsulated_data->seqnr, encapsulated_data->data);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_encapsulated_data_t* encapsulated_data)
{
 return mavlink_msg_encapsulated_data_pack_chan(system_id, component_id, chan, msg, encapsulated_data->seqnr, encapsulated_data->data);
}
# 196 "./lib/main/MAVLink/common/./mavlink_msg_encapsulated_data.h"
static inline uint16_t mavlink_msg_encapsulated_data_get_seqnr(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_encapsulated_data_get_data(const mavlink_message_t* msg, uint8_t *data)
{
 return _MAV_RETURN_uint8_t_array(msg, data, 253, 2);
}







static inline void mavlink_msg_encapsulated_data_decode(const mavlink_message_t* msg, mavlink_encapsulated_data_t* encapsulated_data)
{




 memcpy(encapsulated_data, ((const char *)(&((msg)->payload64[0]))), 255);

}
# 755 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h" 1




typedef struct __mavlink_distance_sensor_t
{
 uint32_t time_boot_ms;
 uint16_t min_distance;
 uint16_t max_distance;
 uint16_t current_distance;
 uint8_t type;
 uint8_t id;
 uint8_t orientation;
 uint8_t covariance;
} mavlink_distance_sensor_t;
# 56 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint16_t min_distance, uint16_t max_distance, uint16_t current_distance, uint8_t type, uint8_t id, uint8_t orientation, uint8_t covariance)
{
# 72 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
 mavlink_distance_sensor_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.min_distance = min_distance;
 packet.max_distance = max_distance;
 packet.current_distance = current_distance;
 packet.type = type;
 packet.id = id;
 packet.orientation = orientation;
 packet.covariance = covariance;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 132;

    return mavlink_finalize_message(msg, system_id, component_id, 14, 85);



}
# 109 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint16_t min_distance,uint16_t max_distance,uint16_t current_distance,uint8_t type,uint8_t id,uint8_t orientation,uint8_t covariance)
{
# 126 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
 mavlink_distance_sensor_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.min_distance = min_distance;
 packet.max_distance = max_distance;
 packet.current_distance = current_distance;
 packet.type = type;
 packet.id = id;
 packet.orientation = orientation;
 packet.covariance = covariance;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 132;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 85);



}
# 155 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_distance_sensor_t* distance_sensor)
{
 return mavlink_msg_distance_sensor_pack(system_id, component_id, msg, distance_sensor->time_boot_ms, distance_sensor->min_distance, distance_sensor->max_distance, distance_sensor->current_distance, distance_sensor->type, distance_sensor->id, distance_sensor->orientation, distance_sensor->covariance);
}
# 169 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
static inline uint16_t mavlink_msg_distance_sensor_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_distance_sensor_t* distance_sensor)
{
 return mavlink_msg_distance_sensor_pack_chan(system_id, component_id, chan, msg, distance_sensor->time_boot_ms, distance_sensor->min_distance, distance_sensor->max_distance, distance_sensor->current_distance, distance_sensor->type, distance_sensor->id, distance_sensor->orientation, distance_sensor->covariance);
}
# 282 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
static inline uint32_t mavlink_msg_distance_sensor_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_distance_sensor_get_min_distance(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 4);
}






static inline uint16_t mavlink_msg_distance_sensor_get_max_distance(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 6);
}






static inline uint16_t mavlink_msg_distance_sensor_get_current_distance(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint8_t mavlink_msg_distance_sensor_get_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[10];
}






static inline uint8_t mavlink_msg_distance_sensor_get_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[11];
}






static inline uint8_t mavlink_msg_distance_sensor_get_orientation(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[12];
}






static inline uint8_t mavlink_msg_distance_sensor_get_covariance(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[13];
}







static inline void mavlink_msg_distance_sensor_decode(const mavlink_message_t* msg, mavlink_distance_sensor_t* distance_sensor)
{
# 375 "./lib/main/MAVLink/common/./mavlink_msg_distance_sensor.h"
 memcpy(distance_sensor, ((const char *)(&((msg)->payload64[0]))), 14);

}
# 756 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h" 1




typedef struct __mavlink_terrain_request_t
{
 uint64_t mask;
 int32_t lat;
 int32_t lon;
 uint16_t grid_spacing;
} mavlink_terrain_request_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             int32_t lat, int32_t lon, uint16_t grid_spacing, uint64_t mask)
{
# 56 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
 mavlink_terrain_request_t packet;
 packet.mask = mask;
 packet.lat = lat;
 packet.lon = lon;
 packet.grid_spacing = grid_spacing;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 133;

    return mavlink_finalize_message(msg, system_id, component_id, 18, 6);



}
# 85 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 int32_t lat,int32_t lon,uint16_t grid_spacing,uint64_t mask)
{
# 98 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
 mavlink_terrain_request_t packet;
 packet.mask = mask;
 packet.lat = lat;
 packet.lon = lon;
 packet.grid_spacing = grid_spacing;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 133;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 6);



}
# 123 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_request_t* terrain_request)
{
 return mavlink_msg_terrain_request_pack(system_id, component_id, msg, terrain_request->lat, terrain_request->lon, terrain_request->grid_spacing, terrain_request->mask);
}
# 137 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
static inline uint16_t mavlink_msg_terrain_request_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_request_t* terrain_request)
{
 return mavlink_msg_terrain_request_pack_chan(system_id, component_id, chan, msg, terrain_request->lat, terrain_request->lon, terrain_request->grid_spacing, terrain_request->mask);
}
# 230 "./lib/main/MAVLink/common/./mavlink_msg_terrain_request.h"
static inline int32_t mavlink_msg_terrain_request_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 8);
}






static inline int32_t mavlink_msg_terrain_request_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 12);
}






static inline uint16_t mavlink_msg_terrain_request_get_grid_spacing(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 16);
}






static inline uint64_t mavlink_msg_terrain_request_get_mask(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}







static inline void mavlink_msg_terrain_request_decode(const mavlink_message_t* msg, mavlink_terrain_request_t* terrain_request)
{






 memcpy(terrain_request, ((const char *)(&((msg)->payload64[0]))), 18);

}
# 757 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h" 1




typedef struct __mavlink_terrain_data_t
{
 int32_t lat;
 int32_t lon;
 uint16_t grid_spacing;
 int16_t data[16];
 uint8_t gridbit;
} mavlink_terrain_data_t;
# 47 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             int32_t lat, int32_t lon, uint16_t grid_spacing, uint8_t gridbit, const int16_t *data)
{
# 59 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
 mavlink_terrain_data_t packet;
 packet.lat = lat;
 packet.lon = lon;
 packet.grid_spacing = grid_spacing;
 packet.gridbit = gridbit;
 mav_array_memcpy(packet.data, data, sizeof(int16_t)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


 msg->msgid = 134;

    return mavlink_finalize_message(msg, system_id, component_id, 43, 229);



}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 int32_t lat,int32_t lon,uint16_t grid_spacing,uint8_t gridbit,const int16_t *data)
{
# 102 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
 mavlink_terrain_data_t packet;
 packet.lat = lat;
 packet.lon = lon;
 packet.grid_spacing = grid_spacing;
 packet.gridbit = gridbit;
 mav_array_memcpy(packet.data, data, sizeof(int16_t)*16);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


 msg->msgid = 134;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 43, 229);



}
# 127 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_data_t* terrain_data)
{
 return mavlink_msg_terrain_data_pack(system_id, component_id, msg, terrain_data->lat, terrain_data->lon, terrain_data->grid_spacing, terrain_data->gridbit, terrain_data->data);
}
# 141 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
static inline uint16_t mavlink_msg_terrain_data_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_data_t* terrain_data)
{
 return mavlink_msg_terrain_data_pack_chan(system_id, component_id, chan, msg, terrain_data->lat, terrain_data->lon, terrain_data->grid_spacing, terrain_data->gridbit, terrain_data->data);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_terrain_data.h"
static inline int32_t mavlink_msg_terrain_data_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_terrain_data_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline uint16_t mavlink_msg_terrain_data_get_grid_spacing(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 8);
}






static inline uint8_t mavlink_msg_terrain_data_get_gridbit(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint16_t mavlink_msg_terrain_data_get_data(const mavlink_message_t* msg, int16_t *data)
{
 return _MAV_RETURN_int16_t_array(msg, data, 16, 10);
}







static inline void mavlink_msg_terrain_data_decode(const mavlink_message_t* msg, mavlink_terrain_data_t* terrain_data)
{







 memcpy(terrain_data, ((const char *)(&((msg)->payload64[0]))), 43);

}
# 758 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_terrain_check.h" 1




typedef struct __mavlink_terrain_check_t
{
 int32_t lat;
 int32_t lon;
} mavlink_terrain_check_t;
# 38 "./lib/main/MAVLink/common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             int32_t lat, int32_t lon)
{







 mavlink_terrain_check_t packet;
 packet.lat = lat;
 packet.lon = lon;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


 msg->msgid = 135;

    return mavlink_finalize_message(msg, system_id, component_id, 8, 203);



}
# 73 "./lib/main/MAVLink/common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 int32_t lat,int32_t lon)
{







 mavlink_terrain_check_t packet;
 packet.lat = lat;
 packet.lon = lon;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 8);


 msg->msgid = 135;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 8, 203);



}
# 107 "./lib/main/MAVLink/common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_check_t* terrain_check)
{
 return mavlink_msg_terrain_check_pack(system_id, component_id, msg, terrain_check->lat, terrain_check->lon);
}
# 121 "./lib/main/MAVLink/common/./mavlink_msg_terrain_check.h"
static inline uint16_t mavlink_msg_terrain_check_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_check_t* terrain_check)
{
 return mavlink_msg_terrain_check_pack_chan(system_id, component_id, chan, msg, terrain_check->lat, terrain_check->lon);
}
# 204 "./lib/main/MAVLink/common/./mavlink_msg_terrain_check.h"
static inline int32_t mavlink_msg_terrain_check_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_terrain_check_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}







static inline void mavlink_msg_terrain_check_decode(const mavlink_message_t* msg, mavlink_terrain_check_t* terrain_check)
{




 memcpy(terrain_check, ((const char *)(&((msg)->payload64[0]))), 8);

}
# 759 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h" 1




typedef struct __mavlink_terrain_report_t
{
 int32_t lat;
 int32_t lon;
 float terrain_height;
 float current_height;
 uint16_t spacing;
 uint16_t pending;
 uint16_t loaded;
} mavlink_terrain_report_t;
# 53 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             int32_t lat, int32_t lon, uint16_t spacing, float terrain_height, float current_height, uint16_t pending, uint16_t loaded)
{
# 68 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
 mavlink_terrain_report_t packet;
 packet.lat = lat;
 packet.lon = lon;
 packet.terrain_height = terrain_height;
 packet.current_height = current_height;
 packet.spacing = spacing;
 packet.pending = pending;
 packet.loaded = loaded;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 136;

    return mavlink_finalize_message(msg, system_id, component_id, 22, 1);



}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 int32_t lat,int32_t lon,uint16_t spacing,float terrain_height,float current_height,uint16_t pending,uint16_t loaded)
{
# 119 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
 mavlink_terrain_report_t packet;
 packet.lat = lat;
 packet.lon = lon;
 packet.terrain_height = terrain_height;
 packet.current_height = current_height;
 packet.spacing = spacing;
 packet.pending = pending;
 packet.loaded = loaded;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 22);


 msg->msgid = 136;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 22, 1);



}
# 147 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_terrain_report_t* terrain_report)
{
 return mavlink_msg_terrain_report_pack(system_id, component_id, msg, terrain_report->lat, terrain_report->lon, terrain_report->spacing, terrain_report->terrain_height, terrain_report->current_height, terrain_report->pending, terrain_report->loaded);
}
# 161 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
static inline uint16_t mavlink_msg_terrain_report_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_terrain_report_t* terrain_report)
{
 return mavlink_msg_terrain_report_pack_chan(system_id, component_id, chan, msg, terrain_report->lat, terrain_report->lon, terrain_report->spacing, terrain_report->terrain_height, terrain_report->current_height, terrain_report->pending, terrain_report->loaded);
}
# 269 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
static inline int32_t mavlink_msg_terrain_report_get_lat(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_terrain_report_get_lon(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline uint16_t mavlink_msg_terrain_report_get_spacing(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 16);
}






static inline float mavlink_msg_terrain_report_get_terrain_height(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_terrain_report_get_current_height(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline uint16_t mavlink_msg_terrain_report_get_pending(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 18);
}






static inline uint16_t mavlink_msg_terrain_report_get_loaded(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 20);
}







static inline void mavlink_msg_terrain_report_decode(const mavlink_message_t* msg, mavlink_terrain_report_t* terrain_report)
{
# 351 "./lib/main/MAVLink/common/./mavlink_msg_terrain_report.h"
 memcpy(terrain_report, ((const char *)(&((msg)->payload64[0]))), 22);

}
# 760 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h" 1




typedef struct __mavlink_scaled_pressure2_t
{
 uint32_t time_boot_ms;
 float press_abs;
 float press_diff;
 int16_t temperature;
} mavlink_scaled_pressure2_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
# 56 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
 mavlink_scaled_pressure2_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.press_abs = press_abs;
 packet.press_diff = press_diff;
 packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 137;

    return mavlink_finalize_message(msg, system_id, component_id, 14, 195);



}
# 85 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,float press_abs,float press_diff,int16_t temperature)
{
# 98 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
 mavlink_scaled_pressure2_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.press_abs = press_abs;
 packet.press_diff = press_diff;
 packet.temperature = temperature;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 14);


 msg->msgid = 137;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 14, 195);



}
# 123 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_scaled_pressure2_t* scaled_pressure2)
{
 return mavlink_msg_scaled_pressure2_pack(system_id, component_id, msg, scaled_pressure2->time_boot_ms, scaled_pressure2->press_abs, scaled_pressure2->press_diff, scaled_pressure2->temperature);
}
# 137 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint16_t mavlink_msg_scaled_pressure2_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_scaled_pressure2_t* scaled_pressure2)
{
 return mavlink_msg_scaled_pressure2_pack_chan(system_id, component_id, chan, msg, scaled_pressure2->time_boot_ms, scaled_pressure2->press_abs, scaled_pressure2->press_diff, scaled_pressure2->temperature);
}
# 230 "./lib/main/MAVLink/common/./mavlink_msg_scaled_pressure2.h"
static inline uint32_t mavlink_msg_scaled_pressure2_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline float mavlink_msg_scaled_pressure2_get_press_abs(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}






static inline float mavlink_msg_scaled_pressure2_get_press_diff(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline int16_t mavlink_msg_scaled_pressure2_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 12);
}







static inline void mavlink_msg_scaled_pressure2_decode(const mavlink_message_t* msg, mavlink_scaled_pressure2_t* scaled_pressure2)
{






 memcpy(scaled_pressure2, ((const char *)(&((msg)->payload64[0]))), 14);

}
# 761 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h" 1




typedef struct __mavlink_att_pos_mocap_t
{
 uint64_t time_usec;
 float q[4];
 float x;
 float y;
 float z;
} mavlink_att_pos_mocap_t;
# 47 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, const float *q, float x, float y, float z)
{
# 59 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
 mavlink_att_pos_mocap_t packet;
 packet.time_usec = time_usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 138;

    return mavlink_finalize_message(msg, system_id, component_id, 36, 109);



}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,const float *q,float x,float y,float z)
{
# 102 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
 mavlink_att_pos_mocap_t packet;
 packet.time_usec = time_usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 mav_array_memcpy(packet.q, q, sizeof(float)*4);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 138;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 109);



}
# 127 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_att_pos_mocap_t* att_pos_mocap)
{
 return mavlink_msg_att_pos_mocap_pack(system_id, component_id, msg, att_pos_mocap->time_usec, att_pos_mocap->q, att_pos_mocap->x, att_pos_mocap->y, att_pos_mocap->z);
}
# 141 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint16_t mavlink_msg_att_pos_mocap_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_att_pos_mocap_t* att_pos_mocap)
{
 return mavlink_msg_att_pos_mocap_pack_chan(system_id, component_id, chan, msg, att_pos_mocap->time_usec, att_pos_mocap->q, att_pos_mocap->x, att_pos_mocap->y, att_pos_mocap->z);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_att_pos_mocap.h"
static inline uint64_t mavlink_msg_att_pos_mocap_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint16_t mavlink_msg_att_pos_mocap_get_q(const mavlink_message_t* msg, float *q)
{
 return _MAV_RETURN_float_array(msg, q, 4, 8);
}






static inline float mavlink_msg_att_pos_mocap_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 24);
}






static inline float mavlink_msg_att_pos_mocap_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 28);
}






static inline float mavlink_msg_att_pos_mocap_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 32);
}







static inline void mavlink_msg_att_pos_mocap_decode(const mavlink_message_t* msg, mavlink_att_pos_mocap_t* att_pos_mocap)
{







 memcpy(att_pos_mocap, ((const char *)(&((msg)->payload64[0]))), 36);

}
# 762 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h" 1




typedef struct __mavlink_set_actuator_control_target_t
{
 uint64_t time_usec;
 float controls[8];
 uint8_t group_mlx;
 uint8_t target_system;
 uint8_t target_component;
} mavlink_set_actuator_control_target_t;
# 47 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t group_mlx, uint8_t target_system, uint8_t target_component, const float *controls)
{
# 59 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
 mavlink_set_actuator_control_target_t packet;
 packet.time_usec = time_usec;
 packet.group_mlx = group_mlx;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


 msg->msgid = 139;

    return mavlink_finalize_message(msg, system_id, component_id, 43, 168);



}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t group_mlx,uint8_t target_system,uint8_t target_component,const float *controls)
{
# 102 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
 mavlink_set_actuator_control_target_t packet;
 packet.time_usec = time_usec;
 packet.group_mlx = group_mlx;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 43);


 msg->msgid = 139;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 43, 168);



}
# 127 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_set_actuator_control_target_t* set_actuator_control_target)
{
 return mavlink_msg_set_actuator_control_target_pack(system_id, component_id, msg, set_actuator_control_target->time_usec, set_actuator_control_target->group_mlx, set_actuator_control_target->target_system, set_actuator_control_target->target_component, set_actuator_control_target->controls);
}
# 141 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint16_t mavlink_msg_set_actuator_control_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_set_actuator_control_target_t* set_actuator_control_target)
{
 return mavlink_msg_set_actuator_control_target_pack_chan(system_id, component_id, chan, msg, set_actuator_control_target->time_usec, set_actuator_control_target->group_mlx, set_actuator_control_target->target_system, set_actuator_control_target->target_component, set_actuator_control_target->controls);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_set_actuator_control_target.h"
static inline uint64_t mavlink_msg_set_actuator_control_target_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_set_actuator_control_target_get_group_mlx(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint8_t mavlink_msg_set_actuator_control_target_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[41];
}






static inline uint8_t mavlink_msg_set_actuator_control_target_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[42];
}






static inline uint16_t mavlink_msg_set_actuator_control_target_get_controls(const mavlink_message_t* msg, float *controls)
{
 return _MAV_RETURN_float_array(msg, controls, 8, 8);
}







static inline void mavlink_msg_set_actuator_control_target_decode(const mavlink_message_t* msg, mavlink_set_actuator_control_target_t* set_actuator_control_target)
{







 memcpy(set_actuator_control_target, ((const char *)(&((msg)->payload64[0]))), 43);

}
# 763 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_actuator_control_target.h" 1




typedef struct __mavlink_actuator_control_target_t
{
 uint64_t time_usec;
 float controls[8];
 uint8_t group_mlx;
} mavlink_actuator_control_target_t;
# 41 "./lib/main/MAVLink/common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t time_usec, uint8_t group_mlx, const float *controls)
{







 mavlink_actuator_control_target_t packet;
 packet.time_usec = time_usec;
 packet.group_mlx = group_mlx;
 mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 41);


 msg->msgid = 140;

    return mavlink_finalize_message(msg, system_id, component_id, 41, 181);



}
# 77 "./lib/main/MAVLink/common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t time_usec,uint8_t group_mlx,const float *controls)
{







 mavlink_actuator_control_target_t packet;
 packet.time_usec = time_usec;
 packet.group_mlx = group_mlx;
 mav_array_memcpy(packet.controls, controls, sizeof(float)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 41);


 msg->msgid = 140;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 41, 181);



}
# 111 "./lib/main/MAVLink/common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_actuator_control_target_t* actuator_control_target)
{
 return mavlink_msg_actuator_control_target_pack(system_id, component_id, msg, actuator_control_target->time_usec, actuator_control_target->group_mlx, actuator_control_target->controls);
}
# 125 "./lib/main/MAVLink/common/./mavlink_msg_actuator_control_target.h"
static inline uint16_t mavlink_msg_actuator_control_target_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_actuator_control_target_t* actuator_control_target)
{
 return mavlink_msg_actuator_control_target_pack_chan(system_id, component_id, chan, msg, actuator_control_target->time_usec, actuator_control_target->group_mlx, actuator_control_target->controls);
}
# 209 "./lib/main/MAVLink/common/./mavlink_msg_actuator_control_target.h"
static inline uint64_t mavlink_msg_actuator_control_target_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint8_t mavlink_msg_actuator_control_target_get_group_mlx(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[40];
}






static inline uint16_t mavlink_msg_actuator_control_target_get_controls(const mavlink_message_t* msg, float *controls)
{
 return _MAV_RETURN_float_array(msg, controls, 8, 8);
}







static inline void mavlink_msg_actuator_control_target_decode(const mavlink_message_t* msg, mavlink_actuator_control_target_t* actuator_control_target)
{





 memcpy(actuator_control_target, ((const char *)(&((msg)->payload64[0]))), 41);

}
# 764 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h" 1




typedef struct __mavlink_battery_status_t
{
 int32_t current_consumed;
 int32_t energy_consumed;
 int16_t temperature;
 uint16_t voltages[10];
 int16_t current_battery;
 uint8_t id;
 uint8_t battery_function;
 uint8_t type;
 int8_t battery_remaining;
} mavlink_battery_status_t;
# 59 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t id, uint8_t battery_function, uint8_t type, int16_t temperature, const uint16_t *voltages, int16_t current_battery, int32_t current_consumed, int32_t energy_consumed, int8_t battery_remaining)
{
# 75 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
 mavlink_battery_status_t packet;
 packet.current_consumed = current_consumed;
 packet.energy_consumed = energy_consumed;
 packet.temperature = temperature;
 packet.current_battery = current_battery;
 packet.id = id;
 packet.battery_function = battery_function;
 packet.type = type;
 packet.battery_remaining = battery_remaining;
 mav_array_memcpy(packet.voltages, voltages, sizeof(uint16_t)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 147;

    return mavlink_finalize_message(msg, system_id, component_id, 36, 154);



}
# 113 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t id,uint8_t battery_function,uint8_t type,int16_t temperature,const uint16_t *voltages,int16_t current_battery,int32_t current_consumed,int32_t energy_consumed,int8_t battery_remaining)
{
# 130 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
 mavlink_battery_status_t packet;
 packet.current_consumed = current_consumed;
 packet.energy_consumed = energy_consumed;
 packet.temperature = temperature;
 packet.current_battery = current_battery;
 packet.id = id;
 packet.battery_function = battery_function;
 packet.type = type;
 packet.battery_remaining = battery_remaining;
 mav_array_memcpy(packet.voltages, voltages, sizeof(uint16_t)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 147;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 154);



}
# 159 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_battery_status_t* battery_status)
{
 return mavlink_msg_battery_status_pack(system_id, component_id, msg, battery_status->id, battery_status->battery_function, battery_status->type, battery_status->temperature, battery_status->voltages, battery_status->current_battery, battery_status->current_consumed, battery_status->energy_consumed, battery_status->battery_remaining);
}
# 173 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
static inline uint16_t mavlink_msg_battery_status_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_battery_status_t* battery_status)
{
 return mavlink_msg_battery_status_pack_chan(system_id, component_id, chan, msg, battery_status->id, battery_status->battery_function, battery_status->type, battery_status->temperature, battery_status->voltages, battery_status->current_battery, battery_status->current_consumed, battery_status->energy_consumed, battery_status->battery_remaining);
}
# 287 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
static inline uint8_t mavlink_msg_battery_status_get_id(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[32];
}






static inline uint8_t mavlink_msg_battery_status_get_battery_function(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[33];
}






static inline uint8_t mavlink_msg_battery_status_get_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[34];
}






static inline int16_t mavlink_msg_battery_status_get_temperature(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 8);
}






static inline uint16_t mavlink_msg_battery_status_get_voltages(const mavlink_message_t* msg, uint16_t *voltages)
{
 return _MAV_RETURN_uint16_t_array(msg, voltages, 10, 10);
}






static inline int16_t mavlink_msg_battery_status_get_current_battery(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int16_t(msg, 30);
}






static inline int32_t mavlink_msg_battery_status_get_current_consumed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 0);
}






static inline int32_t mavlink_msg_battery_status_get_energy_consumed(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}






static inline int8_t mavlink_msg_battery_status_get_battery_remaining(const mavlink_message_t* msg)
{
 return (const int8_t)((const char *)(&((msg)->payload64[0])))[35];
}







static inline void mavlink_msg_battery_status_decode(const mavlink_message_t* msg, mavlink_battery_status_t* battery_status)
{
# 391 "./lib/main/MAVLink/common/./mavlink_msg_battery_status.h"
 memcpy(battery_status, ((const char *)(&((msg)->payload64[0]))), 36);

}
# 765 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h" 1




typedef struct __mavlink_autopilot_version_t
{
 uint64_t capabilities;
 uint64_t uid;
 uint32_t flight_sw_version;
 uint32_t middleware_sw_version;
 uint32_t os_sw_version;
 uint32_t board_version;
 uint16_t vendor_id;
 uint16_t product_id;
 uint8_t flight_custom_version[8];
 uint8_t middleware_custom_version[8];
 uint8_t os_custom_version[8];
} mavlink_autopilot_version_t;
# 67 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint64_t capabilities, uint32_t flight_sw_version, uint32_t middleware_sw_version, uint32_t os_sw_version, uint32_t board_version, const uint8_t *flight_custom_version, const uint8_t *middleware_custom_version, const uint8_t *os_custom_version, uint16_t vendor_id, uint16_t product_id, uint64_t uid)
{
# 85 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
 mavlink_autopilot_version_t packet;
 packet.capabilities = capabilities;
 packet.uid = uid;
 packet.flight_sw_version = flight_sw_version;
 packet.middleware_sw_version = middleware_sw_version;
 packet.os_sw_version = os_sw_version;
 packet.board_version = board_version;
 packet.vendor_id = vendor_id;
 packet.product_id = product_id;
 mav_array_memcpy(packet.flight_custom_version, flight_custom_version, sizeof(uint8_t)*8);
 mav_array_memcpy(packet.middleware_custom_version, middleware_custom_version, sizeof(uint8_t)*8);
 mav_array_memcpy(packet.os_custom_version, os_custom_version, sizeof(uint8_t)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 60);


 msg->msgid = 148;

    return mavlink_finalize_message(msg, system_id, component_id, 60, 178);



}
# 127 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint64_t capabilities,uint32_t flight_sw_version,uint32_t middleware_sw_version,uint32_t os_sw_version,uint32_t board_version,const uint8_t *flight_custom_version,const uint8_t *middleware_custom_version,const uint8_t *os_custom_version,uint16_t vendor_id,uint16_t product_id,uint64_t uid)
{
# 146 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
 mavlink_autopilot_version_t packet;
 packet.capabilities = capabilities;
 packet.uid = uid;
 packet.flight_sw_version = flight_sw_version;
 packet.middleware_sw_version = middleware_sw_version;
 packet.os_sw_version = os_sw_version;
 packet.board_version = board_version;
 packet.vendor_id = vendor_id;
 packet.product_id = product_id;
 mav_array_memcpy(packet.flight_custom_version, flight_custom_version, sizeof(uint8_t)*8);
 mav_array_memcpy(packet.middleware_custom_version, middleware_custom_version, sizeof(uint8_t)*8);
 mav_array_memcpy(packet.os_custom_version, os_custom_version, sizeof(uint8_t)*8);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 60);


 msg->msgid = 148;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 60, 178);



}
# 177 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_autopilot_version_t* autopilot_version)
{
 return mavlink_msg_autopilot_version_pack(system_id, component_id, msg, autopilot_version->capabilities, autopilot_version->flight_sw_version, autopilot_version->middleware_sw_version, autopilot_version->os_sw_version, autopilot_version->board_version, autopilot_version->flight_custom_version, autopilot_version->middleware_custom_version, autopilot_version->os_custom_version, autopilot_version->vendor_id, autopilot_version->product_id, autopilot_version->uid);
}
# 191 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
static inline uint16_t mavlink_msg_autopilot_version_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_autopilot_version_t* autopilot_version)
{
 return mavlink_msg_autopilot_version_pack_chan(system_id, component_id, chan, msg, autopilot_version->capabilities, autopilot_version->flight_sw_version, autopilot_version->middleware_sw_version, autopilot_version->os_sw_version, autopilot_version->board_version, autopilot_version->flight_custom_version, autopilot_version->middleware_custom_version, autopilot_version->os_custom_version, autopilot_version->vendor_id, autopilot_version->product_id, autopilot_version->uid);
}
# 315 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
static inline uint64_t mavlink_msg_autopilot_version_get_capabilities(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline uint32_t mavlink_msg_autopilot_version_get_flight_sw_version(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 16);
}






static inline uint32_t mavlink_msg_autopilot_version_get_middleware_sw_version(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 20);
}






static inline uint32_t mavlink_msg_autopilot_version_get_os_sw_version(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 24);
}






static inline uint32_t mavlink_msg_autopilot_version_get_board_version(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 28);
}






static inline uint16_t mavlink_msg_autopilot_version_get_flight_custom_version(const mavlink_message_t* msg, uint8_t *flight_custom_version)
{
 return _MAV_RETURN_uint8_t_array(msg, flight_custom_version, 8, 36);
}






static inline uint16_t mavlink_msg_autopilot_version_get_middleware_custom_version(const mavlink_message_t* msg, uint8_t *middleware_custom_version)
{
 return _MAV_RETURN_uint8_t_array(msg, middleware_custom_version, 8, 44);
}






static inline uint16_t mavlink_msg_autopilot_version_get_os_custom_version(const mavlink_message_t* msg, uint8_t *os_custom_version)
{
 return _MAV_RETURN_uint8_t_array(msg, os_custom_version, 8, 52);
}






static inline uint16_t mavlink_msg_autopilot_version_get_vendor_id(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 32);
}






static inline uint16_t mavlink_msg_autopilot_version_get_product_id(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 34);
}






static inline uint64_t mavlink_msg_autopilot_version_get_uid(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 8);
}







static inline void mavlink_msg_autopilot_version_decode(const mavlink_message_t* msg, mavlink_autopilot_version_t* autopilot_version)
{
# 441 "./lib/main/MAVLink/common/./mavlink_msg_autopilot_version.h"
 memcpy(autopilot_version, ((const char *)(&((msg)->payload64[0]))), 60);

}
# 766 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h" 1




typedef struct __mavlink_v2_extension_t
{
 uint16_t message_type;
 uint8_t target_network;
 uint8_t target_system;
 uint8_t target_component;
 uint8_t payload[249];
} mavlink_v2_extension_t;
# 47 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t target_network, uint8_t target_system, uint8_t target_component, uint16_t message_type, const uint8_t *payload)
{
# 59 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
 mavlink_v2_extension_t packet;
 packet.message_type = message_type;
 packet.target_network = target_network;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*249);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


 msg->msgid = 248;

    return mavlink_finalize_message(msg, system_id, component_id, 254, 8);



}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t target_network,uint8_t target_system,uint8_t target_component,uint16_t message_type,const uint8_t *payload)
{
# 102 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
 mavlink_v2_extension_t packet;
 packet.message_type = message_type;
 packet.target_network = target_network;
 packet.target_system = target_system;
 packet.target_component = target_component;
 mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*249);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 254);


 msg->msgid = 248;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 254, 8);



}
# 127 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_v2_extension_t* v2_extension)
{
 return mavlink_msg_v2_extension_pack(system_id, component_id, msg, v2_extension->target_network, v2_extension->target_system, v2_extension->target_component, v2_extension->message_type, v2_extension->payload);
}
# 141 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
static inline uint16_t mavlink_msg_v2_extension_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_v2_extension_t* v2_extension)
{
 return mavlink_msg_v2_extension_pack_chan(system_id, component_id, chan, msg, v2_extension->target_network, v2_extension->target_system, v2_extension->target_component, v2_extension->message_type, v2_extension->payload);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_v2_extension.h"
static inline uint8_t mavlink_msg_v2_extension_get_target_network(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_v2_extension_get_target_system(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint8_t mavlink_msg_v2_extension_get_target_component(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[4];
}






static inline uint16_t mavlink_msg_v2_extension_get_message_type(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint16_t mavlink_msg_v2_extension_get_payload(const mavlink_message_t* msg, uint8_t *payload)
{
 return _MAV_RETURN_uint8_t_array(msg, payload, 249, 5);
}







static inline void mavlink_msg_v2_extension_decode(const mavlink_message_t* msg, mavlink_v2_extension_t* v2_extension)
{







 memcpy(v2_extension, ((const char *)(&((msg)->payload64[0]))), 254);

}
# 767 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h" 1




typedef struct __mavlink_memory_vect_t
{
 uint16_t address;
 uint8_t ver;
 uint8_t type;
 int8_t value[32];
} mavlink_memory_vect_t;
# 44 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint16_t address, uint8_t ver, uint8_t type, const int8_t *value)
{
# 55 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
 mavlink_memory_vect_t packet;
 packet.address = address;
 packet.ver = ver;
 packet.type = type;
 mav_array_memcpy(packet.value, value, sizeof(int8_t)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 249;

    return mavlink_finalize_message(msg, system_id, component_id, 36, 204);



}
# 83 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint16_t address,uint8_t ver,uint8_t type,const int8_t *value)
{
# 95 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
 mavlink_memory_vect_t packet;
 packet.address = address;
 packet.ver = ver;
 packet.type = type;
 mav_array_memcpy(packet.value, value, sizeof(int8_t)*32);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 36);


 msg->msgid = 249;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 36, 204);



}
# 119 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_memory_vect_t* memory_vect)
{
 return mavlink_msg_memory_vect_pack(system_id, component_id, msg, memory_vect->address, memory_vect->ver, memory_vect->type, memory_vect->value);
}
# 133 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_memory_vect_t* memory_vect)
{
 return mavlink_msg_memory_vect_pack_chan(system_id, component_id, chan, msg, memory_vect->address, memory_vect->ver, memory_vect->type, memory_vect->value);
}
# 222 "./lib/main/MAVLink/common/./mavlink_msg_memory_vect.h"
static inline uint16_t mavlink_msg_memory_vect_get_address(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint16_t(msg, 0);
}






static inline uint8_t mavlink_msg_memory_vect_get_ver(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[2];
}






static inline uint8_t mavlink_msg_memory_vect_get_type(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[3];
}






static inline uint16_t mavlink_msg_memory_vect_get_value(const mavlink_message_t* msg, int8_t *value)
{
 return _MAV_RETURN_int8_t_array(msg, value, 32, 4);
}







static inline void mavlink_msg_memory_vect_decode(const mavlink_message_t* msg, mavlink_memory_vect_t* memory_vect)
{






 memcpy(memory_vect, ((const char *)(&((msg)->payload64[0]))), 36);

}
# 768 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h" 1




typedef struct __mavlink_debug_vect_t
{
 uint64_t time_usec;
 float x;
 float y;
 float z;
 char name[10];
} mavlink_debug_vect_t;
# 47 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             const char *name, uint64_t time_usec, float x, float y, float z)
{
# 59 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
 mavlink_debug_vect_t packet;
 packet.time_usec = time_usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


 msg->msgid = 250;

    return mavlink_finalize_message(msg, system_id, component_id, 30, 49);



}
# 89 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 const char *name,uint64_t time_usec,float x,float y,float z)
{
# 102 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
 mavlink_debug_vect_t packet;
 packet.time_usec = time_usec;
 packet.x = x;
 packet.y = y;
 packet.z = z;
 mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 30);


 msg->msgid = 250;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 30, 49);



}
# 127 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_debug_vect_t* debug_vect)
{
 return mavlink_msg_debug_vect_pack(system_id, component_id, msg, debug_vect->name, debug_vect->time_usec, debug_vect->x, debug_vect->y, debug_vect->z);
}
# 141 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_debug_vect_t* debug_vect)
{
 return mavlink_msg_debug_vect_pack_chan(system_id, component_id, chan, msg, debug_vect->name, debug_vect->time_usec, debug_vect->x, debug_vect->y, debug_vect->z);
}
# 235 "./lib/main/MAVLink/common/./mavlink_msg_debug_vect.h"
static inline uint16_t mavlink_msg_debug_vect_get_name(const mavlink_message_t* msg, char *name)
{
 return _MAV_RETURN_char_array(msg, name, 10, 20);
}






static inline uint64_t mavlink_msg_debug_vect_get_time_usec(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint64_t(msg, 0);
}






static inline float mavlink_msg_debug_vect_get_x(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 8);
}






static inline float mavlink_msg_debug_vect_get_y(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 12);
}






static inline float mavlink_msg_debug_vect_get_z(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 16);
}







static inline void mavlink_msg_debug_vect_decode(const mavlink_message_t* msg, mavlink_debug_vect_t* debug_vect)
{







 memcpy(debug_vect, ((const char *)(&((msg)->payload64[0]))), 30);

}
# 769 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_named_value_float.h" 1




typedef struct __mavlink_named_value_float_t
{
 uint32_t time_boot_ms;
 float value;
 char name[10];
} mavlink_named_value_float_t;
# 41 "./lib/main/MAVLink/common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, const char *name, float value)
{







 mavlink_named_value_float_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.value = value;
 mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 251;

    return mavlink_finalize_message(msg, system_id, component_id, 18, 170);



}
# 77 "./lib/main/MAVLink/common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,const char *name,float value)
{







 mavlink_named_value_float_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.value = value;
 mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 251;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 170);



}
# 111 "./lib/main/MAVLink/common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_named_value_float_t* named_value_float)
{
 return mavlink_msg_named_value_float_pack(system_id, component_id, msg, named_value_float->time_boot_ms, named_value_float->name, named_value_float->value);
}
# 125 "./lib/main/MAVLink/common/./mavlink_msg_named_value_float.h"
static inline uint16_t mavlink_msg_named_value_float_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_named_value_float_t* named_value_float)
{
 return mavlink_msg_named_value_float_pack_chan(system_id, component_id, chan, msg, named_value_float->time_boot_ms, named_value_float->name, named_value_float->value);
}
# 209 "./lib/main/MAVLink/common/./mavlink_msg_named_value_float.h"
static inline uint32_t mavlink_msg_named_value_float_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_named_value_float_get_name(const mavlink_message_t* msg, char *name)
{
 return _MAV_RETURN_char_array(msg, name, 10, 8);
}






static inline float mavlink_msg_named_value_float_get_value(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}







static inline void mavlink_msg_named_value_float_decode(const mavlink_message_t* msg, mavlink_named_value_float_t* named_value_float)
{





 memcpy(named_value_float, ((const char *)(&((msg)->payload64[0]))), 18);

}
# 770 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_named_value_int.h" 1




typedef struct __mavlink_named_value_int_t
{
 uint32_t time_boot_ms;
 int32_t value;
 char name[10];
} mavlink_named_value_int_t;
# 41 "./lib/main/MAVLink/common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, const char *name, int32_t value)
{







 mavlink_named_value_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.value = value;
 mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 252;

    return mavlink_finalize_message(msg, system_id, component_id, 18, 44);



}
# 77 "./lib/main/MAVLink/common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,const char *name,int32_t value)
{







 mavlink_named_value_int_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.value = value;
 mav_array_memcpy(packet.name, name, sizeof(char)*10);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 18);


 msg->msgid = 252;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 18, 44);



}
# 111 "./lib/main/MAVLink/common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_named_value_int_t* named_value_int)
{
 return mavlink_msg_named_value_int_pack(system_id, component_id, msg, named_value_int->time_boot_ms, named_value_int->name, named_value_int->value);
}
# 125 "./lib/main/MAVLink/common/./mavlink_msg_named_value_int.h"
static inline uint16_t mavlink_msg_named_value_int_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_named_value_int_t* named_value_int)
{
 return mavlink_msg_named_value_int_pack_chan(system_id, component_id, chan, msg, named_value_int->time_boot_ms, named_value_int->name, named_value_int->value);
}
# 209 "./lib/main/MAVLink/common/./mavlink_msg_named_value_int.h"
static inline uint32_t mavlink_msg_named_value_int_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint16_t mavlink_msg_named_value_int_get_name(const mavlink_message_t* msg, char *name)
{
 return _MAV_RETURN_char_array(msg, name, 10, 8);
}






static inline int32_t mavlink_msg_named_value_int_get_value(const mavlink_message_t* msg)
{
 return _MAV_RETURN_int32_t(msg, 4);
}







static inline void mavlink_msg_named_value_int_decode(const mavlink_message_t* msg, mavlink_named_value_int_t* named_value_int)
{





 memcpy(named_value_int, ((const char *)(&((msg)->payload64[0]))), 18);

}
# 771 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_statustext.h" 1




typedef struct __mavlink_statustext_t
{
 uint8_t severity;
 char text[50];
} mavlink_statustext_t;
# 38 "./lib/main/MAVLink/common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint8_t severity, const char *text)
{






 mavlink_statustext_t packet;
 packet.severity = severity;
 mav_array_memcpy(packet.text, text, sizeof(char)*50);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


 msg->msgid = 253;

    return mavlink_finalize_message(msg, system_id, component_id, 51, 83);



}
# 71 "./lib/main/MAVLink/common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint8_t severity,const char *text)
{






 mavlink_statustext_t packet;
 packet.severity = severity;
 mav_array_memcpy(packet.text, text, sizeof(char)*50);
        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 51);


 msg->msgid = 253;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 51, 83);



}
# 103 "./lib/main/MAVLink/common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_statustext_t* statustext)
{
 return mavlink_msg_statustext_pack(system_id, component_id, msg, statustext->severity, statustext->text);
}
# 117 "./lib/main/MAVLink/common/./mavlink_msg_statustext.h"
static inline uint16_t mavlink_msg_statustext_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_statustext_t* statustext)
{
 return mavlink_msg_statustext_pack_chan(system_id, component_id, chan, msg, statustext->severity, statustext->text);
}
# 196 "./lib/main/MAVLink/common/./mavlink_msg_statustext.h"
static inline uint8_t mavlink_msg_statustext_get_severity(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[0];
}






static inline uint16_t mavlink_msg_statustext_get_text(const mavlink_message_t* msg, char *text)
{
 return _MAV_RETURN_char_array(msg, text, 50, 1);
}







static inline void mavlink_msg_statustext_decode(const mavlink_message_t* msg, mavlink_statustext_t* statustext)
{




 memcpy(statustext, ((const char *)(&((msg)->payload64[0]))), 51);

}
# 772 "./lib/main/MAVLink/common/common.h" 2
# 1 "./lib/main/MAVLink/common/./mavlink_msg_debug.h" 1




typedef struct __mavlink_debug_t
{
 uint32_t time_boot_ms;
 float value;
 uint8_t ind;
} mavlink_debug_t;
# 41 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
             uint32_t time_boot_ms, uint8_t ind, float value)
{
# 52 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
 mavlink_debug_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.value = value;
 packet.ind = ind;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


 msg->msgid = 254;

    return mavlink_finalize_message(msg, system_id, component_id, 9, 46);



}
# 79 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
          mavlink_message_t* msg,
                 uint32_t time_boot_ms,uint8_t ind,float value)
{
# 91 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
 mavlink_debug_t packet;
 packet.time_boot_ms = time_boot_ms;
 packet.value = value;
 packet.ind = ind;

        memcpy(((char *)(&((msg)->payload64[0]))), &packet, 9);


 msg->msgid = 254;

    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, 9, 46);



}
# 115 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_debug_t* debug)
{
 return mavlink_msg_debug_pack(system_id, component_id, msg, debug->time_boot_ms, debug->ind, debug->value);
}
# 129 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
static inline uint16_t mavlink_msg_debug_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_debug_t* debug)
{
 return mavlink_msg_debug_pack_chan(system_id, component_id, chan, msg, debug->time_boot_ms, debug->ind, debug->value);
}
# 217 "./lib/main/MAVLink/common/./mavlink_msg_debug.h"
static inline uint32_t mavlink_msg_debug_get_time_boot_ms(const mavlink_message_t* msg)
{
 return _MAV_RETURN_uint32_t(msg, 0);
}






static inline uint8_t mavlink_msg_debug_get_ind(const mavlink_message_t* msg)
{
 return (const uint8_t)((const char *)(&((msg)->payload64[0])))[8];
}






static inline float mavlink_msg_debug_get_value(const mavlink_message_t* msg)
{
 return _MAV_RETURN_float(msg, 4);
}







static inline void mavlink_msg_debug_decode(const mavlink_message_t* msg, mavlink_debug_t* debug)
{





 memcpy(debug, ((const char *)(&((msg)->payload64[0]))), 9);

}
# 773 "./lib/main/MAVLink/common/common.h" 2
# 26 "./lib/main/MAVLink/common/mavlink.h" 2
# 79 "./src/main/telemetry/mavlink.c" 2
#pragma GCC diagnostic pop





extern uint16_t rssi;

static serialPort_t *mavlinkPort = 
# 87 "./src/main/telemetry/mavlink.c" 3 4
                                  ((void *)0)
# 87 "./src/main/telemetry/mavlink.c"
                                      ;
static const serialPortConfig_t *portConfig;

static 
# 90 "./src/main/telemetry/mavlink.c" 3 4
      _Bool 
# 90 "./src/main/telemetry/mavlink.c"
           mavlinkTelemetryEnabled = 
# 90 "./src/main/telemetry/mavlink.c" 3 4
                                      0
# 90 "./src/main/telemetry/mavlink.c"
                                           ;
static portSharing_e mavlinkPortSharing;


static const uint8_t mavRates[] = {
    [MAV_DATA_STREAM_EXTENDED_STATUS] = 2,
    [MAV_DATA_STREAM_RC_CHANNELS] = 5,
    [MAV_DATA_STREAM_POSITION] = 2,
    [MAV_DATA_STREAM_EXTRA1] = 10,
    [MAV_DATA_STREAM_EXTRA2] = 10
};



static uint8_t mavTicks[(sizeof(mavRates) / sizeof(mavRates[0]))];
static mavlink_message_t mavMsg;
static uint8_t mavBuffer[(255 + ((5 + 1) + 2))];
static uint32_t lastMavlinkMessage = 0;

static int mavlinkStreamTrigger(enum MAV_DATA_STREAM streamNum)
{
    uint8_t rate = (uint8_t) mavRates[streamNum];
    if (rate == 0) {
        return 0;
    }

    if (mavTicks[streamNum] == 0) {

        if (rate > 50) {
            rate = 50;
        }

        mavTicks[streamNum] = (50 / rate);
        return 1;
    }


    mavTicks[streamNum]--;
    return 0;
}


static void mavlinkSerialWrite(uint8_t * buf, uint16_t length)
{
    for (int i = 0; i < length; i++)
        serialWrite(mavlinkPort, buf[i]);
}

static int16_t headingOrScaledMilliAmpereHoursDrawn(void)
{
    if (isAmperageConfigured() && telemetryConfig()->mavlink_mah_as_heading_divisor > 0) {

        return getMAhDrawn() / telemetryConfig()->mavlink_mah_as_heading_divisor;
    }

    return ((attitude.values.yaw) / 10);
}


void freeMAVLinkTelemetryPort(void)
{
    closeSerialPort(mavlinkPort);
    mavlinkPort = 
# 152 "./src/main/telemetry/mavlink.c" 3 4
                 ((void *)0)
# 152 "./src/main/telemetry/mavlink.c"
                     ;
    mavlinkTelemetryEnabled = 
# 153 "./src/main/telemetry/mavlink.c" 3 4
                             0
# 153 "./src/main/telemetry/mavlink.c"
                                  ;
}

void initMAVLinkTelemetry(void)
{
    portConfig = findSerialPortConfig(FUNCTION_TELEMETRY_MAVLINK);
    mavlinkPortSharing = determinePortSharing(portConfig, FUNCTION_TELEMETRY_MAVLINK);
}

void configureMAVLinkTelemetryPort(void)
{
    if (!portConfig) {
        return;
    }

    baudRate_e baudRateIndex = portConfig->telemetry_baudrateIndex;
    if (baudRateIndex == BAUD_AUTO) {

        baudRateIndex = BAUD_57600;
    }

    mavlinkPort = openSerialPort(portConfig->identifier, FUNCTION_TELEMETRY_MAVLINK, 
# 174 "./src/main/telemetry/mavlink.c" 3 4
                                                                                    ((void *)0)
# 174 "./src/main/telemetry/mavlink.c"
                                                                                        , 
# 174 "./src/main/telemetry/mavlink.c" 3 4
                                                                                          ((void *)0)
# 174 "./src/main/telemetry/mavlink.c"
                                                                                              , baudRates[baudRateIndex], MODE_TX, telemetryConfig()->telemetry_inverted ? SERIAL_INVERTED : SERIAL_NOT_INVERTED);

    if (!mavlinkPort) {
        return;
    }

    mavlinkTelemetryEnabled = 
# 180 "./src/main/telemetry/mavlink.c" 3 4
                             1
# 180 "./src/main/telemetry/mavlink.c"
                                 ;
}

void checkMAVLinkTelemetryState(void)
{
    if (portConfig && telemetryCheckRxPortShared(portConfig, rxRuntimeState.serialrxProvider)) {
        if (!mavlinkTelemetryEnabled && telemetrySharedPort != 
# 186 "./src/main/telemetry/mavlink.c" 3 4
                                                              ((void *)0)
# 186 "./src/main/telemetry/mavlink.c"
                                                                  ) {
            mavlinkPort = telemetrySharedPort;
            mavlinkTelemetryEnabled = 
# 188 "./src/main/telemetry/mavlink.c" 3 4
                                     1
# 188 "./src/main/telemetry/mavlink.c"
                                         ;
        }
    } else {
        
# 191 "./src/main/telemetry/mavlink.c" 3 4
       _Bool 
# 191 "./src/main/telemetry/mavlink.c"
            newTelemetryEnabledValue = telemetryDetermineEnabledState(mavlinkPortSharing);

        if (newTelemetryEnabledValue == mavlinkTelemetryEnabled) {
            return;
        }

        if (newTelemetryEnabledValue)
            configureMAVLinkTelemetryPort();
        else
            freeMAVLinkTelemetryPort();
    }
}

void mavlinkSendSystemStatus(void)
{
    uint16_t msgLength;

    uint32_t onboardControlAndSensors = 35843;
# 220 "./src/main/telemetry/mavlink.c"
    if (sensors(SENSOR_MAG)) onboardControlAndSensors |= 4100;
    if (sensors(SENSOR_BARO)) onboardControlAndSensors |= 8200;
    if (sensors(SENSOR_GPS)) onboardControlAndSensors |= 16416;

    uint16_t batteryVoltage = 0;
    int16_t batteryAmperage = -1;
    int8_t batteryRemaining = 100;

    if (getBatteryState() < BATTERY_NOT_PRESENT) {
        batteryVoltage = isBatteryVoltageConfigured() ? getBatteryVoltage() * 10 : batteryVoltage;
        batteryAmperage = isAmperageConfigured() ? getAmperage() : batteryAmperage;
        batteryRemaining = isBatteryVoltageConfigured() ? calculateBatteryPercentageRemaining() : batteryRemaining;
    }

    mavlink_msg_sys_status_pack(0, 200, &mavMsg,





        onboardControlAndSensors,

        onboardControlAndSensors,

        onboardControlAndSensors & 1023,

        0,

        batteryVoltage,

        batteryAmperage,

        batteryRemaining,

        0,

        0,

        0,

        0,

        0,

        0);
    msgLength = mavlink_msg_to_send_buffer(mavBuffer, &mavMsg);
    mavlinkSerialWrite(mavBuffer, msgLength);
}

void mavlinkSendRCChannelsAndRSSI(void)
{
    uint16_t msgLength;
    mavlink_msg_rc_channels_raw_pack(0, 200, &mavMsg,

        millis(),

        0,

        (rxRuntimeState.channelCount >= 1) ? rcData[0] : 0,

        (rxRuntimeState.channelCount >= 2) ? rcData[1] : 0,

        (rxRuntimeState.channelCount >= 3) ? rcData[2] : 0,

        (rxRuntimeState.channelCount >= 4) ? rcData[3] : 0,

        (rxRuntimeState.channelCount >= 5) ? rcData[4] : 0,

        (rxRuntimeState.channelCount >= 6) ? rcData[5] : 0,

        (rxRuntimeState.channelCount >= 7) ? rcData[6] : 0,

        (rxRuntimeState.channelCount >= 8) ? rcData[7] : 0,

        constrain(scaleRange(getRssi(), 0, 1023, 0, 255), 0, 255));
    msgLength = mavlink_msg_to_send_buffer(mavBuffer, &mavMsg);
    mavlinkSerialWrite(mavBuffer, msgLength);
}
# 380 "./src/main/telemetry/mavlink.c"
void mavlinkSendAttitude(void)
{
    uint16_t msgLength;
    mavlink_msg_attitude_pack(0, 200, &mavMsg,

        millis(),

        ((attitude.values.roll) / 10.0f * 0.0174532925f),

        ((-attitude.values.pitch) / 10.0f * 0.0174532925f),

        ((attitude.values.yaw) / 10.0f * 0.0174532925f),

        0,

        0,

        0);
    msgLength = mavlink_msg_to_send_buffer(mavBuffer, &mavMsg);
    mavlinkSerialWrite(mavBuffer, msgLength);
}

void mavlinkSendHUDAndHeartbeat(void)
{
    uint16_t msgLength;
    float mavAltitude = 0;
    float mavGroundSpeed = 0;
    float mavAirSpeed = 0;
    float mavClimbRate = 0;
# 417 "./src/main/telemetry/mavlink.c"
    mavAltitude = getEstimatedAltitudeCm() / 100.0;

    mavlink_msg_vfr_hud_pack(0, 200, &mavMsg,

        mavAirSpeed,

        mavGroundSpeed,

        headingOrScaledMilliAmpereHoursDrawn(),

        scaleRange(constrain(rcData[THROTTLE], 1000, 2000), 1000, 2000, 0, 100),

        mavAltitude,

        mavClimbRate);
    msgLength = mavlink_msg_to_send_buffer(mavBuffer, &mavMsg);
    mavlinkSerialWrite(mavBuffer, msgLength);


    uint8_t mavModes = MAV_MODE_FLAG_MANUAL_INPUT_ENABLED;
    if ((armingFlags & (ARMED)))
        mavModes |= MAV_MODE_FLAG_SAFETY_ARMED;

    uint8_t mavSystemType;
    switch (mixerConfig()->mixerMode)
    {
        case MIXER_TRI:
            mavSystemType = MAV_TYPE_TRICOPTER;
            break;
        case MIXER_QUADP:
        case MIXER_QUADX:
        case MIXER_Y4:
        case MIXER_VTAIL4:
            mavSystemType = MAV_TYPE_QUADROTOR;
            break;
        case MIXER_Y6:
        case MIXER_HEX6:
        case MIXER_HEX6X:
            mavSystemType = MAV_TYPE_HEXAROTOR;
            break;
        case MIXER_OCTOX8:
        case MIXER_OCTOFLATP:
        case MIXER_OCTOFLATX:
            mavSystemType = MAV_TYPE_OCTOROTOR;
            break;
        case MIXER_FLYING_WING:
        case MIXER_AIRPLANE:
        case MIXER_CUSTOM_AIRPLANE:
            mavSystemType = MAV_TYPE_FIXED_WING;
            break;
        case MIXER_HELI_120_CCPM:
        case MIXER_HELI_90_DEG:
            mavSystemType = MAV_TYPE_HELICOPTER;
            break;
        default:
            mavSystemType = MAV_TYPE_GENERIC;
            break;
    }


    uint8_t mavCustomMode = 1;

    if ((flightModeFlags & (ANGLE_MODE)) || (flightModeFlags & (HORIZON_MODE))) {
        mavCustomMode = 0;
        mavModes |= MAV_MODE_FLAG_STABILIZE_ENABLED;
    }

    uint8_t mavSystemState = 0;
    if ((armingFlags & (ARMED))) {
        if (failsafeIsActive()) {
            mavSystemState = MAV_STATE_CRITICAL;
        }
        else {
            mavSystemState = MAV_STATE_ACTIVE;
        }
    }
    else {
        mavSystemState = MAV_STATE_STANDBY;
    }

    mavlink_msg_heartbeat_pack(0, 200, &mavMsg,

        mavSystemType,

        MAV_AUTOPILOT_GENERIC,

        mavModes,

        mavCustomMode,

        mavSystemState);
    msgLength = mavlink_msg_to_send_buffer(mavBuffer, &mavMsg);
    mavlinkSerialWrite(mavBuffer, msgLength);
}

void processMAVLinkTelemetry(void)
{

    if (mavlinkStreamTrigger(MAV_DATA_STREAM_EXTENDED_STATUS)) {
        mavlinkSendSystemStatus();
    }

    if (mavlinkStreamTrigger(MAV_DATA_STREAM_RC_CHANNELS)) {
        mavlinkSendRCChannelsAndRSSI();
    }







    if (mavlinkStreamTrigger(MAV_DATA_STREAM_EXTRA1)) {
        mavlinkSendAttitude();
    }

    if (mavlinkStreamTrigger(MAV_DATA_STREAM_EXTRA2)) {
        mavlinkSendHUDAndHeartbeat();
    }
}

void handleMAVLinkTelemetry(void)
{
    if (!mavlinkTelemetryEnabled) {
        return;
    }

    if (!mavlinkPort) {
        return;
    }

    uint32_t now = micros();
    if ((now - lastMavlinkMessage) >= ((1000 * 1000) / 50)) {
        processMAVLinkTelemetry();
        lastMavlinkMessage = now;
    }
}
